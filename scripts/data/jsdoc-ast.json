[
    {
        "comment": "/**\r\n * `AddonAPI` is a utility class for working with plugins and themes. Instances are accessible through the {@link BdApi}.\r\n * @name AddonAPI\r\n */",
        "meta": {
            "filename": "addonapi.js",
            "lineno": 1,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`AddonAPI` is a utility class for working with plugins and themes. Instances are accessible through the {@link BdApi}.",
        "name": "AddonAPI",
        "longname": "AddonAPI",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                153,
                1777
            ],
            "filename": "addonapi.js",
            "lineno": 5,
            "columnno": 1,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000002",
                "name": "AddonAPI",
                "type": "ClassDeclaration",
                "paramnames": [
                    "manager"
                ]
            }
        },
        "undocumented": true,
        "name": "AddonAPI",
        "longname": "AddonAPI",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                175,
                184
            ],
            "filename": "addonapi.js",
            "lineno": 6,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000005",
                "name": "manager",
                "type": "ClassPrivateProperty"
            }
        },
        "undocumented": true,
        "name": "manager",
        "longname": "AddonAPI#manager",
        "kind": "member",
        "memberof": "AddonAPI",
        "scope": "instance",
        "access": "private"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                192,
                239
            ],
            "filename": "addonapi.js",
            "lineno": 8,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000006",
                "name": "AddonAPI",
                "type": "MethodDefinition",
                "paramnames": [
                    "manager"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "AddonAPI",
        "longname": "AddonAPI",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                214,
                237
            ],
            "filename": "addonapi.js",
            "lineno": 8,
            "columnno": 26,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000012",
                "name": "this.",
                "type": "Identifier",
                "value": "manager",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "AddonAPI",
        "longname": "AddonAPI.AddonAPI",
        "kind": "member",
        "memberof": "AddonAPI",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * The path to the addon folder.\r\n     * @type string\r\n     */",
        "meta": {
            "range": [
                324,
                372
            ],
            "filename": "addonapi.js",
            "lineno": 14,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000018",
                "name": "AddonAPI#folder",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "The path to the addon folder.",
        "type": {
            "names": [
                "string"
            ]
        },
        "name": "folder",
        "longname": "AddonAPI#folder",
        "kind": "member",
        "memberof": "AddonAPI",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\r\n     * Determines if a particular adon is enabled.\r\n     * @param {string} idOrFile Addon id or filename.\r\n     * @returns {boolean}\r\n     */",
        "meta": {
            "range": [
                532,
                595
            ],
            "filename": "addonapi.js",
            "lineno": 21,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000029",
                "name": "AddonAPI#isEnabled",
                "type": "MethodDefinition",
                "paramnames": [
                    "idOrFile"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Determines if a particular adon is enabled.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Addon id or filename.",
                "name": "idOrFile"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "name": "isEnabled",
        "longname": "AddonAPI#isEnabled",
        "kind": "function",
        "memberof": "AddonAPI",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Enables the given addon.\r\n     * @param {string} idOrFile Addon id or filename.\r\n     */",
        "meta": {
            "range": [
                709,
                773
            ],
            "filename": "addonapi.js",
            "lineno": 27,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000043",
                "name": "AddonAPI#enable",
                "type": "MethodDefinition",
                "paramnames": [
                    "idOrAddon"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Enables the given addon.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Addon id or filename.",
                "name": "idOrFile"
            }
        ],
        "name": "enable",
        "longname": "AddonAPI#enable",
        "kind": "function",
        "memberof": "AddonAPI",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Disables the given addon.\r\n     * @param {string} idOrFile Addon id or filename.\r\n     */",
        "meta": {
            "range": [
                888,
                954
            ],
            "filename": "addonapi.js",
            "lineno": 33,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000057",
                "name": "AddonAPI#disable",
                "type": "MethodDefinition",
                "paramnames": [
                    "idOrAddon"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Disables the given addon.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Addon id or filename.",
                "name": "idOrFile"
            }
        ],
        "name": "disable",
        "longname": "AddonAPI#disable",
        "kind": "function",
        "memberof": "AddonAPI",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Toggles if a particular addon is enabled.\r\n     * @param {string} idOrFile Addon id or filename.\r\n     */",
        "meta": {
            "range": [
                1085,
                1149
            ],
            "filename": "addonapi.js",
            "lineno": 39,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000071",
                "name": "AddonAPI#toggle",
                "type": "MethodDefinition",
                "paramnames": [
                    "idOrAddon"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Toggles if a particular addon is enabled.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Addon id or filename.",
                "name": "idOrFile"
            }
        ],
        "name": "toggle",
        "longname": "AddonAPI#toggle",
        "kind": "function",
        "memberof": "AddonAPI",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Reloads if a particular addon is enabled.\r\n     * @param {string} idOrFile Addon id or filename.\r\n     */",
        "meta": {
            "range": [
                1280,
                1356
            ],
            "filename": "addonapi.js",
            "lineno": 45,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000085",
                "name": "AddonAPI#reload",
                "type": "MethodDefinition",
                "paramnames": [
                    "idOrFileOrAddon"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Reloads if a particular addon is enabled.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Addon id or filename.",
                "name": "idOrFile"
            }
        ],
        "name": "reload",
        "longname": "AddonAPI#reload",
        "kind": "function",
        "memberof": "AddonAPI",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Gets a particular addon.\r\n     * @param {string} idOrFile Addon id or filename.\r\n     * @returns {object} Addon instance\r\n     */",
        "meta": {
            "range": [
                1511,
                1567
            ],
            "filename": "addonapi.js",
            "lineno": 52,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000099",
                "name": "AddonAPI#get",
                "type": "MethodDefinition",
                "paramnames": [
                    "idOrFile"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Gets a particular addon.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Addon id or filename.",
                "name": "idOrFile"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Addon instance"
            }
        ],
        "name": "get",
        "longname": "AddonAPI#get",
        "kind": "function",
        "memberof": "AddonAPI",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Gets all addons of this type.\r\n     * @returns {Array<object>} Array of all addon instances\r\n     */",
        "meta": {
            "range": [
                1693,
                1774
            ],
            "filename": "addonapi.js",
            "lineno": 58,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000113",
                "name": "AddonAPI#getAll",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Gets all addons of this type.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                },
                "description": "Array of all addon instances"
            }
        ],
        "name": "getAll",
        "longname": "AddonAPI#getAll",
        "kind": "function",
        "memberof": "AddonAPI",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1845,
                1869
            ],
            "filename": "addonapi.js",
            "lineno": 64,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000153",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                164,
                1042
            ],
            "filename": "contextmenu.js",
            "lineno": 6,
            "columnno": 6,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000174",
                "name": "MenuComponents",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "MenuComponents",
        "longname": "MenuComponents",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                201,
                209
            ],
            "filename": "contextmenu.js",
            "lineno": 7,
            "columnno": 10,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000180",
                "name": "out",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "out",
        "longname": "<anonymous>~out",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                222,
                433
            ],
            "filename": "contextmenu.js",
            "lineno": 8,
            "columnno": 10,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000184",
                "name": "componentMap",
                "type": "ObjectExpression",
                "value": "{\"separator\":\"Separator\",\"checkbox\":\"CheckboxItem\",\"radio\":\"RadioItem\",\"control\":\"ControlItem\",\"groupstart\":\"Group\",\"customitem\":\"Item\"}"
            }
        },
        "undocumented": true,
        "name": "componentMap",
        "longname": "<anonymous>~componentMap",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                248,
                270
            ],
            "filename": "contextmenu.js",
            "lineno": 9,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000187",
                "name": "separator",
                "type": "Literal",
                "value": "Separator"
            }
        },
        "undocumented": true,
        "name": "separator",
        "longname": "<anonymous>~componentMap.separator",
        "kind": "member",
        "memberof": "<anonymous>~componentMap",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                281,
                305
            ],
            "filename": "contextmenu.js",
            "lineno": 10,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000189",
                "name": "checkbox",
                "type": "Literal",
                "value": "CheckboxItem"
            }
        },
        "undocumented": true,
        "name": "checkbox",
        "longname": "<anonymous>~componentMap.checkbox",
        "kind": "member",
        "memberof": "<anonymous>~componentMap",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                316,
                334
            ],
            "filename": "contextmenu.js",
            "lineno": 11,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000191",
                "name": "radio",
                "type": "Literal",
                "value": "RadioItem"
            }
        },
        "undocumented": true,
        "name": "radio",
        "longname": "<anonymous>~componentMap.radio",
        "kind": "member",
        "memberof": "<anonymous>~componentMap",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                345,
                367
            ],
            "filename": "contextmenu.js",
            "lineno": 12,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000193",
                "name": "control",
                "type": "Literal",
                "value": "ControlItem"
            }
        },
        "undocumented": true,
        "name": "control",
        "longname": "<anonymous>~componentMap.control",
        "kind": "member",
        "memberof": "<anonymous>~componentMap",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                378,
                397
            ],
            "filename": "contextmenu.js",
            "lineno": 13,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000195",
                "name": "groupstart",
                "type": "Literal",
                "value": "Group"
            }
        },
        "undocumented": true,
        "name": "groupstart",
        "longname": "<anonymous>~componentMap.groupstart",
        "kind": "member",
        "memberof": "<anonymous>~componentMap",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                408,
                426
            ],
            "filename": "contextmenu.js",
            "lineno": 14,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000197",
                "name": "customitem",
                "type": "Literal",
                "value": "Item"
            }
        },
        "undocumented": true,
        "name": "customitem",
        "longname": "<anonymous>~componentMap.customitem",
        "kind": "member",
        "memberof": "<anonymous>~componentMap",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                446,
                469
            ],
            "filename": "contextmenu.js",
            "lineno": 17,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000200",
                "name": "ContextMenuIndex",
                "type": "Literal",
                "value": null
            }
        },
        "undocumented": true,
        "name": "ContextMenuIndex",
        "longname": "<anonymous>~ContextMenuIndex",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                482,
                632
            ],
            "filename": "contextmenu.js",
            "lineno": 18,
            "columnno": 10,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000204",
                "name": "ContextMenuModule",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ContextMenuModule",
        "longname": "<anonymous>~ContextMenuModule",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                585,
                606
            ],
            "filename": "contextmenu.js",
            "lineno": 18,
            "columnno": 113,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000226",
                "name": "ContextMenuIndex",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ContextMenuIndex",
        "longname": "<anonymous>~ContextMenuIndex",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                610,
                630
            ],
            "filename": "contextmenu.js",
            "lineno": 18,
            "columnno": 138,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000230",
                "name": "searchExports",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "searchExports",
        "longname": "searchExports",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                645,
                768
            ],
            "filename": "contextmenu.js",
            "lineno": 19,
            "columnno": 10,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000233",
                "name": "rawMatches",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "rawMatches",
        "longname": "<anonymous>~rawMatches",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                781,
                887
            ],
            "filename": "contextmenu.js",
            "lineno": 21,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000250",
                "name": "out.Menu",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Menu",
        "longname": "<anonymous>~out.Menu",
        "kind": "member",
        "memberof": "<anonymous>~out",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                954,
                1009
            ],
            "filename": "contextmenu.js",
            "lineno": 24,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000279",
                "name": "out[undefined]",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "ContextMenuModule[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined]",
        "longname": "<anonymous>~out.undefined]",
        "kind": "member",
        "memberof": "<anonymous>~out",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1053,
                1658
            ],
            "filename": "contextmenu.js",
            "lineno": 30,
            "columnno": 6,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000291",
                "name": "ContextMenuActions",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ContextMenuActions",
        "longname": "ContextMenuActions",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1094,
                1102
            ],
            "filename": "contextmenu.js",
            "lineno": 31,
            "columnno": 10,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000297",
                "name": "out",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "out",
        "longname": "<anonymous>~out",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1117,
                1286
            ],
            "filename": "contextmenu.js",
            "lineno": 33,
            "columnno": 10,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000301",
                "name": "ActionsModule",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ActionsModule",
        "longname": "<anonymous>~ActionsModule",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1264,
                1284
            ],
            "filename": "contextmenu.js",
            "lineno": 33,
            "columnno": 157,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000333",
                "name": "searchExports",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "searchExports",
        "longname": "searchExports",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1306,
                1309
            ],
            "filename": "contextmenu.js",
            "lineno": 35,
            "columnno": 15,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000337",
                "name": "key"
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1433,
                1474
            ],
            "filename": "contextmenu.js",
            "lineno": 37,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000358",
                "name": "out.closeContextMenu",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "ActionsModule[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "closeContextMenu",
        "longname": "<anonymous>~out.closeContextMenu",
        "kind": "member",
        "memberof": "<anonymous>~out",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1574,
                1614
            ],
            "filename": "contextmenu.js",
            "lineno": 40,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000378",
                "name": "out.openContextMenu",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "ActionsModule[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "openContextMenu",
        "longname": "<anonymous>~out.openContextMenu",
        "kind": "member",
        "memberof": "<anonymous>~out",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1663,
                4648
            ],
            "filename": "contextmenu.js",
            "lineno": 47,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000387",
                "name": "MenuPatcher",
                "type": "ClassDeclaration",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "MenuPatcher",
        "longname": "MenuPatcher",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1688,
                1721
            ],
            "filename": "contextmenu.js",
            "lineno": 48,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000390",
                "name": "MAX_PATCH_ITERATIONS",
                "type": "ClassProperty"
            }
        },
        "undocumented": true,
        "name": "MAX_PATCH_ITERATIONS",
        "longname": "MenuPatcher#MAX_PATCH_ITERATIONS",
        "kind": "member",
        "memberof": "MenuPatcher",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1727,
                1747
            ],
            "filename": "contextmenu.js",
            "lineno": 49,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000392",
                "name": "patches",
                "type": "ClassProperty"
            }
        },
        "undocumented": true,
        "name": "patches",
        "longname": "MenuPatcher#patches",
        "kind": "member",
        "memberof": "MenuPatcher",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1753,
                1787
            ],
            "filename": "contextmenu.js",
            "lineno": 50,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000394",
                "name": "subPatches",
                "type": "ClassProperty"
            }
        },
        "undocumented": true,
        "name": "subPatches",
        "longname": "MenuPatcher#subPatches",
        "kind": "member",
        "memberof": "MenuPatcher",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1795,
                2913
            ],
            "filename": "contextmenu.js",
            "lineno": 52,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000397",
                "name": "MenuPatcher.initialize",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "initialize",
        "longname": "MenuPatcher.initialize",
        "kind": "function",
        "memberof": "MenuPatcher",
        "scope": "static",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1833,
                1839
            ],
            "filename": "contextmenu.js",
            "lineno": 53,
            "columnno": 15,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000404",
                "name": "module",
                "type": "Identifier",
                "value": "module"
            }
        },
        "undocumented": true,
        "name": "module",
        "longname": "module",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1841,
                1844
            ],
            "filename": "contextmenu.js",
            "lineno": 53,
            "columnno": 23,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000406",
                "name": "key",
                "type": "Identifier",
                "value": "key"
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "key",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1876,
                2038
            ],
            "filename": "contextmenu.js",
            "lineno": 54,
            "columnno": 18,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000412",
                "name": "module",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "module",
        "longname": "<anonymous>~module",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2016,
                2036
            ],
            "filename": "contextmenu.js",
            "lineno": 54,
            "columnno": 158,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000444",
                "name": "searchExports",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "searchExports",
        "longname": "searchExports",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2059,
                2122
            ],
            "filename": "contextmenu.js",
            "lineno": 55,
            "columnno": 18,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000447",
                "name": "key",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2147,
                2153
            ],
            "filename": "contextmenu.js",
            "lineno": 57,
            "columnno": 20,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000468",
                "name": "module",
                "type": "Identifier",
                "value": "module"
            }
        },
        "undocumented": true,
        "name": "module",
        "longname": "module",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2155,
                2158
            ],
            "filename": "contextmenu.js",
            "lineno": 57,
            "columnno": 28,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000470",
                "name": "key",
                "type": "Identifier",
                "value": "key"
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "key",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2282,
                2310
            ],
            "filename": "contextmenu.js",
            "lineno": 61,
            "columnno": 18,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000485",
                "name": "promise",
                "type": "MemberExpression",
                "value": "methodArguments[1]"
            }
        },
        "undocumented": true,
        "name": "promise",
        "longname": "<anonymous>~promise",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2325,
                2892
            ],
            "filename": "contextmenu.js",
            "lineno": 62,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000491",
                "name": "methodArguments[1]",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "render": "methodArguments[1]~render",
                "": null
            }
        },
        "undocumented": true,
        "name": "methodArguments[1]",
        "longname": "methodArguments[1]",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2389,
                2434
            ],
            "filename": "contextmenu.js",
            "lineno": 63,
            "columnno": 22,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000498",
                "name": "render",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "render",
        "longname": "methodArguments[1]~render",
        "kind": "constant",
        "memberof": "methodArguments[1]",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2500,
                2519
            ],
            "filename": "contextmenu.js",
            "lineno": 66,
            "columnno": 26,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000512",
                "name": "res",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "res",
        "longname": "<anonymous>~res",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2921,
                4060
            ],
            "filename": "contextmenu.js",
            "lineno": 81,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000547",
                "name": "MenuPatcher.patchRecursive",
                "type": "MethodDefinition",
                "paramnames": [
                    "target",
                    "method",
                    "iteration"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "patchRecursive",
        "longname": "MenuPatcher.patchRecursive",
        "kind": "function",
        "memberof": "MenuPatcher",
        "scope": "static",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3054,
                4009
            ],
            "filename": "contextmenu.js",
            "lineno": 84,
            "columnno": 14,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000564",
                "name": "proxyFunction",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "proxyFunction",
        "longname": "<anonymous>~proxyFunction",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3137,
                3170
            ],
            "filename": "contextmenu.js",
            "lineno": 85,
            "columnno": 18,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000580",
                "name": "originalFunction",
                "type": "MemberExpression",
                "value": "target[undefined]"
            }
        },
        "undocumented": true,
        "name": "originalFunction",
        "longname": "<anonymous>~originalFunction",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3185,
                3795
            ],
            "filename": "contextmenu.js",
            "lineno": 86,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000585",
                "name": "patch",
                "type": "FunctionDeclaration",
                "paramnames": []
            },
            "vars": {
                "res": "<anonymous>~patch~res",
                "layer": "<anonymous>~patch~layer"
            }
        },
        "undocumented": true,
        "name": "patch",
        "longname": "<anonymous>~patch",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3227,
                3272
            ],
            "filename": "contextmenu.js",
            "lineno": 87,
            "columnno": 22,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000589",
                "name": "res",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "res",
        "longname": "<anonymous>~patch~res",
        "kind": "constant",
        "memberof": "<anonymous>~patch",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3509,
                3562
            ],
            "filename": "contextmenu.js",
            "lineno": 95,
            "columnno": 26,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000621",
                "name": "layer",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "layer",
        "longname": "<anonymous>~patch~layer",
        "kind": "constant",
        "memberof": "<anonymous>~patch",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3811,
                3853
            ],
            "filename": "contextmenu.js",
            "lineno": 105,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000653",
                "name": "patch._originalFunction",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "originalFunction",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_originalFunction",
        "longname": "<anonymous>~patch._originalFunction",
        "kind": "member",
        "memberof": "<anonymous>~patch",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4022,
                4052
            ],
            "filename": "contextmenu.js",
            "lineno": 112,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000677",
                "name": "target[undefined]",
                "type": "Identifier",
                "value": "proxyFunction",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "target[undefined]",
        "longname": "target[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4068,
                4430
            ],
            "filename": "contextmenu.js",
            "lineno": 115,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000682",
                "name": "MenuPatcher.runPatches",
                "type": "MethodDefinition",
                "paramnames": [
                    "id",
                    "res",
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "runPatches",
        "longname": "MenuPatcher.runPatches",
        "kind": "function",
        "memberof": "MenuPatcher",
        "scope": "static",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4166,
                4171
            ],
            "filename": "contextmenu.js",
            "lineno": 118,
            "columnno": 19,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000699",
                "name": "patch"
            }
        },
        "undocumented": true,
        "name": "patch",
        "longname": "<anonymous>~patch",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4438,
                4555
            ],
            "filename": "contextmenu.js",
            "lineno": 128,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000727",
                "name": "MenuPatcher.patch",
                "type": "MethodDefinition",
                "paramnames": [
                    "id",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "patch",
        "longname": "MenuPatcher.patch",
        "kind": "function",
        "memberof": "MenuPatcher",
        "scope": "static",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4476,
                4506
            ],
            "filename": "contextmenu.js",
            "lineno": 129,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000734",
                "name": "this.patches[undefined]",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "patches[undefined]",
        "longname": "MenuPatcher#patches[undefined]",
        "kind": "member",
        "memberof": "MenuPatcher",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4563,
                4645
            ],
            "filename": "contextmenu.js",
            "lineno": 133,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000752",
                "name": "MenuPatcher.unpatch",
                "type": "MethodDefinition",
                "paramnames": [
                    "id",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "unpatch",
        "longname": "MenuPatcher.unpatch",
        "kind": "function",
        "memberof": "MenuPatcher",
        "scope": "static",
        "params": []
    },
    {
        "comment": "/**\r\n * `ContextMenu` is a module to help patch and create context menus. Instance is accessible through the {@link BdApi}.\r\n * @type ContextMenu\r\n * @summary {@link ContextMenu} is a utility class for interacting with React internals.\r\n * @name ContextMenu\r\n */",
        "meta": {
            "filename": "contextmenu.js",
            "lineno": 138,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`ContextMenu` is a module to help patch and create context menus. Instance is accessible through the {@link BdApi}.",
        "type": {
            "names": [
                "ContextMenu"
            ]
        },
        "summary": "{@link ContextMenu} is a utility class for interacting with React internals.",
        "name": "ContextMenu",
        "longname": "ContextMenu",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4916,
                11520
            ],
            "filename": "contextmenu.js",
            "lineno": 144,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000760",
                "name": "ContextMenu",
                "type": "ClassDeclaration",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ContextMenu",
        "longname": "ContextMenu",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "/**\r\n     * Allows you to patch a given context menu. Acts as a wrapper around the `Patcher`.\r\n     * \r\n     * @param {string} navId Discord's internal navId used to identify context menus\r\n     * @param {function} callback callback function that accepts the react render tree\r\n     * @returns {function} a function that automatically unpatches\r\n     */",
        "meta": {
            "range": [
                5302,
                5440
            ],
            "filename": "contextmenu.js",
            "lineno": 153,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000763",
                "name": "ContextMenu#patch",
                "type": "MethodDefinition",
                "paramnames": [
                    "navId",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Allows you to patch a given context menu. Acts as a wrapper around the `Patcher`.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Discord's internal navId used to identify context menus",
                "name": "navId"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "callback function that accepts the react render tree",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "a function that automatically unpatches"
            }
        ],
        "name": "patch",
        "longname": "ContextMenu#patch",
        "kind": "function",
        "memberof": "ContextMenu",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Allows you to remove the patch added to a given context menu.\r\n     * \r\n     * @param {string} navId the original navId from patching\r\n     * @param {function} callback the original callback from patching\r\n     */",
        "meta": {
            "range": [
                5679,
                5759
            ],
            "filename": "contextmenu.js",
            "lineno": 165,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000784",
                "name": "ContextMenu#unpatch",
                "type": "MethodDefinition",
                "paramnames": [
                    "navId",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Allows you to remove the patch added to a given context menu.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "the original navId from patching",
                "name": "navId"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "the original callback from patching",
                "name": "callback"
            }
        ],
        "name": "unpatch",
        "longname": "ContextMenu#unpatch",
        "kind": "function",
        "memberof": "ContextMenu",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Builds a single menu item. The only prop shown here is the type, the rest should\r\n     * match the actual component being built. View those to see what options exist\r\n     * for each, they often have less in common than you might think.\r\n     * \r\n     * @param {object} props - props used to build the item\r\n     * @param {string} [props.type=\"text\"] - type of the item, options: text, submenu, toggle, radio, custom, separator\r\n     * @returns {object} the created component\r\n     * \r\n     * @example\r\n     * // Creates a single menu item that prints \"MENU ITEM\" on click\r\n     * ContextMenu.buildItem({\r\n     *      label: \"Menu Item\",\r\n     *      action: () => {console.log(\"MENU ITEM\");}\r\n     * });\r\n     * \r\n     * @example\r\n     * // Creates a single toggle item that starts unchecked\r\n     * // and print the new value on every toggle\r\n     * ContextMenu.buildItem({\r\n     *      type: \"toggle\",\r\n     *      label: \"Item Toggle\",\r\n     *      checked: false,\r\n     *      action: (newValue) => {console.log(newValue);}\r\n     * });\r\n     */",
        "meta": {
            "range": [
                6835,
                7830
            ],
            "filename": "contextmenu.js",
            "lineno": 195,
            "columnno": 5,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000797",
                "name": "ContextMenu#buildItem",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Builds a single menu item. The only prop shown here is the type, the rest should\rmatch the actual component being built. View those to see what options exist\rfor each, they often have less in common than you might think.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "props used to build the item",
                "name": "props"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"text\"",
                "description": "type of the item, options: text, submenu, toggle, radio, custom, separator",
                "name": "props.type"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "the created component"
            }
        ],
        "examples": [
            "// Creates a single menu item that prints \"MENU ITEM\" on click\rContextMenu.buildItem({\r     label: \"Menu Item\",\r     action: () => {console.log(\"MENU ITEM\");}\r});",
            "// Creates a single toggle item that starts unchecked\r// and print the new value on every toggle\rContextMenu.buildItem({\r     type: \"toggle\",\r     label: \"Item Toggle\",\r     checked: false,\r     action: (newValue) => {console.log(newValue);}\r});"
        ],
        "name": "buildItem",
        "longname": "ContextMenu#buildItem",
        "kind": "function",
        "memberof": "ContextMenu",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6870,
                6874
            ],
            "filename": "contextmenu.js",
            "lineno": 196,
            "columnno": 15,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000805",
                "name": "type",
                "type": "Identifier",
                "value": "type"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "type",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6989,
                7020
            ],
            "filename": "contextmenu.js",
            "lineno": 199,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000821",
                "name": "Component",
                "type": "MemberExpression",
                "value": "MenuComponents.Item"
            }
        },
        "undocumented": true,
        "name": "Component",
        "longname": "<anonymous>~Component",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7091,
                7159
            ],
            "filename": "contextmenu.js",
            "lineno": 201,
            "columnno": 33,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000837",
                "name": "props.children",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "children",
        "longname": "props.children",
        "kind": "member",
        "memberof": "props",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7244,
                7330
            ],
            "filename": "contextmenu.js",
            "lineno": 204,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000862",
                "name": "Component",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Component",
        "longname": "<anonymous>~Component",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7363,
                7391
            ],
            "filename": "contextmenu.js",
            "lineno": 205,
            "columnno": 30,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000879",
                "name": "props.checked",
                "type": "MemberExpression",
                "value": "props.active",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "checked",
        "longname": "props.checked",
        "kind": "member",
        "memberof": "props",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7457,
                7495
            ],
            "filename": "contextmenu.js",
            "lineno": 208,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000892",
                "name": "Component",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "MenuComponents.ControlItem",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Component",
        "longname": "<anonymous>~Component",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7532,
                7594
            ],
            "filename": "contextmenu.js",
            "lineno": 210,
            "columnno": 23,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000903",
                "name": "props.id",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "props.id",
        "kind": "member",
        "memberof": "props",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7623,
                7650
            ],
            "filename": "contextmenu.js",
            "lineno": 211,
            "columnno": 26,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000923",
                "name": "props.color",
                "type": "Literal",
                "value": "colorDanger",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "color",
        "longname": "props.color",
        "kind": "member",
        "memberof": "props",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7697,
                7725
            ],
            "filename": "contextmenu.js",
            "lineno": 212,
            "columnno": 44,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000938",
                "name": "props.action",
                "type": "MemberExpression",
                "value": "props.onClick",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "action",
        "longname": "props.action",
        "kind": "member",
        "memberof": "props",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7736,
                7757
            ],
            "filename": "contextmenu.js",
            "lineno": 213,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000946",
                "name": "props.extended",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "extended",
        "longname": "props.extended",
        "kind": "member",
        "memberof": "props",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * Creates the all the items **and groups** of a context menu recursively.\r\n     * There is no hard limit to the number of groups within groups or number\r\n     * of items in a menu.\r\n     * @param {Array<object>} setup - array of item props used to build items. See {@link ContextMenu.buildItem}\r\n     * @returns {Array<object>} array of the created component\r\n     * \r\n     * @example\r\n     * // Creates a single item group item with a toggle item\r\n     * ContextMenu.buildMenuChildren([{\r\n     *      type: \"group\",\r\n     *      items: [{\r\n     *          type: \"toggle\",\r\n     *          label: \"Item Toggle\",\r\n     *          active: false,\r\n     *          action: (newValue) => {console.log(newValue);}\r\n     *      }]\r\n     * }]);\r\n     * \r\n     * @example\r\n     * // Creates two item groups with a single toggle item each\r\n     * ContextMenu.buildMenuChildren([{\r\n     *     type: \"group\",\r\n     *     items: [{\r\n     *         type: \"toggle\",\r\n     *         label: \"Item Toggle\",\r\n     *         active: false,\r\n     *         action: (newValue) => {\r\n     *             console.log(newValue);\r\n     *         }\r\n     *     }]\r\n     * }, {\r\n     *     type: \"group\",\r\n     *     items: [{\r\n     *         type: \"toggle\",\r\n     *         label: \"Item Toggle\",\r\n     *         active: false,\r\n     *         action: (newValue) => {\r\n     *             console.log(newValue);\r\n     *         }\r\n     *     }]\r\n     * }]);\r\n     */",
        "meta": {
            "range": [
                9290,
                9715
            ],
            "filename": "contextmenu.js",
            "lineno": 261,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000958",
                "name": "ContextMenu#buildMenuChildren",
                "type": "MethodDefinition",
                "paramnames": [
                    "setup"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Creates the all the items **and groups** of a context menu recursively.\rThere is no hard limit to the number of groups within groups or number\rof items in a menu.",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                },
                "description": "array of item props used to build items. See {@link ContextMenu.buildItem}",
                "name": "setup"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                },
                "description": "array of the created component"
            }
        ],
        "examples": [
            "// Creates a single item group item with a toggle item\rContextMenu.buildMenuChildren([{\r     type: \"group\",\r     items: [{\r         type: \"toggle\",\r         label: \"Item Toggle\",\r         active: false,\r         action: (newValue) => {console.log(newValue);}\r     }]\r}]);",
            "// Creates two item groups with a single toggle item each\rContextMenu.buildMenuChildren([{\r    type: \"group\",\r    items: [{\r        type: \"toggle\",\r        label: \"Item Toggle\",\r        active: false,\r        action: (newValue) => {\r            console.log(newValue);\r        }\r    }]\r}, {\r    type: \"group\",\r    items: [{\r        type: \"toggle\",\r        label: \"Item Toggle\",\r        active: false,\r        action: (newValue) => {\r            console.log(newValue);\r        }\r    }]\r}]);"
        ],
        "name": "buildMenuChildren",
        "longname": "ContextMenu#buildMenuChildren",
        "kind": "function",
        "memberof": "ContextMenu",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9332,
                9456
            ],
            "filename": "contextmenu.js",
            "lineno": 262,
            "columnno": 14,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000964",
                "name": "mapper",
                "type": "ArrowFunctionExpression"
            }
        },
        "undocumented": true,
        "name": "mapper",
        "longname": "<anonymous>~mapper",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9473,
                9657
            ],
            "filename": "contextmenu.js",
            "lineno": 266,
            "columnno": 14,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000986",
                "name": "buildGroup",
                "type": "FunctionExpression"
            },
            "vars": {
                "items": "<anonymous>~buildGroup~items",
                "": null
            }
        },
        "undocumented": true,
        "name": "buildGroup",
        "longname": "<anonymous>~buildGroup",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9523,
                9569
            ],
            "filename": "contextmenu.js",
            "lineno": 267,
            "columnno": 18,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000992",
                "name": "items",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "items",
        "longname": "<anonymous>~buildGroup~items",
        "kind": "constant",
        "memberof": "<anonymous>~buildGroup",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\r\n     * Creates the menu *component* including the wrapping `ContextMenu`.\r\n     * Calls {@link ContextMenu.buildMenuChildren} under the covers.\r\n     * Used to call in combination with {@link ContextMenu.open}.\r\n     * @param {Array<object>} setup - array of item props used to build items. See {@link ContextMenu.buildMenuChildren}\r\n     * @returns {function} the unique context menu component\r\n     */",
        "meta": {
            "range": [
                10137,
                10279
            ],
            "filename": "contextmenu.js",
            "lineno": 280,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001029",
                "name": "ContextMenu#buildMenu",
                "type": "MethodDefinition",
                "paramnames": [
                    "setup"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Creates the menu *component* including the wrapping `ContextMenu`.\rCalls {@link ContextMenu.buildMenuChildren} under the covers.\rUsed to call in combination with {@link ContextMenu.open}.",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                },
                "description": "array of item props used to build items. See {@link ContextMenu.buildMenuChildren}",
                "name": "setup"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "the unique context menu component"
            }
        ],
        "name": "buildMenu",
        "longname": "ContextMenu#buildMenu",
        "kind": "function",
        "memberof": "ContextMenu",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Function that allows you to open an entire context menu. Recommended to build the menu with this module.\r\n     * \r\n     * @param {MouseEvent} event - The context menu event. This can be emulated, requires target, and all X, Y locations.\r\n     * @param {function} menuComponent - Component to render. This can be any react component or output of {@link ContextMenu.buildMenu}\r\n     * @param {object} config - configuration/props for the context menu\r\n     * @param {string} [config.position=\"right\"] - default position for the menu, options: \"left\", \"right\"\r\n     * @param {string} [config.align=\"top\"] - default alignment for the menu, options: \"bottom\", \"top\"\r\n     * @param {function} [config.onClose] - function to run when the menu is closed\r\n     * @param {boolean} [config.noBlurEvent=false] - No clue\r\n     */",
        "meta": {
            "range": [
                11121,
                11383
            ],
            "filename": "contextmenu.js",
            "lineno": 295,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001052",
                "name": "ContextMenu#open",
                "type": "MethodDefinition",
                "paramnames": [
                    "event",
                    "menuComponent",
                    "config"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Function that allows you to open an entire context menu. Recommended to build the menu with this module.",
        "params": [
            {
                "type": {
                    "names": [
                        "MouseEvent"
                    ]
                },
                "description": "The context menu event. This can be emulated, requires target, and all X, Y locations.",
                "name": "event"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Component to render. This can be any react component or output of {@link ContextMenu.buildMenu}",
                "name": "menuComponent"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "configuration/props for the context menu",
                "name": "config"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"right\"",
                "description": "default position for the menu, options: \"left\", \"right\"",
                "name": "config.position"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"top\"",
                "description": "default alignment for the menu, options: \"bottom\", \"top\"",
                "name": "config.align"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "function to run when the menu is closed",
                "name": "config.onClose"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "No clue",
                "name": "config.noBlurEvent"
            }
        ],
        "name": "open",
        "longname": "ContextMenu#open",
        "kind": "function",
        "memberof": "ContextMenu",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11307,
                11351
            ],
            "filename": "contextmenu.js",
            "lineno": 297,
            "columnno": 76,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001081",
                "name": "onClose",
                "type": "MemberExpression",
                "value": "ContextMenuActions.closeContextMenu"
            }
        },
        "undocumented": true,
        "name": "onClose",
        "longname": "onClose",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\r\n     * Closes the current opened context menu immediately.\r\n     */",
        "meta": {
            "range": [
                11469,
                11517
            ],
            "filename": "contextmenu.js",
            "lineno": 304,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001086",
                "name": "ContextMenu#close",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Closes the current opened context menu immediately.",
        "name": "close",
        "longname": "ContextMenu#close",
        "kind": "function",
        "memberof": "ContextMenu",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11676,
                11703
            ],
            "filename": "contextmenu.js",
            "lineno": 312,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001123",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * `Data` is a simple utility class for the management of plugin data. An instance is available on {@link BdApi}.\r\n * @type Data\r\n * @summary {@link Data} is a simple utility class for the management of plugin data.\r\n * @name Data\r\n */",
        "meta": {
            "filename": "data.js",
            "lineno": 3,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`Data` is a simple utility class for the management of plugin data. An instance is available on {@link BdApi}.",
        "type": {
            "names": [
                "Data"
            ]
        },
        "summary": "{@link Data} is a simple utility class for the management of plugin data.",
        "name": "Data",
        "longname": "Data",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                283,
                1833
            ],
            "filename": "data.js",
            "lineno": 9,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001131",
                "name": "Data",
                "type": "ClassDeclaration",
                "paramnames": [
                    "callerName"
                ]
            }
        },
        "undocumented": true,
        "name": "Data",
        "longname": "Data",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                303,
                320
            ],
            "filename": "data.js",
            "lineno": 11,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001134",
                "name": "callerName",
                "type": "ClassPrivateProperty"
            }
        },
        "undocumented": true,
        "name": "callerName",
        "longname": "Data#callerName",
        "kind": "member",
        "memberof": "Data",
        "scope": "instance",
        "access": "private"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                328,
                434
            ],
            "filename": "data.js",
            "lineno": 13,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001136",
                "name": "Data",
                "type": "MethodDefinition",
                "paramnames": [
                    "callerName"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Data",
        "longname": "Data",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                397,
                426
            ],
            "filename": "data.js",
            "lineno": 15,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001146",
                "name": "this.",
                "type": "Identifier",
                "value": "callerName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Data",
        "longname": "Data.Data",
        "kind": "member",
        "memberof": "Data",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * Saves JSON-serializable data.\r\n     * \r\n     * @param {string} pluginName Name of the plugin saving data\r\n     * @param {string} key Which piece of data to store\r\n     * @param {any} data The data to be saved\r\n     */",
        "meta": {
            "range": [
                677,
                921
            ],
            "filename": "data.js",
            "lineno": 25,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001152",
                "name": "Data#save",
                "type": "MethodDefinition",
                "paramnames": [
                    "pluginName",
                    "key",
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Saves JSON-serializable data.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the plugin saving data",
                "name": "pluginName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Which piece of data to store",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "The data to be saved",
                "name": "data"
            }
        ],
        "name": "save",
        "longname": "Data#save",
        "kind": "function",
        "memberof": "Data",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                753,
                763
            ],
            "filename": "data.js",
            "lineno": 27,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001166",
                "name": "data",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "key",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~data",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                778,
                794
            ],
            "filename": "data.js",
            "lineno": 28,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001170",
                "name": "key",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "pluginName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                809,
                838
            ],
            "filename": "data.js",
            "lineno": 29,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001174",
                "name": "pluginName",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pluginName",
        "longname": "<anonymous>~pluginName",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\r\n     * Loads previously stored data.\r\n     * \r\n     * @param {string} pluginName Name of the plugin loading data\r\n     * @param {string} key Which piece of data to load\r\n     * @returns {any} The stored data\r\n     */",
        "meta": {
            "range": [
                1156,
                1363
            ],
            "filename": "data.js",
            "lineno": 41,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001188",
                "name": "Data#load",
                "type": "MethodDefinition",
                "paramnames": [
                    "pluginName",
                    "key"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Loads previously stored data.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the plugin loading data",
                "name": "pluginName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Which piece of data to load",
                "name": "key"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "The stored data"
            }
        ],
        "name": "load",
        "longname": "Data#load",
        "kind": "function",
        "memberof": "Data",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1226,
                1242
            ],
            "filename": "data.js",
            "lineno": 43,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001201",
                "name": "key",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "pluginName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1257,
                1286
            ],
            "filename": "data.js",
            "lineno": 44,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001205",
                "name": "pluginName",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pluginName",
        "longname": "<anonymous>~pluginName",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\r\n     * Deletes a piece of stored data, this is different than saving as null or undefined.\r\n     * \r\n     * @param {string} pluginName Name of the plugin deleting data\r\n     * @param {string} key Which piece of data to delete\r\n     */",
        "meta": {
            "range": [
                1616,
                1828
            ],
            "filename": "data.js",
            "lineno": 55,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001218",
                "name": "Data#delete",
                "type": "MethodDefinition",
                "paramnames": [
                    "pluginName",
                    "key"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Deletes a piece of stored data, this is different than saving as null or undefined.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the plugin deleting data",
                "name": "pluginName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Which piece of data to delete",
                "name": "key"
            }
        ],
        "name": "delete",
        "longname": "Data#delete",
        "kind": "function",
        "memberof": "Data",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1688,
                1704
            ],
            "filename": "data.js",
            "lineno": 57,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001231",
                "name": "key",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "pluginName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1719,
                1748
            ],
            "filename": "data.js",
            "lineno": 58,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001235",
                "name": "pluginName",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pluginName",
        "longname": "<anonymous>~pluginName",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1891,
                1911
            ],
            "filename": "data.js",
            "lineno": 67,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001262",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * `DOM` is a simple utility class for dom manipulation. An instance is available on {@link BdApi}.\r\n * @type DOM\r\n * @summary {@link DOM} is a simple utility class for dom manipulation.\r\n * @name DOM\r\n */",
        "meta": {
            "filename": "dom.js",
            "lineno": 3,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`DOM` is a simple utility class for dom manipulation. An instance is available on {@link BdApi}.",
        "type": {
            "names": [
                "DOM"
            ]
        },
        "summary": "{@link DOM} is a simple utility class for dom manipulation.",
        "name": "DOM",
        "longname": "DOM",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                255,
                4125
            ],
            "filename": "dom.js",
            "lineno": 9,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001270",
                "name": "DOM",
                "type": "ClassDeclaration",
                "paramnames": [
                    "callerName"
                ]
            }
        },
        "undocumented": true,
        "name": "DOM",
        "longname": "DOM",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "/**\r\n     * Current width of the user's screen.\r\n     * @type {number}\r\n     */",
        "meta": {
            "range": [
                359,
                457
            ],
            "filename": "dom.js",
            "lineno": 15,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001273",
                "name": "DOM#screenWidth",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Current width of the user's screen.",
        "type": {
            "names": [
                "number"
            ]
        },
        "name": "screenWidth",
        "longname": "DOM#screenWidth",
        "kind": "member",
        "memberof": "DOM",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\r\n     * Current height of the user's screen.\r\n     * @type {number}\r\n     */",
        "meta": {
            "range": [
                551,
                652
            ],
            "filename": "dom.js",
            "lineno": 21,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001292",
                "name": "DOM#screenHeight",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Current height of the user's screen.",
        "type": {
            "names": [
                "number"
            ]
        },
        "name": "screenHeight",
        "longname": "DOM#screenHeight",
        "kind": "member",
        "memberof": "DOM",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                660,
                677
            ],
            "filename": "dom.js",
            "lineno": 23,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001311",
                "name": "callerName",
                "type": "ClassPrivateProperty"
            }
        },
        "undocumented": true,
        "name": "callerName",
        "longname": "DOM#callerName",
        "kind": "member",
        "memberof": "DOM",
        "scope": "instance",
        "access": "private"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                685,
                791
            ],
            "filename": "dom.js",
            "lineno": 25,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001313",
                "name": "DOM",
                "type": "MethodDefinition",
                "paramnames": [
                    "callerName"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "DOM",
        "longname": "DOM",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                754,
                783
            ],
            "filename": "dom.js",
            "lineno": 27,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001323",
                "name": "this.",
                "type": "Identifier",
                "value": "callerName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "DOM",
        "longname": "DOM.DOM",
        "kind": "member",
        "memberof": "DOM",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * Adds a `<style>` to the document with the given ID.\r\n     * \r\n     * @param {string} id ID to use for style element\r\n     * @param {string} css CSS to apply to the document\r\n     */",
        "meta": {
            "range": [
                998,
                1311
            ],
            "filename": "dom.js",
            "lineno": 36,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001329",
                "name": "DOM#addStyle",
                "type": "MethodDefinition",
                "paramnames": [
                    "id",
                    "css"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Adds a `<style>` to the document with the given ID.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "ID to use for style element",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "CSS to apply to the document",
                "name": "css"
            }
        ],
        "name": "addStyle",
        "longname": "DOM#addStyle",
        "kind": "function",
        "memberof": "DOM",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1090,
                1107
            ],
            "filename": "dom.js",
            "lineno": 38,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001348",
                "name": "id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "arguments[1]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "<anonymous>~id",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1122,
                1140
            ],
            "filename": "dom.js",
            "lineno": 39,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001354",
                "name": "css",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "arguments[2]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "css",
        "longname": "<anonymous>~css",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1204,
                1212
            ],
            "filename": "dom.js",
            "lineno": 42,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001366",
                "name": "css",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "css",
        "longname": "<anonymous>~css",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1227,
                1248
            ],
            "filename": "dom.js",
            "lineno": 43,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001370",
                "name": "id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "<anonymous>~id",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\r\n     * Removes a `<style>` from the document corresponding to the given ID.\r\n     * \r\n     * @param {string} id ID uses for the style element\r\n     */",
        "meta": {
            "range": [
                1480,
                1738
            ],
            "filename": "dom.js",
            "lineno": 54,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001383",
                "name": "DOM#removeStyle",
                "type": "MethodDefinition",
                "paramnames": [
                    "id"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Removes a `<style>` from the document corresponding to the given ID.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "ID uses for the style element",
                "name": "id"
            }
        ],
        "name": "removeStyle",
        "longname": "DOM#removeStyle",
        "kind": "function",
        "memberof": "DOM",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1570,
                1587
            ],
            "filename": "dom.js",
            "lineno": 56,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001401",
                "name": "id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "arguments[1]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "<anonymous>~id",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1651,
                1672
            ],
            "filename": "dom.js",
            "lineno": 59,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001413",
                "name": "id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "<anonymous>~id",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\r\n     * Adds a listener for when the node is removed from the document body.\r\n     * \r\n     * @param {HTMLElement} node Node to be observed\r\n     * @param {function} callback Function to run when fired\r\n     */",
        "meta": {
            "range": [
                1966,
                2054
            ],
            "filename": "dom.js",
            "lineno": 71,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001425",
                "name": "DOM#onRemoved",
                "type": "MethodDefinition",
                "paramnames": [
                    "node",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Adds a listener for when the node is removed from the document body.",
        "params": [
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "description": "Node to be observed",
                "name": "node"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function to run when fired",
                "name": "callback"
            }
        ],
        "name": "onRemoved",
        "longname": "DOM#onRemoved",
        "kind": "function",
        "memberof": "DOM",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Utility to help smoothly animate using JavaScript\r\n     * \r\n     * @param {function} update render function indicating the style should be updates\r\n     * @param {number} duration duration in ms to animate for\r\n     * @param {object} [options] option to customize the animation\r\n     */",
        "meta": {
            "range": [
                2366,
                2494
            ],
            "filename": "dom.js",
            "lineno": 82,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001438",
                "name": "DOM#animate",
                "type": "MethodDefinition",
                "paramnames": [
                    "update",
                    "duration",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Utility to help smoothly animate using JavaScript",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "render function indicating the style should be updates",
                "name": "update"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "duration in ms to animate for",
                "name": "duration"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "option to customize the animation",
                "name": "options"
            }
        ],
        "name": "animate",
        "longname": "DOM#animate",
        "kind": "function",
        "memberof": "DOM",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2444,
                2450
            ],
            "filename": "dom.js",
            "lineno": 83,
            "columnno": 35,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001453",
                "name": "update",
                "type": "Identifier",
                "value": "update"
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "update",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2452,
                2460
            ],
            "filename": "dom.js",
            "lineno": 83,
            "columnno": 43,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001455",
                "name": "duration",
                "type": "Identifier",
                "value": "duration"
            }
        },
        "undocumented": true,
        "name": "duration",
        "longname": "duration",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2462,
                2484
            ],
            "filename": "dom.js",
            "lineno": 83,
            "columnno": 53,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001457",
                "name": "timing",
                "type": "MemberExpression",
                "value": "options.timing"
            }
        },
        "undocumented": true,
        "name": "timing",
        "longname": "timing",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\r\n     * Utility function to make creating DOM elements easier. Acts similarly \r\n     * to `React.createElement`\r\n     * \r\n     * @param {string} tag HTML tag name to create\r\n     * @param {object} [options] options object to customize the element\r\n     * @param {string} [options.className] class name to add to the element\r\n     * @param {string} [options.id] id to set for the element\r\n     * @param {HTMLElement} [options.target] target element to automatically append to\r\n     * @param {HTMLElement} [child] child node to add\r\n     * @returns HTMLElement\r\n     */",
        "meta": {
            "range": [
                3079,
                3197
            ],
            "filename": "dom.js",
            "lineno": 98,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001461",
                "name": "DOM#createElement",
                "type": "MethodDefinition",
                "paramnames": [
                    "tag",
                    "options",
                    "child"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Utility function to make creating DOM elements easier. Acts similarly \rto `React.createElement`",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "HTML tag name to create",
                "name": "tag"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "options object to customize the element",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "class name to add to the element",
                "name": "options.className"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "id to set for the element",
                "name": "options.id"
            },
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "optional": true,
                "description": "target element to automatically append to",
                "name": "options.target"
            },
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "optional": true,
                "description": "child node to add",
                "name": "child"
            }
        ],
        "returns": [
            {
                "description": "HTMLElement"
            }
        ],
        "name": "createElement",
        "longname": "DOM#createElement",
        "kind": "function",
        "memberof": "DOM",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Parses a string of HTML and returns the results. If the second parameter is true,\r\n     * the parsed HTML will be returned as a document fragment {@see https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment}.\r\n     * This is extremely useful if you have a list of elements at the top level, they can then be appended all at once to another node.\r\n     * \r\n     * If the second parameter is false, then the return value will be the list of parsed\r\n     * nodes and there were multiple top level nodes, otherwise the single node is returned.\r\n     * @param {string} html - HTML to be parsed\r\n     * @param {boolean} [fragment=false] - Whether or not the return should be the raw `DocumentFragment`\r\n     * @returns {(DocumentFragment|NodeList|HTMLElement)} - The result of HTML parsing\r\n     */",
        "meta": {
            "range": [
                4026,
                4122
            ],
            "filename": "dom.js",
            "lineno": 113,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001480",
                "name": "DOM#parseHTML",
                "type": "MethodDefinition",
                "paramnames": [
                    "html",
                    "fragment"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Parses a string of HTML and returns the results. If the second parameter is true,\rthe parsed HTML will be returned as a document fragment {@see https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment}.\rThis is extremely useful if you have a list of elements at the top level, they can then be appended all at once to another node.\r\rIf the second parameter is false, then the return value will be the list of parsed\rnodes and there were multiple top level nodes, otherwise the single node is returned.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "HTML to be parsed",
                "name": "html"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not the return should be the raw `DocumentFragment`",
                "name": "fragment"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "DocumentFragment",
                        "NodeList",
                        "HTMLElement"
                    ]
                },
                "description": "- The result of HTML parsing"
            }
        ],
        "name": "parseHTML",
        "longname": "DOM#parseHTML",
        "kind": "function",
        "memberof": "DOM",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4181,
                4200
            ],
            "filename": "dom.js",
            "lineno": 120,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001509",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                470,
                489
            ],
            "filename": "index.js",
            "lineno": 16,
            "columnno": 6,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001566",
                "name": "bounded",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "bounded",
        "longname": "bounded",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                498,
                537
            ],
            "filename": "index.js",
            "lineno": 17,
            "columnno": 6,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001571",
                "name": "PluginAPI",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "PluginAPI",
        "longname": "PluginAPI",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                546,
                583
            ],
            "filename": "index.js",
            "lineno": 18,
            "columnno": 6,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001577",
                "name": "ThemeAPI",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ThemeAPI",
        "longname": "ThemeAPI",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                592,
                618
            ],
            "filename": "index.js",
            "lineno": 19,
            "columnno": 6,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001583",
                "name": "PatcherAPI",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "PatcherAPI",
        "longname": "PatcherAPI",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                627,
                647
            ],
            "filename": "index.js",
            "lineno": 20,
            "columnno": 6,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001588",
                "name": "DataAPI",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "DataAPI",
        "longname": "DataAPI",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                656,
                674
            ],
            "filename": "index.js",
            "lineno": 21,
            "columnno": 6,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001593",
                "name": "DOMAPI",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "DOMAPI",
        "longname": "DOMAPI",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                683,
                717
            ],
            "filename": "index.js",
            "lineno": 22,
            "columnno": 6,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001598",
                "name": "ContextMenuAPI",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ContextMenuAPI",
        "longname": "ContextMenuAPI",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                871,
                1803
            ],
            "filename": "index.js",
            "lineno": 28,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001602",
                "name": "module.exports",
                "type": "ClassDeclaration"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "class",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * `BdApi` is a globally (`window.BdApi`) accessible object for use by plugins and developers to make their lives easier.\r\n * @name BdApi\r\n */",
        "meta": {
            "filename": "index.js",
            "lineno": 24,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`BdApi` is a globally (`window.BdApi`) accessible object for use by plugins and developers to make their lives easier.",
        "name": "BdApi",
        "longname": "BdApi",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                886,
                1803
            ],
            "filename": "index.js",
            "lineno": 28,
            "columnno": 15,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001603",
                "name": "module.exports",
                "type": "ClassDeclaration",
                "paramnames": [
                    "pluginName"
                ]
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "class",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                905,
                1505
            ],
            "filename": "index.js",
            "lineno": 29,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001606",
                "name": "module.exports",
                "type": "MethodDefinition",
                "paramnames": [
                    "pluginName"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports#module.exports",
        "kind": "class",
        "memberof": "module.exports#module",
        "scope": "static",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1333,
                1371
            ],
            "filename": "index.js",
            "lineno": 41,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001651",
                "name": "this.Patcher",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Patcher",
        "longname": "module.exports#Patcher",
        "kind": "member",
        "memberof": "module.exports",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1382,
                1414
            ],
            "filename": "index.js",
            "lineno": 42,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001659",
                "name": "this.Data",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Data",
        "longname": "module.exports#Data",
        "kind": "member",
        "memberof": "module.exports",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1425,
                1455
            ],
            "filename": "index.js",
            "lineno": 43,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001667",
                "name": "this.DOM",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "DOM",
        "longname": "module.exports#DOM",
        "kind": "member",
        "memberof": "module.exports",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1542,
                1575
            ],
            "filename": "index.js",
            "lineno": 49,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001681",
                "name": "Plugins",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Plugins",
        "longname": "Plugins",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1581,
                1612
            ],
            "filename": "index.js",
            "lineno": 50,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001687",
                "name": "Themes",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Themes",
        "longname": "Themes",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1618,
                1649
            ],
            "filename": "index.js",
            "lineno": 51,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001693",
                "name": "Webpack",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Webpack",
        "longname": "Webpack",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1655,
                1682
            ],
            "filename": "index.js",
            "lineno": 52,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001699",
                "name": "Utils",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Utils",
        "longname": "Utils",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1688,
                1709
            ],
            "filename": "index.js",
            "lineno": 53,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001705",
                "name": "UI",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "UI",
        "longname": "UI",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1715,
                1752
            ],
            "filename": "index.js",
            "lineno": 54,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001711",
                "name": "ReactUtils",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "ReactUtils",
        "longname": "ReactUtils",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1758,
                1800
            ],
            "filename": "index.js",
            "lineno": 55,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001717",
                "name": "ContextMenu",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "ContextMenu",
        "longname": "ContextMenu",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\r\n * An instance of {@link AddonAPI} to access plugins.\r\n * @type AddonAPI\r\n */",
        "meta": {
            "range": [
                1949,
                1974
            ],
            "filename": "index.js",
            "lineno": 65,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001731",
                "name": "BdApi.Plugins",
                "type": "Identifier",
                "value": "PluginAPI",
                "paramnames": []
            }
        },
        "description": "An instance of {@link AddonAPI} to access plugins.",
        "type": {
            "names": [
                "AddonAPI"
            ]
        },
        "name": "Plugins",
        "longname": "BdApi.Plugins",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * An instance of {@link AddonAPI} to access themes.\r\n * @type AddonAPI\r\n */",
        "meta": {
            "range": [
                2062,
                2085
            ],
            "filename": "index.js",
            "lineno": 71,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001737",
                "name": "BdApi.Themes",
                "type": "Identifier",
                "value": "ThemeAPI",
                "paramnames": []
            }
        },
        "description": "An instance of {@link AddonAPI} to access themes.",
        "type": {
            "names": [
                "AddonAPI"
            ]
        },
        "name": "Themes",
        "longname": "BdApi.Themes",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * An instance of {@link Patcher} to monkey patch functions.\r\n * @type Patcher\r\n */",
        "meta": {
            "range": [
                2180,
                2206
            ],
            "filename": "index.js",
            "lineno": 77,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001743",
                "name": "BdApi.Patcher",
                "type": "Identifier",
                "value": "PatcherAPI",
                "paramnames": []
            }
        },
        "description": "An instance of {@link Patcher} to monkey patch functions.",
        "type": {
            "names": [
                "Patcher"
            ]
        },
        "name": "Patcher",
        "longname": "BdApi.Patcher",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * An instance of {@link Webpack} to search for modules.\r\n * @type Webpack\r\n */",
        "meta": {
            "range": [
                2297,
                2320
            ],
            "filename": "index.js",
            "lineno": 83,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001749",
                "name": "BdApi.Webpack",
                "type": "Identifier",
                "value": "Webpack",
                "paramnames": []
            }
        },
        "description": "An instance of {@link Webpack} to search for modules.",
        "type": {
            "names": [
                "Webpack"
            ]
        },
        "name": "Webpack",
        "longname": "BdApi.Webpack",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * An instance of {@link Data} to manage data.\r\n * @type Data\r\n */",
        "meta": {
            "range": [
                2399,
                2419
            ],
            "filename": "index.js",
            "lineno": 89,
            "columnno": 1,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001755",
                "name": "BdApi.Data",
                "type": "Identifier",
                "value": "DataAPI",
                "paramnames": []
            }
        },
        "description": "An instance of {@link Data} to manage data.",
        "type": {
            "names": [
                "Data"
            ]
        },
        "name": "Data",
        "longname": "BdApi.Data",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * An instance of {@link UI} to create interfaces.\r\n * @type UI\r\n */",
        "meta": {
            "range": [
                2499,
                2512
            ],
            "filename": "index.js",
            "lineno": 95,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001761",
                "name": "BdApi.UI",
                "type": "Identifier",
                "value": "UI",
                "paramnames": []
            }
        },
        "description": "An instance of {@link UI} to create interfaces.",
        "type": {
            "names": [
                "UI"
            ]
        },
        "name": "UI",
        "longname": "BdApi.UI",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * An instance of {@link ReactUtils} to work with React.\r\n * @type ReactUtils\r\n */",
        "meta": {
            "range": [
                2606,
                2635
            ],
            "filename": "index.js",
            "lineno": 101,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001767",
                "name": "BdApi.ReactUtils",
                "type": "Identifier",
                "value": "ReactUtils",
                "paramnames": []
            }
        },
        "description": "An instance of {@link ReactUtils} to work with React.",
        "type": {
            "names": [
                "ReactUtils"
            ]
        },
        "name": "ReactUtils",
        "longname": "BdApi.ReactUtils",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * An instance of {@link Utils} for general utility functions.\r\n * @type Utils\r\n */",
        "meta": {
            "range": [
                2730,
                2749
            ],
            "filename": "index.js",
            "lineno": 107,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001773",
                "name": "BdApi.Utils",
                "type": "Identifier",
                "value": "Utils",
                "paramnames": []
            }
        },
        "description": "An instance of {@link Utils} for general utility functions.",
        "type": {
            "names": [
                "Utils"
            ]
        },
        "name": "Utils",
        "longname": "BdApi.Utils",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * An instance of {@link DOM} to interact with the DOM.\r\n * @type DOM\r\n */",
        "meta": {
            "range": [
                2835,
                2853
            ],
            "filename": "index.js",
            "lineno": 113,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001779",
                "name": "BdApi.DOM",
                "type": "Identifier",
                "value": "DOMAPI",
                "paramnames": []
            }
        },
        "description": "An instance of {@link DOM} to interact with the DOM.",
        "type": {
            "names": [
                "DOM"
            ]
        },
        "name": "DOM",
        "longname": "BdApi.DOM",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * An instance of {@link ContextMenu} for interacting with context menus\r\n * @type ContextMenu\r\n */",
        "meta": {
            "range": [
                2964,
                2998
            ],
            "filename": "index.js",
            "lineno": 119,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001785",
                "name": "BdApi.ContextMenu",
                "type": "Identifier",
                "value": "ContextMenuAPI",
                "paramnames": []
            }
        },
        "description": "An instance of {@link ContextMenu} for interacting with context menus",
        "type": {
            "names": [
                "ContextMenu"
            ]
        },
        "name": "ContextMenu",
        "longname": "BdApi.ContextMenu",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/** \r\n * The React module being used inside Discord.\r\n * @type React\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                625,
                653
            ],
            "filename": "legacy.js",
            "lineno": 20,
            "columnno": 6,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001859",
                "name": "React",
                "type": "MemberExpression",
                "value": "DiscordModules.React"
            }
        },
        "description": "The React module being used inside Discord.",
        "type": {
            "names": [
                "React"
            ]
        },
        "memberof": "BdApi",
        "name": "React",
        "longname": "BdApi.React",
        "kind": "constant",
        "scope": "static",
        "params": []
    },
    {
        "comment": "/** \r\n * The ReactDOM module being used inside Discord.\r\n * @type ReactDOM\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                765,
                799
            ],
            "filename": "legacy.js",
            "lineno": 27,
            "columnno": 6,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001865",
                "name": "ReactDOM",
                "type": "MemberExpression",
                "value": "DiscordModules.ReactDOM"
            }
        },
        "description": "The ReactDOM module being used inside Discord.",
        "type": {
            "names": [
                "ReactDOM"
            ]
        },
        "memberof": "BdApi",
        "name": "ReactDOM",
        "longname": "BdApi.ReactDOM",
        "kind": "constant",
        "scope": "static",
        "params": []
    },
    {
        "comment": "/** \r\n * A reference object to get BD's settings.\r\n * @type object\r\n * @deprecated\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                919,
                950
            ],
            "filename": "legacy.js",
            "lineno": 35,
            "columnno": 6,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001871",
                "name": "settings",
                "type": "MemberExpression",
                "value": "Settings.collections"
            }
        },
        "description": "A reference object to get BD's settings.",
        "type": {
            "names": [
                "object"
            ]
        },
        "deprecated": true,
        "memberof": "BdApi",
        "name": "settings",
        "longname": "BdApi.settings",
        "kind": "constant",
        "scope": "static",
        "params": []
    },
    {
        "comment": "/** \r\n * A reference object for BD's emotes.\r\n * @type object\r\n * @deprecated\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                1065,
                1694
            ],
            "filename": "legacy.js",
            "lineno": 43,
            "columnno": 6,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001877",
                "name": "emotes",
                "type": "NewExpression",
                "value": ""
            }
        },
        "description": "A reference object for BD's emotes.",
        "type": {
            "names": [
                "object"
            ]
        },
        "deprecated": true,
        "memberof": "BdApi",
        "name": "emotes",
        "longname": "BdApi.emotes",
        "kind": "constant",
        "scope": "static",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1106,
                1541
            ],
            "filename": "legacy.js",
            "lineno": 44,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001885",
                "name": "get",
                "type": "FunctionExpression"
            },
            "vars": {
                "group": "get~group",
                "": null
            }
        },
        "undocumented": true,
        "name": "get",
        "longname": "get",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1206,
                1237
            ],
            "filename": "legacy.js",
            "lineno": 46,
            "columnno": 14,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001899",
                "name": "group",
                "type": "MemberExpression",
                "value": "Emotes.Emotes[undefined]"
            }
        },
        "undocumented": true,
        "name": "group",
        "longname": "get~group",
        "kind": "constant",
        "memberof": "get",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1326,
                1364
            ],
            "filename": "legacy.js",
            "lineno": 49,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001916",
                "name": "get",
                "type": "FunctionExpression"
            }
        },
        "undocumented": true,
        "name": "get",
        "longname": "get",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1379,
                1521
            ],
            "filename": "legacy.js",
            "lineno": 50,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001925",
                "name": "set",
                "type": "FunctionExpression"
            }
        },
        "undocumented": true,
        "name": "set",
        "longname": "set",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1548,
                1690
            ],
            "filename": "legacy.js",
            "lineno": 53,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001935",
                "name": "set",
                "type": "FunctionExpression"
            }
        },
        "undocumented": true,
        "name": "set",
        "longname": "set",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "/** \r\n * A reference string for BD's version.\r\n * @type string\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                1794,
                1818
            ],
            "filename": "legacy.js",
            "lineno": 61,
            "columnno": 6,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001946",
                "name": "version",
                "type": "MemberExpression",
                "value": "Config.version"
            }
        },
        "description": "A reference string for BD's version.",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "BdApi",
        "name": "version",
        "longname": "BdApi.version",
        "kind": "constant",
        "scope": "static",
        "params": []
    },
    {
        "comment": "/**\r\n * Adds a `<style>` to the document with the given ID.\r\n * \r\n * @deprecated\r\n * @param {string} id ID to use for style element\r\n * @param {string} css CSS to apply to the document\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                2036,
                2106
            ],
            "filename": "legacy.js",
            "lineno": 72,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001951",
                "name": "injectCSS",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "id",
                    "css"
                ]
            }
        },
        "description": "Adds a `<style>` to the document with the given ID.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "ID to use for style element",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "CSS to apply to the document",
                "name": "css"
            }
        ],
        "memberof": "BdApi",
        "name": "injectCSS",
        "longname": "BdApi.injectCSS",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Removes a `<style>` from the document corresponding to the given ID.\r\n * \r\n * @deprecated\r\n * @param {string} id ID uses for the style element\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                2287,
                2346
            ],
            "filename": "legacy.js",
            "lineno": 83,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001963",
                "name": "clearCSS",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "id"
                ]
            }
        },
        "description": "Removes a `<style>` from the document corresponding to the given ID.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "ID uses for the style element",
                "name": "id"
            }
        ],
        "memberof": "BdApi",
        "name": "clearCSS",
        "longname": "BdApi.clearCSS",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Automatically creates and links a remote JS script.\r\n * \r\n * @deprecated\r\n * @param {string} id ID of the script element\r\n * @param {string} url URL of the remote script\r\n * @returns {Promise} Resolves upon onload event\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                2604,
                2679
            ],
            "filename": "legacy.js",
            "lineno": 96,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001973",
                "name": "linkJS",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "id",
                    "url"
                ]
            }
        },
        "description": "Automatically creates and links a remote JS script.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "ID of the script element",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of the remote script",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "Resolves upon onload event"
            }
        ],
        "memberof": "BdApi",
        "name": "linkJS",
        "longname": "BdApi.linkJS",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Removes a remotely linked JS script.\r\n * \r\n * @deprecated\r\n * @param {string} id ID of the script element\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                2823,
                2883
            ],
            "filename": "legacy.js",
            "lineno": 107,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001985",
                "name": "unlinkJS",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "id"
                ]
            }
        },
        "description": "Removes a remotely linked JS script.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "ID of the script element",
                "name": "id"
            }
        ],
        "memberof": "BdApi",
        "name": "unlinkJS",
        "longname": "BdApi.unlinkJS",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Shows a generic but very customizable modal.\r\n * \r\n * @deprecated\r\n * @param {string} title title of the modal\r\n * @param {(string|ReactElement|Array<string|ReactElement>)} content a string of text to display in the modal\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                3143,
                3213
            ],
            "filename": "legacy.js",
            "lineno": 119,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001995",
                "name": "alert",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "title",
                    "content"
                ]
            }
        },
        "description": "Shows a generic but very customizable modal.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "title of the modal",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "ReactElement",
                        "Array.<(string|ReactElement)>"
                    ]
                },
                "description": "a string of text to display in the modal",
                "name": "content"
            }
        ],
        "memberof": "BdApi",
        "name": "alert",
        "longname": "BdApi.alert",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Shows a generic but very customizable confirmation modal with optional confirm and cancel callbacks.\r\n * \r\n * @deprecated\r\n * @param {string} title title of the modal\r\n * @param {(string|ReactElement|Array<string|ReactElement>)} children a single or mixed array of react elements and strings. Everything is wrapped in Discord's `TextElement` component so strings will show and render properly.\r\n * @param {object} [options] options to modify the modal\r\n * @param {boolean} [options.danger=false] whether the main button should be red or not\r\n * @param {string} [options.confirmText=Okay] text for the confirmation/submit button\r\n * @param {string} [options.cancelText=Cancel] text for the cancel button\r\n * @param {callable} [options.onConfirm=NOOP] callback to occur when clicking the submit button\r\n * @param {callable} [options.onCancel=NOOP] callback to occur when clicking the cancel button\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                4147,
                4279
            ],
            "filename": "legacy.js",
            "lineno": 137,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002007",
                "name": "showConfirmationModal",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "title",
                    "content",
                    "options"
                ]
            }
        },
        "description": "Shows a generic but very customizable confirmation modal with optional confirm and cancel callbacks.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "title of the modal",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "ReactElement",
                        "Array.<(string|ReactElement)>"
                    ]
                },
                "description": "a single or mixed array of react elements and strings. Everything is wrapped in Discord's `TextElement` component so strings will show and render properly.",
                "name": "children"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "options to modify the modal",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "whether the main button should be red or not",
                "name": "options.danger"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "Okay",
                "description": "text for the confirmation/submit button",
                "name": "options.confirmText"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "Cancel",
                "description": "text for the cancel button",
                "name": "options.cancelText"
            },
            {
                "type": {
                    "names": [
                        "callable"
                    ]
                },
                "optional": true,
                "defaultvalue": "NOOP",
                "description": "callback to occur when clicking the submit button",
                "name": "options.onConfirm"
            },
            {
                "type": {
                    "names": [
                        "callable"
                    ]
                },
                "optional": true,
                "defaultvalue": "NOOP",
                "description": "callback to occur when clicking the cancel button",
                "name": "options.onCancel"
            }
        ],
        "memberof": "BdApi",
        "name": "showConfirmationModal",
        "longname": "BdApi.showConfirmationModal",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Shows a toast similar to android towards the bottom of the screen.\r\n *\r\n * @deprecated\r\n * @param {string} content The string to show in the toast.\r\n * @param {object} options Options object. Optional parameter.\r\n * @param {string} [options.type=\"\"] Changes the type of the toast stylistically and semantically. Choices: \"\", \"info\", \"success\", \"danger\"/\"error\", \"warning\"/\"warn\". Default: \"\"\r\n * @param {boolean} [options.icon=true] Determines whether the icon should show corresponding to the type. A toast without type will always have no icon. Default: `true`\r\n * @param {number} [options.timeout=3000] Adjusts the time (in ms) the toast should be shown for before disappearing automatically. Default: `3000`\r\n * @param {boolean} [options.forceShow=false] Whether to force showing the toast and ignore the bd setting\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                5137,
                5219
            ],
            "filename": "legacy.js",
            "lineno": 153,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002023",
                "name": "showToast",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "content",
                    "options"
                ]
            }
        },
        "description": "Shows a toast similar to android towards the bottom of the screen.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The string to show in the toast.",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Options object. Optional parameter.",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "Changes the type of the toast stylistically and semantically. Choices: \"\", \"info\", \"success\", \"danger\"/\"error\", \"warning\"/\"warn\". Default: \"\"",
                "name": "options.type"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Determines whether the icon should show corresponding to the type. A toast without type will always have no icon. Default: `true`",
                "name": "options.icon"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 3000,
                "description": "Adjusts the time (in ms) the toast should be shown for before disappearing automatically. Default: `3000`",
                "name": "options.timeout"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to force showing the toast and ignore the bd setting",
                "name": "options.forceShow"
            }
        ],
        "memberof": "BdApi",
        "name": "showToast",
        "longname": "BdApi.showToast",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Shows a notice above Discord's chat layer.\r\n * \r\n * @deprecated\r\n * @param {string|Node} content Content of the notice\r\n * @param {object} options Options for the notice.\r\n * @param {string} [options.type=\"info\" | \"error\" | \"warning\" | \"success\"] Type for the notice. Will affect the color.\r\n * @param {Array<{label: string, onClick: function}>} [options.buttons] Buttons that should be added next to the notice text.\r\n * @param {number} [options.timeout=10000] Timeout until the notice is closed. Won't fire if it's set to 0;\r\n * @returns {function} A callback for closing the notice. Passing `true` as first parameter closes immediately without transitioning out.\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                5924,
                6015
            ],
            "filename": "legacy.js",
            "lineno": 169,
            "columnno": 1,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002037",
                "name": "showNotice",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "content",
                    "options"
                ]
            }
        },
        "description": "Shows a notice above Discord's chat layer.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "Node"
                    ]
                },
                "description": "Content of the notice",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Options for the notice.",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"info\" | \"error\" | \"warning\" | \"success\"",
                "description": "Type for the notice. Will affect the color.",
                "name": "options.type"
            },
            {
                "type": {
                    "names": [
                        "Array.<{label: string, onClick: function()}>"
                    ]
                },
                "optional": true,
                "description": "Buttons that should be added next to the notice text.",
                "name": "options.buttons"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 10000,
                "description": "Timeout until the notice is closed. Won't fire if it's set to 0;",
                "name": "options.timeout"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A callback for closing the notice. Passing `true` as first parameter closes immediately without transitioning out."
            }
        ],
        "memberof": "BdApi",
        "name": "showNotice",
        "longname": "BdApi.showNotice",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Finds a webpack module using a filter\r\n * \r\n * @deprecated\r\n * @param {function} filter A filter given the exports, module, and moduleId. Returns `true` if the module matches.\r\n * @returns {any} Either the matching module or `undefined`\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                6290,
                6368
            ],
            "filename": "legacy.js",
            "lineno": 181,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002051",
                "name": "findModule",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "filter"
                ]
            }
        },
        "description": "Finds a webpack module using a filter",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A filter given the exports, module, and moduleId. Returns `true` if the module matches.",
                "name": "filter"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "Either the matching module or `undefined`"
            }
        ],
        "memberof": "BdApi",
        "name": "findModule",
        "longname": "BdApi.findModule",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Finds multiple webpack modules using a filter\r\n * \r\n * @deprecated\r\n * @param {function} filter A filter given the exports, module, and moduleId. Returns `true` if the module matches.\r\n * @returns {Array} Either an array of matching modules or an empty array\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                6665,
                6763
            ],
            "filename": "legacy.js",
            "lineno": 193,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002061",
                "name": "findAllModules",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "filter"
                ]
            }
        },
        "description": "Finds multiple webpack modules using a filter",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A filter given the exports, module, and moduleId. Returns `true` if the module matches.",
                "name": "filter"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "Either an array of matching modules or an empty array"
            }
        ],
        "memberof": "BdApi",
        "name": "findAllModules",
        "longname": "BdApi.findAllModules",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6745,
                6757
            ],
            "filename": "legacy.js",
            "lineno": 194,
            "columnno": 45,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002072",
                "name": "first",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "first",
        "longname": "first",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\r\n * Finds a webpack module by own properties.\r\n * \r\n * @deprecated\r\n * @param {...string} props Any desired properties\r\n * @returns {any} Either the matching module or `undefined`\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                6977,
                7067
            ],
            "filename": "legacy.js",
            "lineno": 205,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002074",
                "name": "findModuleByProps",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "props"
                ]
            }
        },
        "description": "Finds a webpack module by own properties.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "variable": true,
                "description": "Any desired properties",
                "name": "props"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "Either the matching module or `undefined`"
            }
        ],
        "memberof": "BdApi",
        "name": "findModuleByProps",
        "longname": "BdApi.findModuleByProps",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Finds a webpack module by own prototypes.\r\n * \r\n * @deprecated\r\n * @param {...string} protos Any desired prototype properties\r\n * @returns {any} Either the matching module or `undefined`\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                7294,
                7396
            ],
            "filename": "legacy.js",
            "lineno": 218,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002086",
                "name": "findModuleByPrototypes",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "protos"
                ]
            }
        },
        "description": "Finds a webpack module by own prototypes.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "variable": true,
                "description": "Any desired prototype properties",
                "name": "protos"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "Either the matching module or `undefined`"
            }
        ],
        "memberof": "BdApi",
        "name": "findModuleByPrototypes",
        "longname": "BdApi.findModuleByPrototypes",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Finds a webpack module by `displayName` property\r\n * \r\n * @deprecated\r\n * @param {string} name Desired `displayName` property\r\n * @returns {any} Either the matching module or `undefined`\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                7621,
                7715
            ],
            "filename": "legacy.js",
            "lineno": 230,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002098",
                "name": "findModuleByDisplayName",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "name"
                ]
            }
        },
        "description": "Finds a webpack module by `displayName` property",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Desired `displayName` property",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "Either the matching module or `undefined`"
            }
        ],
        "memberof": "BdApi",
        "name": "findModuleByDisplayName",
        "longname": "BdApi.findModuleByDisplayName",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Get the internal react data of a specified node.\r\n * \r\n * @deprecated\r\n * @param {HTMLElement} node Node to get the react data from\r\n * @returns {object|undefined} Either the found data or `undefined` \r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                7955,
                8204
            ],
            "filename": "legacy.js",
            "lineno": 242,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002108",
                "name": "getInternalInstance",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "node"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Get the internal react data of a specified node.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "description": "Node to get the react data from",
                "name": "node"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object",
                        "undefined"
                    ]
                },
                "description": "Either the found data or `undefined`"
            }
        ],
        "memberof": "BdApi",
        "name": "getInternalInstance",
        "longname": "BdApi.getInternalInstance",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Loads previously stored data.\r\n * \r\n * @deprecated\r\n * @param {string} pluginName Name of the plugin loading data\r\n * @param {string} key Which piece of data to load\r\n * @returns {any} The stored data\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                8443,
                8536
            ],
            "filename": "legacy.js",
            "lineno": 256,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002146",
                "name": "loadData",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "pluginName",
                    "key"
                ]
            }
        },
        "description": "Loads previously stored data.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the plugin loading data",
                "name": "pluginName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Which piece of data to load",
                "name": "key"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "The stored data"
            }
        ],
        "memberof": "BdApi",
        "name": "loadData",
        "longname": "BdApi.loadData",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Saves JSON-serializable data.\r\n * \r\n * @deprecated\r\n * @param {string} pluginName Name of the plugin saving data\r\n * @param {string} key Which piece of data to store\r\n * @param {any} data The data to be saved\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                8783,
                8888
            ],
            "filename": "legacy.js",
            "lineno": 269,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002158",
                "name": "saveData",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "pluginName",
                    "key",
                    "data"
                ]
            }
        },
        "description": "Saves JSON-serializable data.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the plugin saving data",
                "name": "pluginName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Which piece of data to store",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "The data to be saved",
                "name": "data"
            }
        ],
        "memberof": "BdApi",
        "name": "saveData",
        "longname": "BdApi.saveData",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Deletes a piece of stored data, this is different than saving as null or undefined.\r\n * \r\n * @deprecated\r\n * @param {string} pluginName Name of the plugin deleting data\r\n * @param {string} key Which piece of data to delete\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                9149,
                9240
            ],
            "filename": "legacy.js",
            "lineno": 281,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002172",
                "name": "deleteData",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "pluginName",
                    "key"
                ]
            }
        },
        "description": "Deletes a piece of stored data, this is different than saving as null or undefined.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the plugin deleting data",
                "name": "pluginName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Which piece of data to delete",
                "name": "key"
            }
        ],
        "memberof": "BdApi",
        "name": "deleteData",
        "longname": "BdApi.deleteData",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Monkey-patches a method on an object. The patching callback may be run before, after or instead of target method.\r\n * \r\n *  - Be careful when monkey-patching. Think not only about original functionality of target method and your changes, but also about developers of other plugins, who may also patch this method before or after you. Try to change target method behaviour as little as possible, and avoid changing method signatures.\r\n *  - Display name of patched method is changed, so you can see if a function has been patched (and how many times) while debugging or in the stack trace. Also, patched methods have property `__monkeyPatched` set to `true`, in case you want to check something programmatically.\r\n * \r\n * @deprecated\r\n * @param {object} what Object to be patched. You can can also pass class prototypes to patch all class instances.\r\n * @param {string} methodName Name of the function to be patched.\r\n * @param {object} options Options object to configure the patch.\r\n * @param {function} [options.after] Callback that will be called after original target method call. You can modify return value here, so it will be passed to external code which calls target method. Can be combined with `before`.\r\n * @param {function} [options.before] Callback that will be called before original target method call. You can modify arguments here, so it will be passed to original method. Can be combined with `after`.\r\n * @param {function} [options.instead] Callback that will be called instead of original target method call. You can get access to original method using `originalMethod` parameter if you want to call it, but you do not have to. Can't be combined with `before` or `after`.\r\n * @param {boolean} [options.once=false] Set to `true` if you want to automatically unpatch method after first call.\r\n * @param {boolean} [options.silent=false] Set to `true` if you want to suppress log messages about patching and unpatching.\r\n * @returns {function} A function that cancels the monkey patch\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                11280,
                12404
            ],
            "filename": "legacy.js",
            "lineno": 303,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002184",
                "name": "monkeyPatch",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "what",
                    "methodName",
                    "options"
                ]
            },
            "vars": {
                "undefined": null,
                "patchType": "BdApi.monkeyPatch~patchType",
                "originalMethod": "BdApi.monkeyPatch~originalMethod",
                "data": "BdApi.monkeyPatch~data",
                "": null,
                "data.cancelPatch": "BdApi.monkeyPatch~data.cancelPatch"
            }
        },
        "description": "Monkey-patches a method on an object. The patching callback may be run before, after or instead of target method.\r\r - Be careful when monkey-patching. Think not only about original functionality of target method and your changes, but also about developers of other plugins, who may also patch this method before or after you. Try to change target method behaviour as little as possible, and avoid changing method signatures.\r - Display name of patched method is changed, so you can see if a function has been patched (and how many times) while debugging or in the stack trace. Also, patched methods have property `__monkeyPatched` set to `true`, in case you want to check something programmatically.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object to be patched. You can can also pass class prototypes to patch all class instances.",
                "name": "what"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the function to be patched.",
                "name": "methodName"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Options object to configure the patch.",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "Callback that will be called after original target method call. You can modify return value here, so it will be passed to external code which calls target method. Can be combined with `before`.",
                "name": "options.after"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "Callback that will be called before original target method call. You can modify arguments here, so it will be passed to original method. Can be combined with `after`.",
                "name": "options.before"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "Callback that will be called instead of original target method call. You can get access to original method using `originalMethod` parameter if you want to call it, but you do not have to. Can't be combined with `before` or `after`.",
                "name": "options.instead"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Set to `true` if you want to automatically unpatch method after first call.",
                "name": "options.once"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Set to `true` if you want to suppress log messages about patching and unpatching.",
                "name": "options.silent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function that cancels the monkey patch"
            }
        ],
        "memberof": "BdApi",
        "name": "monkeyPatch",
        "longname": "BdApi.monkeyPatch",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11342,
                11348
            ],
            "filename": "legacy.js",
            "lineno": 304,
            "columnno": 11,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002193",
                "name": "before",
                "type": "Identifier",
                "value": "before"
            }
        },
        "undocumented": true,
        "name": "before",
        "longname": "before",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11350,
                11355
            ],
            "filename": "legacy.js",
            "lineno": 304,
            "columnno": 19,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002195",
                "name": "after",
                "type": "Identifier",
                "value": "after"
            }
        },
        "undocumented": true,
        "name": "after",
        "longname": "after",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11357,
                11364
            ],
            "filename": "legacy.js",
            "lineno": 304,
            "columnno": 26,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002197",
                "name": "instead",
                "type": "Identifier",
                "value": "instead"
            }
        },
        "undocumented": true,
        "name": "instead",
        "longname": "instead",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11366,
                11378
            ],
            "filename": "legacy.js",
            "lineno": 304,
            "columnno": 35,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002199",
                "name": "once",
                "type": "AssignmentPattern",
                "value": "once"
            }
        },
        "undocumented": true,
        "name": "once",
        "longname": "once",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11380,
                11398
            ],
            "filename": "legacy.js",
            "lineno": 304,
            "columnno": 49,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002203",
                "name": "callerId",
                "type": "AssignmentPattern",
                "value": "callerId"
            }
        },
        "undocumented": true,
        "name": "callerId",
        "longname": "callerId",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11422,
                11496
            ],
            "filename": "legacy.js",
            "lineno": 305,
            "columnno": 10,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002209",
                "name": "patchType",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "patchType",
        "longname": "BdApi.monkeyPatch~patchType",
        "kind": "constant",
        "memberof": "BdApi.monkeyPatch",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11605,
                11638
            ],
            "filename": "legacy.js",
            "lineno": 307,
            "columnno": 10,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002232",
                "name": "originalMethod",
                "type": "MemberExpression",
                "value": "what[undefined]"
            }
        },
        "undocumented": true,
        "name": "originalMethod",
        "longname": "BdApi.monkeyPatch~originalMethod",
        "kind": "constant",
        "memberof": "BdApi.monkeyPatch",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11651,
                11807
            ],
            "filename": "legacy.js",
            "lineno": 308,
            "columnno": 10,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002238",
                "name": "data",
                "type": "ObjectExpression",
                "value": "{\"originalMethod\":\"\",\"callOriginalMethod\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "BdApi.monkeyPatch~data",
        "kind": "constant",
        "memberof": "BdApi.monkeyPatch",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11669,
                11699
            ],
            "filename": "legacy.js",
            "lineno": 309,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002241",
                "name": "originalMethod",
                "type": "Identifier",
                "value": "originalMethod"
            }
        },
        "undocumented": true,
        "name": "originalMethod",
        "longname": "BdApi.monkeyPatch~data.originalMethod",
        "kind": "member",
        "memberof": "BdApi.monkeyPatch~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11710,
                11800
            ],
            "filename": "legacy.js",
            "lineno": 310,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002243",
                "name": "callOriginalMethod",
                "type": "ArrowFunctionExpression"
            }
        },
        "undocumented": true,
        "name": "callOriginalMethod",
        "longname": "BdApi.monkeyPatch~data.callOriginalMethod",
        "kind": "function",
        "memberof": "BdApi.monkeyPatch~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11814,
                12370
            ],
            "filename": "legacy.js",
            "lineno": 312,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002258",
                "name": "data.cancelPatch",
                "type": "CallExpression",
                "funcscope": "BdApi.monkeyPatch",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cancelPatch",
        "longname": "BdApi.monkeyPatch~data.cancelPatch",
        "kind": "member",
        "memberof": "BdApi.monkeyPatch~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11926,
                11954
            ],
            "filename": "legacy.js",
            "lineno": 313,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002275",
                "name": "data.thisObject",
                "type": "Identifier",
                "funcscope": "BdApi.monkeyPatch",
                "value": "thisObject",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "thisObject",
        "longname": "BdApi.monkeyPatch~data.thisObject",
        "kind": "member",
        "memberof": "BdApi.monkeyPatch~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11965,
                11992
            ],
            "filename": "legacy.js",
            "lineno": 314,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002281",
                "name": "data.methodArguments",
                "type": "Identifier",
                "funcscope": "BdApi.monkeyPatch",
                "value": "args",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "methodArguments",
        "longname": "BdApi.monkeyPatch~data.methodArguments",
        "kind": "member",
        "memberof": "BdApi.monkeyPatch~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12003,
                12033
            ],
            "filename": "legacy.js",
            "lineno": 315,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002287",
                "name": "data.returnValue",
                "type": "Identifier",
                "funcscope": "BdApi.monkeyPatch",
                "value": "returnValue",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "returnValue",
        "longname": "BdApi.monkeyPatch~data.returnValue",
        "kind": "member",
        "memberof": "BdApi.monkeyPatch~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12069,
                12130
            ],
            "filename": "legacy.js",
            "lineno": 317,
            "columnno": 18,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002295",
                "name": "patchReturn",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "patchReturn",
        "longname": "<anonymous>~patchReturn",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\r\n * Adds a listener for when the node is removed from the document body.\r\n * \r\n * @deprecated\r\n * @param {HTMLElement} node Node to be observed\r\n * @param {function} callback Function to run when fired\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                12640,
                12729
            ],
            "filename": "legacy.js",
            "lineno": 336,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002337",
                "name": "onRemoved",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "node",
                    "callback"
                ]
            }
        },
        "description": "Adds a listener for when the node is removed from the document body.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "description": "Node to be observed",
                "name": "node"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function to run when fired",
                "name": "callback"
            }
        ],
        "memberof": "BdApi",
        "name": "onRemoved",
        "longname": "BdApi.onRemoved",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Wraps a given function in a `try..catch` block.\r\n * \r\n * @deprecated\r\n * @param {function} method Function to wrap\r\n * @param {string} message Additional messasge to print when an error occurs\r\n * @returns {function} The new wrapped function\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                13009,
                13226
            ],
            "filename": "legacy.js",
            "lineno": 349,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002349",
                "name": "suppressErrors",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "method",
                    "message"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Wraps a given function in a `try..catch` block.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function to wrap",
                "name": "method"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Additional messasge to print when an error occurs",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The new wrapped function"
            }
        ],
        "memberof": "BdApi",
        "name": "suppressErrors",
        "longname": "BdApi.suppressErrors",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Tests a given object to determine if it is valid JSON.\r\n * \r\n * @deprecated\r\n * @param {object} data Data to be tested\r\n * @returns {boolean} Result of the test\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                13425,
                13554
            ],
            "filename": "legacy.js",
            "lineno": 364,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002377",
                "name": "testJSON",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "data"
                ]
            }
        },
        "description": "Tests a given object to determine if it is valid JSON.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Data to be tested",
                "name": "data"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Result of the test"
            }
        ],
        "memberof": "BdApi",
        "name": "testJSON",
        "longname": "BdApi.testJSON",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Gets a specific setting's status from BD.\r\n * \r\n * @deprecated\r\n * @param {string} [collection=\"settings\"] Collection ID\r\n * @param {string} category Category ID in the collection\r\n * @param {string} id Setting ID in the category\r\n * @returns {boolean} If the setting is enabled\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                13871,
                13979
            ],
            "filename": "legacy.js",
            "lineno": 383,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002392",
                "name": "isSettingEnabled",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "collection",
                    "category",
                    "id"
                ]
            }
        },
        "description": "Gets a specific setting's status from BD.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"settings\"",
                "description": "Collection ID",
                "name": "collection"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Category ID in the collection",
                "name": "category"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Setting ID in the category",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If the setting is enabled"
            }
        ],
        "memberof": "BdApi",
        "name": "isSettingEnabled",
        "longname": "BdApi.isSettingEnabled",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Enables a BetterDiscord setting by ids.\r\n * \r\n * @deprecated\r\n * @param {string} [collection=\"settings\"] Collection ID\r\n * @param {string} category Category ID in the collection\r\n * @param {string} id Setting ID in the category\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                14245,
                14356
            ],
            "filename": "legacy.js",
            "lineno": 396,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002406",
                "name": "enableSetting",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "collection",
                    "category",
                    "id"
                ]
            }
        },
        "description": "Enables a BetterDiscord setting by ids.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"settings\"",
                "description": "Collection ID",
                "name": "collection"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Category ID in the collection",
                "name": "category"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Setting ID in the category",
                "name": "id"
            }
        ],
        "memberof": "BdApi",
        "name": "enableSetting",
        "longname": "BdApi.enableSetting",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Disables a BetterDiscord setting by ids.\r\n * \r\n * @deprecated\r\n * @param {string} [collection=\"settings\"] Collection ID\r\n * @param {string} category Category ID in the collection\r\n * @param {string} id Setting ID in the category\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                14623,
                14736
            ],
            "filename": "legacy.js",
            "lineno": 409,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002421",
                "name": "disableSetting",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "collection",
                    "category",
                    "id"
                ]
            }
        },
        "description": "Disables a BetterDiscord setting by ids.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"settings\"",
                "description": "Collection ID",
                "name": "collection"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Category ID in the collection",
                "name": "category"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Setting ID in the category",
                "name": "id"
            }
        ],
        "memberof": "BdApi",
        "name": "disableSetting",
        "longname": "BdApi.disableSetting",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Toggles a BetterDiscord setting by ids.\r\n * \r\n * @deprecated\r\n * @param {string} [collection=\"settings\"] Collection ID\r\n * @param {string} category Category ID in the collection\r\n * @param {string} id Setting ID in the category\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                15002,
                15148
            ],
            "filename": "legacy.js",
            "lineno": 422,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002436",
                "name": "toggleSetting",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "collection",
                    "category",
                    "id"
                ]
            }
        },
        "description": "Toggles a BetterDiscord setting by ids.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"settings\"",
                "description": "Collection ID",
                "name": "collection"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Category ID in the collection",
                "name": "category"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Setting ID in the category",
                "name": "id"
            }
        ],
        "memberof": "BdApi",
        "name": "toggleSetting",
        "longname": "BdApi.toggleSetting",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Gets some data in BetterDiscord's misc data.\r\n * \r\n * @deprecated\r\n * @param {string} key Key of the data to load.\r\n * @returns {any} The stored data\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                15336,
                15402
            ],
            "filename": "legacy.js",
            "lineno": 434,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002458",
                "name": "getBDData",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "key"
                ]
            }
        },
        "description": "Gets some data in BetterDiscord's misc data.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Key of the data to load.",
                "name": "key"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "The stored data"
            }
        ],
        "memberof": "BdApi",
        "name": "getBDData",
        "longname": "BdApi.getBDData",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Sets some data in BetterDiscord's misc data.\r\n * \r\n * @deprecated\r\n * @param {string} key Key of the data to store.\r\n * @returns {any} The stored data\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                15591,
                15669
            ],
            "filename": "legacy.js",
            "lineno": 446,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002468",
                "name": "setBDData",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "key",
                    "data"
                ]
            }
        },
        "description": "Sets some data in BetterDiscord's misc data.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Key of the data to store.",
                "name": "key"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "The stored data"
            }
        ],
        "memberof": "BdApi",
        "name": "setBDData",
        "longname": "BdApi.setBDData",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Gives access to the [Electron Dialog](https://www.electronjs.org/docs/latest/api/dialog/) api. \r\n * Returns a `Promise` that resolves to an `object` that has a `boolean` cancelled and a `filePath` string for saving and a `filePaths` string array for opening.\r\n * \r\n * @deprecated\r\n * @param {object} options Options object to configure the dialog.\r\n * @param {\"open\"|\"save\"} [options.mode=\"open\"] Determines whether the dialog should open or save files.\r\n * @param {string} [options.defaultPath=~] Path the dialog should show on launch.\r\n * @param {Array<object<string, string[]>>} [options.filters=[]] An array of [file filters](https://www.electronjs.org/docs/latest/api/structures/file-filter).\r\n * @param {string} [options.title] Title for the titlebar.\r\n * @param {string} [options.message] Message for the dialog.\r\n * @param {boolean} [options.showOverwriteConfirmation=false] Whether the user should be prompted when overwriting a file.\r\n * @param {boolean} [options.showHiddenFiles=false] Whether hidden files should be shown in the dialog.\r\n * @param {boolean} [options.promptToCreate=false] Whether the user should be prompted to create non-existant folders.\r\n * @param {boolean} [options.openDirectory=false] Whether the user should be able to select a directory as a target.\r\n * @param {boolean} [options.openFile=true] Whether the user should be able to select a file as a target.\r\n * @param {boolean} [options.multiSelections=false] Whether the user should be able to select multiple targets.\r\n * @param {boolean} [options.modal=false] Whether the dialog should act as a modal to the main window.\r\n * @returns {Promise<object>} Result of the dialog\r\n * @memberof BdApi\r\n */",
        "meta": {
            "range": [
                17370,
                17528
            ],
            "filename": "legacy.js",
            "lineno": 471,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002480",
                "name": "openDialog",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "data": "BdApi.openDialog~data"
            }
        },
        "description": "Gives access to the [Electron Dialog](https://www.electronjs.org/docs/latest/api/dialog/) api. \rReturns a `Promise` that resolves to an `object` that has a `boolean` cancelled and a `filePath` string for saving and a `filePaths` string array for opening.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Options object to configure the dialog.",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "\"open\"",
                        "\"save\""
                    ]
                },
                "optional": true,
                "defaultvalue": "\"open\"",
                "description": "Determines whether the dialog should open or save files.",
                "name": "options.mode"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "~",
                "description": "Path the dialog should show on launch.",
                "name": "options.defaultPath"
            },
            {
                "type": {
                    "names": [
                        "Array.<object.<string, Array.<string>>>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "An array of [file filters](https://www.electronjs.org/docs/latest/api/structures/file-filter).",
                "name": "options.filters"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Title for the titlebar.",
                "name": "options.title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Message for the dialog.",
                "name": "options.message"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the user should be prompted when overwriting a file.",
                "name": "options.showOverwriteConfirmation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether hidden files should be shown in the dialog.",
                "name": "options.showHiddenFiles"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the user should be prompted to create non-existant folders.",
                "name": "options.promptToCreate"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the user should be able to select a directory as a target.",
                "name": "options.openDirectory"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether the user should be able to select a file as a target.",
                "name": "options.openFile"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the user should be able to select multiple targets.",
                "name": "options.multiSelections"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the dialog should act as a modal to the main window.",
                "name": "options.modal"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<object>"
                    ]
                },
                "description": "Result of the dialog"
            }
        ],
        "memberof": "BdApi",
        "name": "openDialog",
        "longname": "BdApi.openDialog",
        "kind": "function",
        "scope": "static",
        "async": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17418,
                17454
            ],
            "filename": "legacy.js",
            "lineno": 472,
            "columnno": 10,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002485",
                "name": "data",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "BdApi.openDialog~data",
        "kind": "constant",
        "memberof": "BdApi.openDialog",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17546,
                17551
            ],
            "filename": "legacy.js",
            "lineno": 479,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002506",
                "name": "exports.React",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "React",
        "longname": "React",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17558,
                17566
            ],
            "filename": "legacy.js",
            "lineno": 480,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002509",
                "name": "exports.ReactDOM",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "ReactDOM",
        "longname": "ReactDOM",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17573,
                17581
            ],
            "filename": "legacy.js",
            "lineno": 481,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002512",
                "name": "exports.settings",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "settings",
        "longname": "settings",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17588,
                17594
            ],
            "filename": "legacy.js",
            "lineno": 482,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002515",
                "name": "exports.emotes",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "emotes",
        "longname": "emotes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17601,
                17608
            ],
            "filename": "legacy.js",
            "lineno": 483,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002518",
                "name": "exports.version",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "version",
        "longname": "version",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17615,
                17624
            ],
            "filename": "legacy.js",
            "lineno": 484,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002521",
                "name": "exports.injectCSS",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "injectCSS",
        "longname": "injectCSS",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17631,
                17639
            ],
            "filename": "legacy.js",
            "lineno": 485,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002524",
                "name": "exports.clearCSS",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "clearCSS",
        "longname": "clearCSS",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17646,
                17652
            ],
            "filename": "legacy.js",
            "lineno": 486,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002527",
                "name": "exports.linkJS",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "linkJS",
        "longname": "linkJS",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17659,
                17667
            ],
            "filename": "legacy.js",
            "lineno": 487,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002530",
                "name": "exports.unlinkJS",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "unlinkJS",
        "longname": "unlinkJS",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17674,
                17679
            ],
            "filename": "legacy.js",
            "lineno": 488,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002533",
                "name": "exports.alert",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "alert",
        "longname": "alert",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17686,
                17707
            ],
            "filename": "legacy.js",
            "lineno": 489,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002536",
                "name": "exports.showConfirmationModal",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "showConfirmationModal",
        "longname": "showConfirmationModal",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17714,
                17723
            ],
            "filename": "legacy.js",
            "lineno": 490,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002539",
                "name": "exports.showToast",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "showToast",
        "longname": "showToast",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17730,
                17740
            ],
            "filename": "legacy.js",
            "lineno": 491,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002542",
                "name": "exports.showNotice",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "showNotice",
        "longname": "showNotice",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17747,
                17757
            ],
            "filename": "legacy.js",
            "lineno": 492,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002545",
                "name": "exports.findModule",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "findModule",
        "longname": "findModule",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17764,
                17778
            ],
            "filename": "legacy.js",
            "lineno": 493,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002548",
                "name": "exports.findAllModules",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "findAllModules",
        "longname": "findAllModules",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17785,
                17802
            ],
            "filename": "legacy.js",
            "lineno": 494,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002551",
                "name": "exports.findModuleByProps",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "findModuleByProps",
        "longname": "findModuleByProps",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17809,
                17831
            ],
            "filename": "legacy.js",
            "lineno": 495,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002554",
                "name": "exports.findModuleByPrototypes",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "findModuleByPrototypes",
        "longname": "findModuleByPrototypes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17838,
                17861
            ],
            "filename": "legacy.js",
            "lineno": 496,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002557",
                "name": "exports.findModuleByDisplayName",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "findModuleByDisplayName",
        "longname": "findModuleByDisplayName",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17868,
                17887
            ],
            "filename": "legacy.js",
            "lineno": 497,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002560",
                "name": "exports.getInternalInstance",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "getInternalInstance",
        "longname": "getInternalInstance",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17894,
                17902
            ],
            "filename": "legacy.js",
            "lineno": 498,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002563",
                "name": "exports.loadData",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "loadData",
        "longname": "loadData",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17909,
                17928
            ],
            "filename": "legacy.js",
            "lineno": 499,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002566",
                "name": "exports.getData",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "getData",
        "longname": "getData",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17935,
                17943
            ],
            "filename": "legacy.js",
            "lineno": 500,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002569",
                "name": "exports.saveData",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "saveData",
        "longname": "saveData",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17950,
                17969
            ],
            "filename": "legacy.js",
            "lineno": 501,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002572",
                "name": "exports.setData",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "setData",
        "longname": "setData",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17976,
                17986
            ],
            "filename": "legacy.js",
            "lineno": 502,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002575",
                "name": "exports.deleteData",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "deleteData",
        "longname": "deleteData",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17993,
                18004
            ],
            "filename": "legacy.js",
            "lineno": 503,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002578",
                "name": "exports.monkeyPatch",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "monkeyPatch",
        "longname": "monkeyPatch",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18011,
                18020
            ],
            "filename": "legacy.js",
            "lineno": 504,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002581",
                "name": "exports.onRemoved",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "onRemoved",
        "longname": "onRemoved",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18027,
                18041
            ],
            "filename": "legacy.js",
            "lineno": 505,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002584",
                "name": "exports.suppressErrors",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "suppressErrors",
        "longname": "suppressErrors",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18048,
                18056
            ],
            "filename": "legacy.js",
            "lineno": 506,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002587",
                "name": "exports.testJSON",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "testJSON",
        "longname": "testJSON",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18063,
                18079
            ],
            "filename": "legacy.js",
            "lineno": 507,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002590",
                "name": "exports.isSettingEnabled",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "isSettingEnabled",
        "longname": "isSettingEnabled",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18086,
                18099
            ],
            "filename": "legacy.js",
            "lineno": 508,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002593",
                "name": "exports.enableSetting",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "enableSetting",
        "longname": "enableSetting",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18106,
                18120
            ],
            "filename": "legacy.js",
            "lineno": 509,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002596",
                "name": "exports.disableSetting",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "disableSetting",
        "longname": "disableSetting",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18127,
                18140
            ],
            "filename": "legacy.js",
            "lineno": 510,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002599",
                "name": "exports.toggleSetting",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "toggleSetting",
        "longname": "toggleSetting",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18147,
                18156
            ],
            "filename": "legacy.js",
            "lineno": 511,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002602",
                "name": "exports.getBDData",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "getBDData",
        "longname": "getBDData",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18163,
                18172
            ],
            "filename": "legacy.js",
            "lineno": 512,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002605",
                "name": "exports.setBDData",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "setBDData",
        "longname": "setBDData",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                18179,
                18189
            ],
            "filename": "legacy.js",
            "lineno": 513,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002608",
                "name": "exports.openDialog",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "openDialog",
        "longname": "openDialog",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\r\n * `Patcher` is a utility class for modifying existing functions. Instance is accessible through the {@link BdApi}.\r\n * This is extremely useful for modifying the internals of Discord by adjusting return value or React renders, or arguments of internal functions.\r\n * @type Patcher\r\n * @summary {@link Patcher} is a utility class for modifying existing functions.\r\n * @name Patcher\r\n */",
        "meta": {
            "filename": "patcher.js",
            "lineno": 4,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`Patcher` is a utility class for modifying existing functions. Instance is accessible through the {@link BdApi}.\rThis is extremely useful for modifying the internals of Discord by adjusting return value or React renders, or arguments of internal functions.",
        "type": {
            "names": [
                "Patcher"
            ]
        },
        "summary": "{@link Patcher} is a utility class for modifying existing functions.",
        "name": "Patcher",
        "longname": "Patcher",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                484,
                4951
            ],
            "filename": "patcher.js",
            "lineno": 11,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002621",
                "name": "Patcher",
                "type": "ClassDeclaration",
                "paramnames": [
                    "callerName"
                ]
            }
        },
        "undocumented": true,
        "name": "Patcher",
        "longname": "Patcher",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                507,
                524
            ],
            "filename": "patcher.js",
            "lineno": 13,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002624",
                "name": "callerName",
                "type": "ClassPrivateProperty"
            }
        },
        "undocumented": true,
        "name": "callerName",
        "longname": "Patcher#callerName",
        "kind": "member",
        "memberof": "Patcher",
        "scope": "instance",
        "access": "private"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                530,
                636
            ],
            "filename": "patcher.js",
            "lineno": 14,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002626",
                "name": "Patcher",
                "type": "MethodDefinition",
                "paramnames": [
                    "callerName"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Patcher",
        "longname": "Patcher",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                599,
                628
            ],
            "filename": "patcher.js",
            "lineno": 16,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002636",
                "name": "this.",
                "type": "Identifier",
                "value": "callerName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Patcher",
        "longname": "Patcher.Patcher",
        "kind": "member",
        "memberof": "Patcher",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * This method patches onto another function, allowing your code to run beforehand. \r\n     * Using this, you are also able to modify the incoming arguments before the original method is run.\r\n     * @param {string} caller Name of the caller of the patch function.\r\n     * @param {object} moduleToPatch Object with the function to be patched. Can also be an object's prototype.\r\n     * @param {string} functionName Name of the function to be patched.\r\n     * @param {function} callback Function to run before the original method. The function is given the `this` context and the `arguments` of the original function.\r\n     * @returns {function} Function that cancels the original patch.\r\n     */",
        "meta": {
            "range": [
                1353,
                1726
            ],
            "filename": "patcher.js",
            "lineno": 28,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002642",
                "name": "Patcher#before",
                "type": "MethodDefinition",
                "paramnames": [
                    "caller",
                    "moduleToPatch",
                    "functionName",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "This method patches onto another function, allowing your code to run beforehand. \rUsing this, you are also able to modify the incoming arguments before the original method is run.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the caller of the patch function.",
                "name": "caller"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object with the function to be patched. Can also be an object's prototype.",
                "name": "moduleToPatch"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the function to be patched.",
                "name": "functionName"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function to run before the original method. The function is given the `this` context and the `arguments` of the original function.",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function that cancels the original patch."
            }
        ],
        "name": "before",
        "longname": "Patcher#before",
        "kind": "function",
        "memberof": "Patcher",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1455,
                1478
            ],
            "filename": "patcher.js",
            "lineno": 30,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002657",
                "name": "callback",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "functionName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "callback",
        "longname": "<anonymous>~callback",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1493,
                1521
            ],
            "filename": "patcher.js",
            "lineno": 31,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002661",
                "name": "functionName",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "moduleToPatch",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "functionName",
        "longname": "<anonymous>~functionName",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1536,
                1558
            ],
            "filename": "patcher.js",
            "lineno": 32,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002665",
                "name": "moduleToPatch",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "caller",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "moduleToPatch",
        "longname": "<anonymous>~moduleToPatch",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1573,
                1598
            ],
            "filename": "patcher.js",
            "lineno": 33,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002669",
                "name": "caller",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "caller",
        "longname": "<anonymous>~caller",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1702,
                1716
            ],
            "filename": "patcher.js",
            "lineno": 35,
            "columnno": 90,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002685",
                "name": "type",
                "type": "Literal",
                "value": "before"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "type",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\r\n     * This method patches onto another function, allowing your code to run instead. \r\n     * Using this, you are also able to modify the return value, using the return of your code instead.\r\n     * @param {string} caller Name of the caller of the patch function.\r\n     * @param {object} moduleToPatch Object with the function to be patched. Can also be an object's prototype.\r\n     * @param {string} functionName Name of the function to be patched.\r\n     * @param {function} callback Function to run before the original method. The function is given the `this` context, `arguments` of the original function, and also the original function.\r\n     * @returns {function} Function that cancels the original patch.\r\n     */",
        "meta": {
            "range": [
                2464,
                2839
            ],
            "filename": "patcher.js",
            "lineno": 47,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002687",
                "name": "Patcher#instead",
                "type": "MethodDefinition",
                "paramnames": [
                    "caller",
                    "moduleToPatch",
                    "functionName",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "This method patches onto another function, allowing your code to run instead. \rUsing this, you are also able to modify the return value, using the return of your code instead.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the caller of the patch function.",
                "name": "caller"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object with the function to be patched. Can also be an object's prototype.",
                "name": "moduleToPatch"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the function to be patched.",
                "name": "functionName"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function to run before the original method. The function is given the `this` context, `arguments` of the original function, and also the original function.",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function that cancels the original patch."
            }
        ],
        "name": "instead",
        "longname": "Patcher#instead",
        "kind": "function",
        "memberof": "Patcher",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2567,
                2590
            ],
            "filename": "patcher.js",
            "lineno": 49,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002702",
                "name": "callback",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "functionName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "callback",
        "longname": "<anonymous>~callback",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2605,
                2633
            ],
            "filename": "patcher.js",
            "lineno": 50,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002706",
                "name": "functionName",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "moduleToPatch",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "functionName",
        "longname": "<anonymous>~functionName",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2648,
                2670
            ],
            "filename": "patcher.js",
            "lineno": 51,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002710",
                "name": "moduleToPatch",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "caller",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "moduleToPatch",
        "longname": "<anonymous>~moduleToPatch",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2685,
                2710
            ],
            "filename": "patcher.js",
            "lineno": 52,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002714",
                "name": "caller",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "caller",
        "longname": "<anonymous>~caller",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2814,
                2829
            ],
            "filename": "patcher.js",
            "lineno": 54,
            "columnno": 90,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002730",
                "name": "type",
                "type": "Literal",
                "value": "instead"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "type",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\r\n     * This method patches onto another function, allowing your code to run instead. \r\n     * Using this, you are also able to modify the return value, using the return of your code instead.\r\n     * @param {string} caller Name of the caller of the patch function.\r\n     * @param {object} moduleToPatch Object with the function to be patched. Can also be an object's prototype.\r\n     * @param {string} functionName Name of the function to be patched.\r\n     * @param {function} callback Function to run after the original method. The function is given the `this` context, the `arguments` of the original function, and the `return` value of the original function.\r\n     * @returns {function} Function that cancels the original patch.\r\n     */",
        "meta": {
            "range": [
                3597,
                3968
            ],
            "filename": "patcher.js",
            "lineno": 66,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002732",
                "name": "Patcher#after",
                "type": "MethodDefinition",
                "paramnames": [
                    "caller",
                    "moduleToPatch",
                    "functionName",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "This method patches onto another function, allowing your code to run instead. \rUsing this, you are also able to modify the return value, using the return of your code instead.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the caller of the patch function.",
                "name": "caller"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object with the function to be patched. Can also be an object's prototype.",
                "name": "moduleToPatch"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the function to be patched.",
                "name": "functionName"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function to run after the original method. The function is given the `this` context, the `arguments` of the original function, and the `return` value of the original function.",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function that cancels the original patch."
            }
        ],
        "name": "after",
        "longname": "Patcher#after",
        "kind": "function",
        "memberof": "Patcher",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3698,
                3721
            ],
            "filename": "patcher.js",
            "lineno": 68,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002747",
                "name": "callback",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "functionName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "callback",
        "longname": "<anonymous>~callback",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3736,
                3764
            ],
            "filename": "patcher.js",
            "lineno": 69,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002751",
                "name": "functionName",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "moduleToPatch",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "functionName",
        "longname": "<anonymous>~functionName",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3779,
                3801
            ],
            "filename": "patcher.js",
            "lineno": 70,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002755",
                "name": "moduleToPatch",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "caller",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "moduleToPatch",
        "longname": "<anonymous>~moduleToPatch",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3816,
                3841
            ],
            "filename": "patcher.js",
            "lineno": 71,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002759",
                "name": "caller",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "caller",
        "longname": "<anonymous>~caller",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3945,
                3958
            ],
            "filename": "patcher.js",
            "lineno": 73,
            "columnno": 90,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002775",
                "name": "type",
                "type": "Literal",
                "value": "after"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "type",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\r\n     * Returns all patches by a particular caller. The patches all have an `unpatch()` method.\r\n     * @param {string} caller ID of the original patches\r\n     * @returns {Array<function>} Array of all the patch objects.\r\n     */",
        "meta": {
            "range": [
                4215,
                4520
            ],
            "filename": "patcher.js",
            "lineno": 81,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002777",
                "name": "Patcher#getPatchesByCaller",
                "type": "MethodDefinition",
                "paramnames": [
                    "caller"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Returns all patches by a particular caller. The patches all have an `unpatch()` method.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "ID of the original patches",
                "name": "caller"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<function()>"
                    ]
                },
                "description": "Array of all the patch objects."
            }
        ],
        "name": "getPatchesByCaller",
        "longname": "Patcher#getPatchesByCaller",
        "kind": "function",
        "memberof": "Patcher",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4275,
                4300
            ],
            "filename": "patcher.js",
            "lineno": 82,
            "columnno": 30,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002788",
                "name": "caller",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "caller",
        "longname": "<anonymous>~caller",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\r\n     * Automatically cancels all patches created with a specific ID.\r\n     * @param {string} caller ID of the original patches\r\n     */",
        "meta": {
            "range": [
                4674,
                4948
            ],
            "filename": "patcher.js",
            "lineno": 91,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002812",
                "name": "Patcher#unpatchAll",
                "type": "MethodDefinition",
                "paramnames": [
                    "caller"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Automatically cancels all patches created with a specific ID.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "ID of the original patches",
                "name": "caller"
            }
        ],
        "name": "unpatchAll",
        "longname": "Patcher#unpatchAll",
        "kind": "function",
        "memberof": "Patcher",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4726,
                4751
            ],
            "filename": "patcher.js",
            "lineno": 92,
            "columnno": 30,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002823",
                "name": "caller",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "caller",
        "longname": "<anonymous>~caller",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5015,
                5038
            ],
            "filename": "patcher.js",
            "lineno": 100,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002861",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * `ReactUtils` is a utility class for interacting with React internals. Instance is accessible through the {@link BdApi}.\r\n * This is extremely useful for interacting with the internals of the UI.\r\n * @type ReactUtils\r\n * @summary {@link ReactUtils} is a utility class for interacting with React internals.\r\n * @name ReactUtils\r\n */",
        "meta": {
            "filename": "reactutils.js",
            "lineno": 4,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`ReactUtils` is a utility class for interacting with React internals. Instance is accessible through the {@link BdApi}.\rThis is extremely useful for interacting with the internals of the UI.",
        "type": {
            "names": [
                "ReactUtils"
            ]
        },
        "summary": "{@link ReactUtils} is a utility class for interacting with React internals.",
        "name": "ReactUtils",
        "longname": "ReactUtils",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                436,
                3514
            ],
            "filename": "reactutils.js",
            "lineno": 11,
            "columnno": 6,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002874",
                "name": "ReactUtils",
                "type": "ObjectExpression",
                "value": "{\"rootInstance\":\"\",\"getInternalInstance\":\"\",\"getOwnerInstance\":\"\",\"wrapElement\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "ReactUtils",
        "longname": "ReactUtils",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                458,
                568
            ],
            "filename": "reactutils.js",
            "lineno": 13,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002877",
                "name": "rootInstance",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "rootInstance",
        "longname": "ReactUtils.rootInstance",
        "kind": "member",
        "memberof": "ReactUtils",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * Gets the internal react data of a specified node\r\n     * \r\n     * @param {HTMLElement} node Node to get the react data from\r\n     * @returns {object|undefined} Either the found data or `undefined` \r\n     */",
        "meta": {
            "range": [
                801,
                1027
            ],
            "filename": "reactutils.js",
            "lineno": 21,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002882",
                "name": "getInternalInstance",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "description": "Gets the internal react data of a specified node",
        "params": [
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "description": "Node to get the react data from",
                "name": "node"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object",
                        "undefined"
                    ]
                },
                "description": "Either the found data or `undefined`"
            }
        ],
        "name": "getInternalInstance",
        "longname": "ReactUtils.getInternalInstance",
        "kind": "function",
        "memberof": "ReactUtils",
        "scope": "static"
    },
    {
        "comment": "/**\r\n      * Attempts to find the \"owner\" node to the current node. This is generally \r\n      * a node with a stateNode--a class component.\r\n      * @param {HTMLElement} node - node to obtain react instance of\r\n      * @param {object} options - options for the search\r\n      * @param {array} [options.include] - list of items to include from the search\r\n      * @param {array} [options.exclude=[\"Popout\", \"Tooltip\", \"Scroller\", \"BackgroundFlash\"]] - list of items to exclude from the search\r\n      * @param {callable} [options.filter=_=>_] - filter to check the current instance with (should return a boolean)\r\n      * @return {(*|null)} the owner instance or undefined if not found.\r\n      */",
        "meta": {
            "range": [
                1735,
                2809
            ],
            "filename": "reactutils.js",
            "lineno": 36,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002920",
                "name": "getOwnerInstance",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null,
                "excluding": "ReactUtils.getOwnerInstance~excluding",
                "nameFilter": "ReactUtils.getOwnerInstance~nameFilter",
                "getDisplayName": "ReactUtils.getOwnerInstance~getDisplayName",
                "classFilter": "ReactUtils.getOwnerInstance~classFilter",
                "curr": "ReactUtils.getOwnerInstance~curr",
                "owner": "ReactUtils.getOwnerInstance~owner"
            }
        },
        "description": "Attempts to find the \"owner\" node to the current node. This is generally \ra node with a stateNode--a class component.",
        "params": [
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "description": "node to obtain react instance of",
                "name": "node"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "options for the search",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "array"
                    ]
                },
                "optional": true,
                "description": "list of items to include from the search",
                "name": "options.include"
            },
            {
                "type": {
                    "names": [
                        "array"
                    ]
                },
                "optional": true,
                "defaultvalue": "[\"Popout\", \"Tooltip\", \"Scroller\", \"BackgroundFlash\"]",
                "description": "list of items to exclude from the search",
                "name": "options.exclude"
            },
            {
                "type": {
                    "names": [
                        "callable"
                    ]
                },
                "optional": true,
                "defaultvalue": "_=>_",
                "description": "filter to check the current instance with (should return a boolean)",
                "name": "options.filter"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "*",
                        "null"
                    ]
                },
                "description": "the owner instance or undefined if not found."
            }
        ],
        "name": "getOwnerInstance",
        "longname": "ReactUtils.getOwnerInstance",
        "kind": "function",
        "memberof": "ReactUtils",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1759,
                1766
            ],
            "filename": "reactutils.js",
            "lineno": 36,
            "columnno": 28,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002925",
                "name": "include",
                "type": "Identifier",
                "value": "include"
            }
        },
        "undocumented": true,
        "name": "include",
        "longname": "include",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1768,
                1830
            ],
            "filename": "reactutils.js",
            "lineno": 36,
            "columnno": 37,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002927",
                "name": "exclude",
                "type": "AssignmentPattern",
                "value": "exclude"
            }
        },
        "undocumented": true,
        "name": "exclude",
        "longname": "exclude",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1832,
                1847
            ],
            "filename": "reactutils.js",
            "lineno": 36,
            "columnno": 101,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002935",
                "name": "filter",
                "type": "AssignmentPattern",
                "value": "filter"
            }
        },
        "undocumented": true,
        "name": "filter",
        "longname": "filter",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1923,
                1956
            ],
            "filename": "reactutils.js",
            "lineno": 38,
            "columnno": 14,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002950",
                "name": "excluding",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "excluding",
        "longname": "ReactUtils.getOwnerInstance~excluding",
        "kind": "constant",
        "memberof": "ReactUtils.getOwnerInstance",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1973,
                2015
            ],
            "filename": "reactutils.js",
            "lineno": 39,
            "columnno": 14,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002956",
                "name": "nameFilter",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nameFilter",
        "longname": "ReactUtils.getOwnerInstance~nameFilter",
        "kind": "constant",
        "memberof": "ReactUtils.getOwnerInstance",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2026,
                2203
            ],
            "filename": "reactutils.js",
            "lineno": 40,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002962",
                "name": "getDisplayName",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "owner"
                ]
            },
            "vars": {
                "type": "ReactUtils.getOwnerInstance~getDisplayName~type"
            }
        },
        "undocumented": true,
        "name": "getDisplayName",
        "longname": "ReactUtils.getOwnerInstance~getDisplayName",
        "kind": "function",
        "memberof": "ReactUtils.getOwnerInstance",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2078,
                2095
            ],
            "filename": "reactutils.js",
            "lineno": 41,
            "columnno": 18,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002967",
                "name": "type",
                "type": "MemberExpression",
                "value": "owner.type"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "ReactUtils.getOwnerInstance~getDisplayName~type",
        "kind": "constant",
        "memberof": "ReactUtils.getOwnerInstance~getDisplayName",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2213,
                2384
            ],
            "filename": "reactutils.js",
            "lineno": 45,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002987",
                "name": "classFilter",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "owner"
                ]
            },
            "vars": {
                "name": "ReactUtils.getOwnerInstance~classFilter~name"
            }
        },
        "undocumented": true,
        "name": "classFilter",
        "longname": "ReactUtils.getOwnerInstance~classFilter",
        "kind": "function",
        "memberof": "ReactUtils.getOwnerInstance",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2262,
                2290
            ],
            "filename": "reactutils.js",
            "lineno": 46,
            "columnno": 18,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002992",
                "name": "name",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "ReactUtils.getOwnerInstance~classFilter~name",
        "kind": "constant",
        "memberof": "ReactUtils.getOwnerInstance~classFilter",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2408,
                2448
            ],
            "filename": "reactutils.js",
            "lineno": 50,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003012",
                "name": "curr",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curr",
        "longname": "ReactUtils.getOwnerInstance~curr",
        "kind": "member",
        "memberof": "ReactUtils.getOwnerInstance",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2464,
                2490
            ],
            "filename": "reactutils.js",
            "lineno": 51,
            "columnno": 13,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003020",
                "name": "curr",
                "type": "LogicalExpression",
                "funcscope": "ReactUtils.getOwnerInstance",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "curr",
        "longname": "ReactUtils.getOwnerInstance~curr",
        "kind": "member",
        "memberof": "ReactUtils.getOwnerInstance",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2516,
                2534
            ],
            "filename": "reactutils.js",
            "lineno": 51,
            "columnno": 65,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003033",
                "name": "curr",
                "type": "MemberExpression",
                "funcscope": "ReactUtils.getOwnerInstance",
                "value": "curr.return",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "curr",
        "longname": "ReactUtils.getOwnerInstance~curr",
        "kind": "member",
        "memberof": "ReactUtils.getOwnerInstance",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2607,
                2629
            ],
            "filename": "reactutils.js",
            "lineno": 53,
            "columnno": 18,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003047",
                "name": "owner",
                "type": "MemberExpression",
                "value": "curr.stateNode"
            }
        },
        "undocumented": true,
        "name": "owner",
        "longname": "ReactUtils.getOwnerInstance~owner",
        "kind": "constant",
        "memberof": "ReactUtils.getOwnerInstance",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\r\n      * Creates an unrendered react component that wraps dom elements.\r\n      * @param {HTMLElement} element - element or array of elements to wrap into a react component\r\n      * @returns {object} - unrendered react component\r\n      */",
        "meta": {
            "range": [
                3065,
                3509
            ],
            "filename": "reactutils.js",
            "lineno": 65,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003076",
                "name": "wrapElement",
                "type": "FunctionExpression"
            },
            "vars": {
                "undefined": null
            }
        },
        "description": "Creates an unrendered react component that wraps dom elements.",
        "params": [
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "description": "element or array of elements to wrap into a react component",
                "name": "element"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "- unrendered react component"
            }
        ],
        "name": "wrapElement",
        "longname": "ReactUtils.wrapElement",
        "kind": "function",
        "memberof": "ReactUtils",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3246,
                3268
            ],
            "filename": "reactutils.js",
            "lineno": 69,
            "columnno": 16,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003099",
                "name": "this.element",
                "type": "Identifier",
                "value": "element",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "element",
        "longname": "<anonymous>#element",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3304,
                3370
            ],
            "filename": "reactutils.js",
            "lineno": 72,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003104",
                "name": "componentDidMount",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "componentDidMount",
        "longname": "componentDidMount",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3384,
                3490
            ],
            "filename": "reactutils.js",
            "lineno": 73,
            "columnno": 12,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003120",
                "name": "render",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "render",
        "longname": "render",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3444,
                3470
            ],
            "filename": "reactutils.js",
            "lineno": 73,
            "columnno": 72,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003133",
                "name": "className",
                "type": "Literal",
                "value": "react-wrapper"
            }
        },
        "undocumented": true,
        "name": "className",
        "longname": "className",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3472,
                3486
            ],
            "filename": "reactutils.js",
            "lineno": 73,
            "columnno": 100,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003135",
                "name": "ref",
                "type": "Literal",
                "value": "element"
            }
        },
        "undocumented": true,
        "name": "ref",
        "longname": "ref",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3549,
                3575
            ],
            "filename": "reactutils.js",
            "lineno": 81,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003143",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * `UI` is a utility class for getting internal webpack modules. Instance is accessible through the {@link BdApi}.\r\n * This is extremely useful for interacting with the internals of Discord.\r\n * @type UI\r\n * @summary {@link UI} is a utility class for getting internal webpack modules.\r\n * @name UI\r\n */",
        "meta": {
            "filename": "ui.js",
            "lineno": 7,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`UI` is a utility class for getting internal webpack modules. Instance is accessible through the {@link BdApi}.\rThis is extremely useful for interacting with the internals of Discord.",
        "type": {
            "names": [
                "UI"
            ]
        },
        "summary": "{@link UI} is a utility class for getting internal webpack modules.",
        "name": "UI",
        "longname": "UI",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                504,
                6441
            ],
            "filename": "ui.js",
            "lineno": 14,
            "columnno": 6,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003168",
                "name": "UI",
                "type": "ObjectExpression",
                "value": "{\"alert\":\"\",\"createTooltip\":\"\",\"showConfirmationModal\":\"\",\"showToast\":\"\",\"showNotice\":\"\",\"openDialog\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "UI",
        "longname": "UI",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\r\n     * Shows a generic but very customizable modal.\r\n     * \r\n     * @param {string} title title of the modal\r\n     * @param {(string|ReactElement|Array<string|ReactElement>)} content a string of text to display in the modal\r\n     */",
        "meta": {
            "range": [
                760,
                829
            ],
            "filename": "ui.js",
            "lineno": 21,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003171",
                "name": "alert",
                "type": "FunctionExpression"
            }
        },
        "description": "Shows a generic but very customizable modal.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "title of the modal",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "ReactElement",
                        "Array.<(string|ReactElement)>"
                    ]
                },
                "description": "a string of text to display in the modal",
                "name": "content"
            }
        ],
        "name": "alert",
        "longname": "UI.alert",
        "kind": "function",
        "memberof": "UI",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * Creates a tooltip to automatically show on hover.\r\n     *\r\n     * @param {HTMLElement} node - DOM node to monitor and show the tooltip on\r\n     * @param {string|HTMLElement} content - string to show in the tooltip\r\n     * @param {object} options - additional options for the tooltip\r\n     * @param {\"primary\"|\"info\"|\"success\"|\"warn\"|\"danger\"} [options.style=\"primary\"] - correlates to the discord styling/colors\r\n     * @param {\"top\"|\"right\"|\"bottom\"|\"left\"} [options.side=\"top\"] - can be any of top, right, bottom, left\r\n     * @param {boolean} [options.preventFlip=false] - prevents moving the tooltip to the opposite side if it is too big or goes offscreen\r\n     * @param {boolean} [options.disabled=false] - whether the tooltip should be disabled from showing on hover\r\n     * @returns {Tooltip} the tooltip that was generated\r\n     */",
        "meta": {
            "range": [
                1695,
                1802
            ],
            "filename": "ui.js",
            "lineno": 37,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003183",
                "name": "createTooltip",
                "type": "FunctionExpression"
            }
        },
        "description": "Creates a tooltip to automatically show on hover.",
        "params": [
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "description": "DOM node to monitor and show the tooltip on",
                "name": "node"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "HTMLElement"
                    ]
                },
                "description": "string to show in the tooltip",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "additional options for the tooltip",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "\"primary\"",
                        "\"info\"",
                        "\"success\"",
                        "\"warn\"",
                        "\"danger\""
                    ]
                },
                "optional": true,
                "defaultvalue": "\"primary\"",
                "description": "correlates to the discord styling/colors",
                "name": "options.style"
            },
            {
                "type": {
                    "names": [
                        "\"top\"",
                        "\"right\"",
                        "\"bottom\"",
                        "\"left\""
                    ]
                },
                "optional": true,
                "defaultvalue": "\"top\"",
                "description": "can be any of top, right, bottom, left",
                "name": "options.side"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "prevents moving the tooltip to the opposite side if it is too big or goes offscreen",
                "name": "options.preventFlip"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "whether the tooltip should be disabled from showing on hover",
                "name": "options.disabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Tooltip"
                    ]
                },
                "description": "the tooltip that was generated"
            }
        ],
        "name": "createTooltip",
        "longname": "UI.createTooltip",
        "kind": "function",
        "memberof": "UI",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * Shows a generic but very customizable confirmation modal with optional confirm and cancel callbacks.\r\n     * \r\n     * @param {string} title title of the modal\r\n     * @param {(string|ReactElement|Array<string|ReactElement>)} children a single or mixed array of react elements and strings. Everything is wrapped in Discord's `TextElement` component so strings will show and render properly.\r\n     * @param {object} [options] options to modify the modal\r\n     * @param {boolean} [options.danger=false] whether the main button should be red or not\r\n     * @param {string} [options.confirmText=Okay] text for the confirmation/submit button\r\n     * @param {string} [options.cancelText=Cancel] text for the cancel button\r\n     * @param {callable} [options.onConfirm=NOOP] callback to occur when clicking the submit button\r\n     * @param {callable} [options.onCancel=NOOP] callback to occur when clicking the cancel button\r\n     */",
        "meta": {
            "range": [
                2753,
                2884
            ],
            "filename": "ui.js",
            "lineno": 53,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003199",
                "name": "showConfirmationModal",
                "type": "FunctionExpression"
            }
        },
        "description": "Shows a generic but very customizable confirmation modal with optional confirm and cancel callbacks.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "title of the modal",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "ReactElement",
                        "Array.<(string|ReactElement)>"
                    ]
                },
                "description": "a single or mixed array of react elements and strings. Everything is wrapped in Discord's `TextElement` component so strings will show and render properly.",
                "name": "children"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "options to modify the modal",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "whether the main button should be red or not",
                "name": "options.danger"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "Okay",
                "description": "text for the confirmation/submit button",
                "name": "options.confirmText"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "Cancel",
                "description": "text for the cancel button",
                "name": "options.cancelText"
            },
            {
                "type": {
                    "names": [
                        "callable"
                    ]
                },
                "optional": true,
                "defaultvalue": "NOOP",
                "description": "callback to occur when clicking the submit button",
                "name": "options.onConfirm"
            },
            {
                "type": {
                    "names": [
                        "callable"
                    ]
                },
                "optional": true,
                "defaultvalue": "NOOP",
                "description": "callback to occur when clicking the cancel button",
                "name": "options.onCancel"
            }
        ],
        "name": "showConfirmationModal",
        "longname": "UI.showConfirmationModal",
        "kind": "function",
        "memberof": "UI",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * This shows a toast similar to android towards the bottom of the screen.\r\n     *\r\n     * @param {string} content The string to show in the toast.\r\n     * @param {object} options Options object. Optional parameter.\r\n     * @param {string} [options.type=\"\"] Changes the type of the toast stylistically and semantically. Choices: \"\", \"info\", \"success\", \"danger\"/\"error\", \"warning\"/\"warn\". Default: \"\"\r\n     * @param {boolean} [options.icon=true] Determines whether the icon should show corresponding to the type. A toast without type will always have no icon. Default: `true`\r\n     * @param {number} [options.timeout=3000] Adjusts the time (in ms) the toast should be shown for before disappearing automatically. Default: `3000`\r\n     * @param {boolean} [options.forceShow=false] Whether to force showing the toast and ignore the bd setting\r\n     */",
        "meta": {
            "range": [
                3756,
                3837
            ],
            "filename": "ui.js",
            "lineno": 67,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003215",
                "name": "showToast",
                "type": "FunctionExpression"
            }
        },
        "description": "This shows a toast similar to android towards the bottom of the screen.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The string to show in the toast.",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Options object. Optional parameter.",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "Changes the type of the toast stylistically and semantically. Choices: \"\", \"info\", \"success\", \"danger\"/\"error\", \"warning\"/\"warn\". Default: \"\"",
                "name": "options.type"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Determines whether the icon should show corresponding to the type. A toast without type will always have no icon. Default: `true`",
                "name": "options.icon"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 3000,
                "description": "Adjusts the time (in ms) the toast should be shown for before disappearing automatically. Default: `3000`",
                "name": "options.timeout"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to force showing the toast and ignore the bd setting",
                "name": "options.forceShow"
            }
        ],
        "name": "showToast",
        "longname": "UI.showToast",
        "kind": "function",
        "memberof": "UI",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * Shows a notice above Discord's chat layer.\r\n     * \r\n     * @param {string|Node} content Content of the notice\r\n     * @param {object} options Options for the notice.\r\n     * @param {string} [options.type=\"info\" | \"error\" | \"warning\" | \"success\"] Type for the notice. Will affect the color.\r\n     * @param {Array<{label: string, onClick: function}>} [options.buttons] Buttons that should be added next to the notice text.\r\n     * @param {number} [options.timeout=10000] Timeout until the notice is closed. Won't fire if it's set to 0;\r\n     * @returns {function}\r\n     */",
        "meta": {
            "range": [
                4435,
                4525
            ],
            "filename": "ui.js",
            "lineno": 81,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003229",
                "name": "showNotice",
                "type": "FunctionExpression"
            }
        },
        "description": "Shows a notice above Discord's chat layer.",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "Node"
                    ]
                },
                "description": "Content of the notice",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Options for the notice.",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"info\" | \"error\" | \"warning\" | \"success\"",
                "description": "Type for the notice. Will affect the color.",
                "name": "options.type"
            },
            {
                "type": {
                    "names": [
                        "Array.<{label: string, onClick: function()}>"
                    ]
                },
                "optional": true,
                "description": "Buttons that should be added next to the notice text.",
                "name": "options.buttons"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 10000,
                "description": "Timeout until the notice is closed. Won't fire if it's set to 0;",
                "name": "options.timeout"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                }
            }
        ],
        "name": "showNotice",
        "longname": "UI.showNotice",
        "kind": "function",
        "memberof": "UI",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * Gives access to the [Electron Dialog](https://www.electronjs.org/docs/latest/api/dialog/) api. \r\n     * Returns a `Promise` that resolves to an `object` that has a `boolean` cancelled and a `filePath` string for saving and a `filePaths` string array for opening.\r\n     * \r\n     * @param {object} options Options object to configure the dialog.\r\n     * @param {\"open\"|\"save\"} [options.mode=\"open\"] Determines whether the dialog should open or save files.\r\n     * @param {string} [options.defaultPath=~] Path the dialog should show on launch.\r\n     * @param {Array<object<string, string[]>>} [options.filters=[]] An array of [file filters](https://www.electronjs.org/docs/latest/api/structures/file-filter).\r\n     * @param {string} [options.title] Title for the titlebar.\r\n     * @param {string} [options.message] Message for the dialog.\r\n     * @param {boolean} [options.showOverwriteConfirmation=false] Whether the user should be prompted when overwriting a file.\r\n     * @param {boolean} [options.showHiddenFiles=false] Whether hidden files should be shown in the dialog.\r\n     * @param {boolean} [options.promptToCreate=false] Whether the user should be prompted to create non-existant folders.\r\n     * @param {boolean} [options.openDirectory=false] Whether the user should be able to select a directory as a target.\r\n     * @param {boolean} [options.openFile=true] Whether the user should be able to select a file as a target.\r\n     * @param {boolean} [options.multiSelections=false] Whether the user should be able to select multiple targets.\r\n     * @param {boolean} [options.modal=false] Whether the dialog should act as a modal to the main window.\r\n     * @returns {Promise<object>} Result of the dialog\r\n     */",
        "meta": {
            "range": [
                6271,
                6436
            ],
            "filename": "ui.js",
            "lineno": 104,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003243",
                "name": "openDialog",
                "type": "FunctionExpression"
            },
            "vars": {
                "data": "UI.openDialog~data"
            }
        },
        "description": "Gives access to the [Electron Dialog](https://www.electronjs.org/docs/latest/api/dialog/) api. \rReturns a `Promise` that resolves to an `object` that has a `boolean` cancelled and a `filePath` string for saving and a `filePaths` string array for opening.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Options object to configure the dialog.",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "\"open\"",
                        "\"save\""
                    ]
                },
                "optional": true,
                "defaultvalue": "\"open\"",
                "description": "Determines whether the dialog should open or save files.",
                "name": "options.mode"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "~",
                "description": "Path the dialog should show on launch.",
                "name": "options.defaultPath"
            },
            {
                "type": {
                    "names": [
                        "Array.<object.<string, Array.<string>>>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "An array of [file filters](https://www.electronjs.org/docs/latest/api/structures/file-filter).",
                "name": "options.filters"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Title for the titlebar.",
                "name": "options.title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Message for the dialog.",
                "name": "options.message"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the user should be prompted when overwriting a file.",
                "name": "options.showOverwriteConfirmation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether hidden files should be shown in the dialog.",
                "name": "options.showHiddenFiles"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the user should be prompted to create non-existant folders.",
                "name": "options.promptToCreate"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the user should be able to select a directory as a target.",
                "name": "options.openDirectory"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether the user should be able to select a file as a target.",
                "name": "options.openFile"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the user should be able to select multiple targets.",
                "name": "options.multiSelections"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the dialog should act as a modal to the main window.",
                "name": "options.modal"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<object>"
                    ]
                },
                "description": "Result of the dialog"
            }
        ],
        "name": "openDialog",
        "longname": "UI.openDialog",
        "kind": "function",
        "memberof": "UI",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6314,
                6350
            ],
            "filename": "ui.js",
            "lineno": 105,
            "columnno": 14,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003248",
                "name": "data",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "UI.openDialog~data",
        "kind": "constant",
        "memberof": "UI.openDialog",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6468,
                6486
            ],
            "filename": "ui.js",
            "lineno": 115,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003274",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * `Utils` is a utility containing commonly reused functions. Instance is accessible through the {@link BdApi}.\r\n * @type Utils\r\n * @summary {@link Utils} is a utility class for interacting with React internals.\r\n * @name Utils\r\n */",
        "meta": {
            "filename": "utils.js",
            "lineno": 3,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`Utils` is a utility containing commonly reused functions. Instance is accessible through the {@link BdApi}.",
        "type": {
            "names": [
                "Utils"
            ]
        },
        "summary": "{@link Utils} is a utility class for interacting with React internals.",
        "name": "Utils",
        "longname": "Utils",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                286,
                2982
            ],
            "filename": "utils.js",
            "lineno": 9,
            "columnno": 6,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003283",
                "name": "Utils",
                "type": "ObjectExpression",
                "value": "{\"findInTree\":\"\",\"extend\":\"\",\"debounce\":\"\",\"escapeHTML\":\"\",\"className\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "Utils",
        "longname": "Utils",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\r\n     * Finds a value, subobject, or array from a tree that matches a specific filter. This is a DFS.\r\n     * @param {object} tree Tree that should be walked\r\n     * @param {callable} searchFilter Filter to check against each object and subobject\r\n     * @param {object} options Additional options to customize the search\r\n     * @param {Array<string>|null} [options.walkable=null] Array of strings to use as keys that are allowed to be walked on. Null value indicates all keys are walkable\r\n     * @param {Array<string>} [options.ignore=[]] Array of strings to use as keys to exclude from the search, most helpful when `walkable = null`.\r\n     */",
        "meta": {
            "range": [
                958,
                1078
            ],
            "filename": "utils.js",
            "lineno": 18,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003286",
                "name": "findInTree",
                "type": "FunctionExpression"
            }
        },
        "description": "Finds a value, subobject, or array from a tree that matches a specific filter. This is a DFS.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Tree that should be walked",
                "name": "tree"
            },
            {
                "type": {
                    "names": [
                        "callable"
                    ]
                },
                "description": "Filter to check against each object and subobject",
                "name": "searchFilter"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Additional options to customize the search",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>",
                        "null"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "description": "Array of strings to use as keys that are allowed to be walked on. Null value indicates all keys are walkable",
                "name": "options.walkable"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "Array of strings to use as keys to exclude from the search, most helpful when `walkable = null`.",
                "name": "options.ignore"
            }
        ],
        "name": "findInTree",
        "longname": "Utils.findInTree",
        "kind": "function",
        "memberof": "Utils",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * Deep extends an object with a set of other objects. Objects later in the list\r\n     * of `extenders` have priority, that is to say if one sets a key to be a primitive,\r\n     * it will be overwritten with the next one with the same key. If it is an object,\r\n     * and the keys match, the object is extended. This happens recursively.\r\n     * @param {object} extendee - Object to be extended\r\n     * @param {...object} extenders - Objects to extend with\r\n     * @returns {object} - A reference to `extendee`\r\n     */",
        "meta": {
            "range": [
                1620,
                1717
            ],
            "filename": "utils.js",
            "lineno": 31,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003302",
                "name": "extend",
                "type": "FunctionExpression"
            }
        },
        "description": "Deep extends an object with a set of other objects. Objects later in the list\rof `extenders` have priority, that is to say if one sets a key to be a primitive,\rit will be overwritten with the next one with the same key. If it is an object,\rand the keys match, the object is extended. This happens recursively.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object to be extended",
                "name": "extendee"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "variable": true,
                "description": "Objects to extend with",
                "name": "extenders"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "- A reference to `extendee`"
            }
        ],
        "name": "extend",
        "longname": "Utils.extend",
        "kind": "function",
        "memberof": "Utils",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * Returns a function, that, as long as it continues to be invoked, will not\r\n     * be triggered. The function will be called after it stops being called for\r\n     * N milliseconds.\r\n     * \r\n     * Adapted from the version by David Walsh (https://davidwalsh.name/javascript-debounce-function)\r\n     * \r\n     * @param {function} executor \r\n     * @param {number} delay \r\n     */",
        "meta": {
            "range": [
                2120,
                2207
            ],
            "filename": "utils.js",
            "lineno": 45,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003316",
                "name": "debounce",
                "type": "FunctionExpression"
            }
        },
        "description": "Returns a function, that, as long as it continues to be invoked, will not\rbe triggered. The function will be called after it stops being called for\rN milliseconds.\r\rAdapted from the version by David Walsh (https://davidwalsh.name/javascript-debounce-function)",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "executor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "delay"
            }
        ],
        "name": "debounce",
        "longname": "Utils.debounce",
        "kind": "function",
        "memberof": "Utils",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * Takes a string of html and escapes it using the brower's own escaping mechanism.\r\n     * @param {String} html - html to be escaped\r\n     */",
        "meta": {
            "range": [
                2373,
                2442
            ],
            "filename": "utils.js",
            "lineno": 53,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003328",
                "name": "escapeHTML",
                "type": "FunctionExpression"
            }
        },
        "description": "Takes a string of html and escapes it using the brower's own escaping mechanism.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "html to be escaped",
                "name": "html"
            }
        ],
        "name": "escapeHTML",
        "longname": "Utils.escapeHTML",
        "kind": "function",
        "memberof": "Utils",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * Builds a classname string from any number of arguments. This includes arrays and objects.\r\n     * When given an array all values from the array are added to the list.\r\n     * When given an object they keys are added as the classnames if the value is truthy.\r\n     * Copyright (c) 2018 Jed Watson https://github.com/JedWatson/classnames MIT License\r\n     * @param {...Any} argument - anything that should be used to add classnames.\r\n     */",
        "meta": {
            "range": [
                2908,
                2979
            ],
            "filename": "utils.js",
            "lineno": 64,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003338",
                "name": "className",
                "type": "FunctionExpression"
            }
        },
        "description": "Builds a classname string from any number of arguments. This includes arrays and objects.\rWhen given an array all values from the array are added to the list.\rWhen given an object they keys are added as the classnames if the value is truthy.\rCopyright (c) 2018 Jed Watson https://github.com/JedWatson/classnames MIT License",
        "params": [
            {
                "type": {
                    "names": [
                        "Any"
                    ]
                },
                "variable": true,
                "description": "anything that should be used to add classnames.",
                "name": "argument"
            }
        ],
        "name": "className",
        "longname": "Utils.className",
        "kind": "function",
        "memberof": "Utils",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3012,
                3033
            ],
            "filename": "utils.js",
            "lineno": 71,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003354",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * `Webpack` is a utility class for getting internal webpack modules. Instance is accessible through the {@link BdApi}.\r\n * This is extremely useful for interacting with the internals of Discord.\r\n * @type Webpack\r\n * @summary {@link Webpack} is a utility class for getting internal webpack modules.\r\n * @name Webpack\r\n */",
        "meta": {
            "filename": "webpack.js",
            "lineno": 4,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`Webpack` is a utility class for getting internal webpack modules. Instance is accessible through the {@link BdApi}.\rThis is extremely useful for interacting with the internals of Discord.",
        "type": {
            "names": [
                "Webpack"
            ]
        },
        "summary": "{@link Webpack} is a utility class for getting internal webpack modules.",
        "name": "Webpack",
        "longname": "Webpack",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                434,
                6029
            ],
            "filename": "webpack.js",
            "lineno": 11,
            "columnno": 6,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003369",
                "name": "Webpack",
                "type": "ObjectExpression",
                "value": "{\"Filters\":\"\",\"getModule\":\"\",\"getBulk\":\"\",\"waitForModule\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "Webpack",
        "longname": "Webpack",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\r\n     * Series of {@link Filters} to be used for finding webpack modules.\r\n     * @type Filters\r\n     * @memberof Webpack\r\n     */",
        "meta": {
            "range": [
                593,
                2501
            ],
            "filename": "webpack.js",
            "lineno": 18,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003372",
                "name": "Filters",
                "type": "ObjectExpression",
                "value": "{\"byProps\":\"\",\"byPrototypeFields\":\"\",\"byRegex\":\"\",\"byStrings\":\"\",\"byDisplayName\":\"\",\"combine\":\"\"}"
            }
        },
        "description": "Series of {@link Filters} to be used for finding webpack modules.",
        "type": {
            "names": [
                "Filters"
            ]
        },
        "memberof": "Webpack",
        "name": "Filters",
        "longname": "Webpack.Filters",
        "kind": "member",
        "scope": "static"
    },
    {
        "comment": "/**\r\n         * Generates a function that filters by a set of properties.\r\n         * @param {...string} props List of property names\r\n         * @returns {function} A filter that checks for a set of properties\r\n         */",
        "meta": {
            "range": [
                846,
                896
            ],
            "filename": "webpack.js",
            "lineno": 24,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003374",
                "name": "byProps",
                "type": "FunctionExpression"
            }
        },
        "description": "Generates a function that filters by a set of properties.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "variable": true,
                "description": "List of property names",
                "name": "props"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A filter that checks for a set of properties"
            }
        ],
        "name": "byProps",
        "longname": "Webpack.Filters.byProps",
        "kind": "function",
        "memberof": "Webpack.Filters",
        "scope": "static"
    },
    {
        "comment": "/**\r\n         * Generates a function that filters by a set of properties on the object's prototype.\r\n         * @param {...string} props List of property names\r\n         * @returns {function} A filter that checks for a set of properties on the object's prototype.\r\n         */",
        "meta": {
            "range": [
                1195,
                1265
            ],
            "filename": "webpack.js",
            "lineno": 31,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003385",
                "name": "byPrototypeFields",
                "type": "FunctionExpression"
            }
        },
        "description": "Generates a function that filters by a set of properties on the object's prototype.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "variable": true,
                "description": "List of property names",
                "name": "props"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A filter that checks for a set of properties on the object's prototype."
            }
        ],
        "name": "byPrototypeFields",
        "longname": "Webpack.Filters.byPrototypeFields",
        "kind": "function",
        "memberof": "Webpack.Filters",
        "scope": "static"
    },
    {
        "comment": "/**\r\n         * Generates a function that filters by a regex.\r\n         * @param {RegExp} search A RegExp to check on the module\r\n         * @param {function} filter Additional filter\r\n         * @returns {function} A filter that checks for a regex match\r\n         */",
        "meta": {
            "range": [
                1555,
                1602
            ],
            "filename": "webpack.js",
            "lineno": 39,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003396",
                "name": "byRegex",
                "type": "FunctionExpression"
            }
        },
        "description": "Generates a function that filters by a regex.",
        "params": [
            {
                "type": {
                    "names": [
                        "RegExp"
                    ]
                },
                "description": "A RegExp to check on the module",
                "name": "search"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Additional filter",
                "name": "filter"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A filter that checks for a regex match"
            }
        ],
        "name": "byRegex",
        "longname": "Webpack.Filters.byRegex",
        "kind": "function",
        "memberof": "Webpack.Filters",
        "scope": "static"
    },
    {
        "comment": "/**\r\n         * Generates a function that filters by strings.\r\n         * @param {...String} strings A list of strings\r\n         * @returns {function} A filter that checks for a set of strings\r\n         */",
        "meta": {
            "range": [
                1830,
                1891
            ],
            "filename": "webpack.js",
            "lineno": 46,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003406",
                "name": "byStrings",
                "type": "FunctionExpression"
            }
        },
        "description": "Generates a function that filters by strings.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "variable": true,
                "description": "A list of strings",
                "name": "strings"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A filter that checks for a set of strings"
            }
        ],
        "name": "byStrings",
        "longname": "Webpack.Filters.byStrings",
        "kind": "function",
        "memberof": "Webpack.Filters",
        "scope": "static"
    },
    {
        "comment": "/**\r\n         * Generates a function that filters by the `displayName` property.\r\n         * @param {string} name Name the module should have\r\n         * @returns {function} A filter that checks for a `displayName` match\r\n         */",
        "meta": {
            "range": [
                2147,
                2204
            ],
            "filename": "webpack.js",
            "lineno": 53,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003418",
                "name": "byDisplayName",
                "type": "FunctionExpression"
            }
        },
        "description": "Generates a function that filters by the `displayName` property.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name the module should have",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A filter that checks for a `displayName` match"
            }
        ],
        "name": "byDisplayName",
        "longname": "Webpack.Filters.byDisplayName",
        "kind": "function",
        "memberof": "Webpack.Filters",
        "scope": "static"
    },
    {
        "comment": "/**\r\n         * Generates a combined function from a list of filters.\r\n         * @param {...function} filters A list of filters\r\n         * @returns {function} Combinatory filter of all arguments\r\n         */",
        "meta": {
            "range": [
                2436,
                2493
            ],
            "filename": "webpack.js",
            "lineno": 60,
            "columnno": 8,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003428",
                "name": "combine",
                "type": "FunctionExpression"
            }
        },
        "description": "Generates a combined function from a list of filters.",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "variable": true,
                "description": "A list of filters",
                "name": "filters"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Combinatory filter of all arguments"
            }
        ],
        "name": "combine",
        "longname": "Webpack.Filters.combine",
        "kind": "function",
        "memberof": "Webpack.Filters",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * Finds a module using a filter function.\r\n     * @memberof Webpack\r\n     * @param {function} filter A function to use to filter modules. It is given exports, module, and moduleID. Return `true` to signify match.\r\n     * @param {object} [options] Options to configure the search\r\n     * @param {Boolean} [options.first=true] Whether to return only the first matching module\r\n     * @param {Boolean} [options.defaultExport=true] Whether to return default export when matching the default export\r\n     * @param {Boolean} [options.searchExports=false] Whether to execute the filter on webpack exports\r\n     * @return {any}\r\n     */",
        "meta": {
            "range": [
                3154,
                3920
            ],
            "filename": "webpack.js",
            "lineno": 73,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003440",
                "name": "getModule",
                "type": "FunctionExpression"
            }
        },
        "description": "Finds a module using a filter function.",
        "memberof": "Webpack",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function to use to filter modules. It is given exports, module, and moduleID. Return `true` to signify match.",
                "name": "filter"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "Options to configure the search",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to return only the first matching module",
                "name": "options.first"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to return default export when matching the default export",
                "name": "options.defaultExport"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to execute the filter on webpack exports",
                "name": "options.searchExports"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                }
            }
        ],
        "name": "getModule",
        "longname": "Webpack.getModule",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * Finds multiple modules using multiple filters.\r\n     * @memberof Webpack\r\n     * @param {...object} queries Object representing the query to perform\r\n     * @param {Function} queries.filter A function to use to filter modules\r\n     * @param {Boolean} [queries.first=true] Whether to return only the first matching module\r\n     * @param {Boolean} [queries.defaultExport=true] Whether to return default export when matching the default export\r\n     * @param {Boolean} [queries.searchExports=false] Whether to execute the filter on webpack exports\r\n     * @return {any}\r\n     */",
        "meta": {
            "range": [
                4522,
                4586
            ],
            "filename": "webpack.js",
            "lineno": 90,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003520",
                "name": "getBulk",
                "type": "FunctionExpression"
            }
        },
        "description": "Finds multiple modules using multiple filters.",
        "memberof": "Webpack",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "variable": true,
                "description": "Object representing the query to perform",
                "name": "queries"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function to use to filter modules",
                "name": "queries.filter"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to return only the first matching module",
                "name": "queries.first"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to return default export when matching the default export",
                "name": "queries.defaultExport"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to execute the filter on webpack exports",
                "name": "queries.searchExports"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                }
            }
        ],
        "name": "getBulk",
        "longname": "Webpack.getBulk",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * Finds a module that is lazily loaded.\r\n     * @memberof Webpack\r\n     * @param {function} filter A function to use to filter modules. It is given exports. Return `true` to signify match.\r\n     * @param {object} [options] Options for configuring the listener\r\n     * @param {AbortSignal} [options.signal] AbortSignal of an AbortController to cancel the promise\r\n     * @param {Boolean} [options.defaultExport=true] Whether to return default export when matching the default export\r\n     * @param {Boolean} [options.searchExports=false] Whether to execute the filter on webpack exports\r\n     * @returns {Promise<any>}\r\n     */",
        "meta": {
            "range": [
                5237,
                6025
            ],
            "filename": "webpack.js",
            "lineno": 102,
            "columnno": 4,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003532",
                "name": "waitForModule",
                "type": "FunctionExpression"
            }
        },
        "description": "Finds a module that is lazily loaded.",
        "memberof": "Webpack",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function to use to filter modules. It is given exports. Return `true` to signify match.",
                "name": "filter"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "Options for configuring the listener",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "AbortSignal"
                    ]
                },
                "optional": true,
                "description": "AbortSignal of an AbortController to cancel the promise",
                "name": "options.signal"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to return default export when matching the default export",
                "name": "options.defaultExport"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to execute the filter on webpack exports",
                "name": "options.searchExports"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<any>"
                    ]
                }
            }
        ],
        "name": "waitForModule",
        "longname": "Webpack.waitForModule",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6094,
                6117
            ],
            "filename": "webpack.js",
            "lineno": 113,
            "columnno": 0,
            "path": "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003626",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api\\addonapi.js",
            "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api\\contextmenu.js",
            "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api\\data.js",
            "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api\\dom.js",
            "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api\\index.js",
            "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api\\legacy.js",
            "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api\\patcher.js",
            "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api\\reactutils.js",
            "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api\\ui.js",
            "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api\\utils.js",
            "Z:\\Programming\\BetterDiscordStuff\\BetterDiscord\\renderer\\src\\modules\\api\\webpack.js"
        ]
    }
]
