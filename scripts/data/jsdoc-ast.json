[
    {
        "comment": "/**\n * `AddonAPI` is a utility class for working with plugins and themes. Instances are accessible through the {@link BdApi}.\n * @name AddonAPI\n */",
        "meta": {
            "filename": "addonapi.js",
            "lineno": 1,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`AddonAPI` is a utility class for working with plugins and themes. Instances are accessible through the {@link BdApi}.",
        "name": "AddonAPI",
        "longname": "AddonAPI",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                149,
                1714
            ],
            "filename": "addonapi.js",
            "lineno": 5,
            "columnno": 1,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000002",
                "name": "AddonAPI",
                "type": "ClassDeclaration",
                "paramnames": [
                    "manager"
                ]
            }
        },
        "undocumented": true,
        "name": "AddonAPI",
        "longname": "AddonAPI",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                170,
                179
            ],
            "filename": "addonapi.js",
            "lineno": 6,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000005",
                "name": "manager",
                "type": "ClassPrivateProperty"
            }
        },
        "undocumented": true,
        "name": "manager",
        "longname": "AddonAPI#manager",
        "kind": "member",
        "memberof": "AddonAPI",
        "scope": "instance",
        "access": "private"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                185,
                232
            ],
            "filename": "addonapi.js",
            "lineno": 8,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000006",
                "name": "AddonAPI",
                "type": "MethodDefinition",
                "paramnames": [
                    "manager"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "AddonAPI",
        "longname": "AddonAPI",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                207,
                230
            ],
            "filename": "addonapi.js",
            "lineno": 8,
            "columnno": 26,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000012",
                "name": "this.",
                "type": "Identifier",
                "value": "manager",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "AddonAPI",
        "longname": "AddonAPI.AddonAPI",
        "kind": "member",
        "memberof": "AddonAPI",
        "scope": "static"
    },
    {
        "comment": "/**\n     * The path to the addon folder.\n     * @type string\n     */",
        "meta": {
            "range": [
                311,
                359
            ],
            "filename": "addonapi.js",
            "lineno": 14,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000018",
                "name": "AddonAPI#folder",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "The path to the addon folder.",
        "type": {
            "names": [
                "string"
            ]
        },
        "name": "folder",
        "longname": "AddonAPI#folder",
        "kind": "member",
        "memberof": "AddonAPI",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n     * Determines if a particular addon is enabled.\n     * @param {string} idOrFile Addon ID or filename\n     * @returns {boolean}\n     */",
        "meta": {
            "range": [
                512,
                575
            ],
            "filename": "addonapi.js",
            "lineno": 21,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000029",
                "name": "AddonAPI#isEnabled",
                "type": "MethodDefinition",
                "paramnames": [
                    "idOrFile"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Determines if a particular addon is enabled.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Addon ID or filename",
                "name": "idOrFile"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "name": "isEnabled",
        "longname": "AddonAPI#isEnabled",
        "kind": "function",
        "memberof": "AddonAPI",
        "scope": "instance"
    },
    {
        "comment": "/**\n     * Enables the given addon.\n     * @param {string} idOrFile Addon ID or filename\n     */",
        "meta": {
            "range": [
                682,
                746
            ],
            "filename": "addonapi.js",
            "lineno": 27,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000043",
                "name": "AddonAPI#enable",
                "type": "MethodDefinition",
                "paramnames": [
                    "idOrAddon"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Enables the given addon.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Addon ID or filename",
                "name": "idOrFile"
            }
        ],
        "name": "enable",
        "longname": "AddonAPI#enable",
        "kind": "function",
        "memberof": "AddonAPI",
        "scope": "instance"
    },
    {
        "comment": "/**\n     * Disables the given addon.\n     * @param {string} idOrFile Addon ID or filename\n     */",
        "meta": {
            "range": [
                854,
                920
            ],
            "filename": "addonapi.js",
            "lineno": 33,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000057",
                "name": "AddonAPI#disable",
                "type": "MethodDefinition",
                "paramnames": [
                    "idOrAddon"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Disables the given addon.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Addon ID or filename",
                "name": "idOrFile"
            }
        ],
        "name": "disable",
        "longname": "AddonAPI#disable",
        "kind": "function",
        "memberof": "AddonAPI",
        "scope": "instance"
    },
    {
        "comment": "/**\n     * Toggles if a particular addon is enabled.\n     * @param {string} idOrFile Addon ID or filename\n     */",
        "meta": {
            "range": [
                1044,
                1108
            ],
            "filename": "addonapi.js",
            "lineno": 39,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000071",
                "name": "AddonAPI#toggle",
                "type": "MethodDefinition",
                "paramnames": [
                    "idOrAddon"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Toggles if a particular addon is enabled.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Addon ID or filename",
                "name": "idOrFile"
            }
        ],
        "name": "toggle",
        "longname": "AddonAPI#toggle",
        "kind": "function",
        "memberof": "AddonAPI",
        "scope": "instance"
    },
    {
        "comment": "/**\n     * Reloads if a particular addon is enabled.\n     * @param {string} idOrFile Addon ID or filename\n     */",
        "meta": {
            "range": [
                1232,
                1308
            ],
            "filename": "addonapi.js",
            "lineno": 45,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000085",
                "name": "AddonAPI#reload",
                "type": "MethodDefinition",
                "paramnames": [
                    "idOrFileOrAddon"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Reloads if a particular addon is enabled.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Addon ID or filename",
                "name": "idOrFile"
            }
        ],
        "name": "reload",
        "longname": "AddonAPI#reload",
        "kind": "function",
        "memberof": "AddonAPI",
        "scope": "instance"
    },
    {
        "comment": "/**\n     * Gets a particular addon.\n     * @param {string} idOrFile Addon ID or filename\n     * @returns {object} Addon instance\n     */",
        "meta": {
            "range": [
                1455,
                1511
            ],
            "filename": "addonapi.js",
            "lineno": 52,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000099",
                "name": "AddonAPI#get",
                "type": "MethodDefinition",
                "paramnames": [
                    "idOrFile"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Gets a particular addon.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Addon ID or filename",
                "name": "idOrFile"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Addon instance"
            }
        ],
        "name": "get",
        "longname": "AddonAPI#get",
        "kind": "function",
        "memberof": "AddonAPI",
        "scope": "instance"
    },
    {
        "comment": "/**\n     * Gets all addons of this type.\n     * @returns {Array<object>} Array of all addon instances\n     */",
        "meta": {
            "range": [
                1631,
                1712
            ],
            "filename": "addonapi.js",
            "lineno": 58,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000113",
                "name": "AddonAPI#getAll",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Gets all addons of this type.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                },
                "description": "Array of all addon instances"
            }
        ],
        "name": "getAll",
        "longname": "AddonAPI#getAll",
        "kind": "function",
        "memberof": "AddonAPI",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1777,
                1801
            ],
            "filename": "addonapi.js",
            "lineno": 64,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000153",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                179,
                202
            ],
            "filename": "contextmenu.js",
            "lineno": 7,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000174",
                "name": "startupComplete",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "startupComplete",
        "longname": "startupComplete",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                213,
                274
            ],
            "filename": "contextmenu.js",
            "lineno": 9,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000178",
                "name": "ModulesBundle",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ModulesBundle",
        "longname": "ModulesBundle",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                283,
                604
            ],
            "filename": "contextmenu.js",
            "lineno": 10,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000187",
                "name": "MenuComponents",
                "type": "ObjectExpression",
                "value": "{\"Separator\":\"\",\"CheckboxItem\":\"\",\"RadioItem\":\"\",\"ControlItem\":\"\",\"Group\":\"\",\"Item\":\"\",\"Menu\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "MenuComponents",
        "longname": "MenuComponents",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                307,
                346
            ],
            "filename": "contextmenu.js",
            "lineno": 11,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000190",
                "name": "Separator",
                "type": "ChainExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Separator",
        "longname": "MenuComponents.Separator",
        "kind": "member",
        "memberof": "MenuComponents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                353,
                398
            ],
            "filename": "contextmenu.js",
            "lineno": 12,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000192",
                "name": "CheckboxItem",
                "type": "ChainExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "CheckboxItem",
        "longname": "MenuComponents.CheckboxItem",
        "kind": "member",
        "memberof": "MenuComponents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                405,
                444
            ],
            "filename": "contextmenu.js",
            "lineno": 13,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000194",
                "name": "RadioItem",
                "type": "ChainExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "RadioItem",
        "longname": "MenuComponents.RadioItem",
        "kind": "member",
        "memberof": "MenuComponents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                451,
                494
            ],
            "filename": "contextmenu.js",
            "lineno": 14,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000196",
                "name": "ControlItem",
                "type": "ChainExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ControlItem",
        "longname": "MenuComponents.ControlItem",
        "kind": "member",
        "memberof": "MenuComponents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                501,
                532
            ],
            "filename": "contextmenu.js",
            "lineno": 15,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000198",
                "name": "Group",
                "type": "ChainExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Group",
        "longname": "MenuComponents.Group",
        "kind": "member",
        "memberof": "MenuComponents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                539,
                568
            ],
            "filename": "contextmenu.js",
            "lineno": 16,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000200",
                "name": "Item",
                "type": "ChainExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Item",
        "longname": "MenuComponents.Item",
        "kind": "member",
        "memberof": "MenuComponents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                575,
                600
            ],
            "filename": "contextmenu.js",
            "lineno": 17,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000202",
                "name": "Menu",
                "type": "ChainExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "Menu",
        "longname": "MenuComponents.Menu",
        "kind": "member",
        "memberof": "MenuComponents",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                609,
                670
            ],
            "filename": "contextmenu.js",
            "lineno": 20,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000205",
                "name": "startupComplete",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "startupComplete",
        "longname": "startupComplete",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                681,
                1737
            ],
            "filename": "contextmenu.js",
            "lineno": 22,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000219",
                "name": "ContextMenuActions",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ContextMenuActions",
        "longname": "ContextMenuActions",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                722,
                730
            ],
            "filename": "contextmenu.js",
            "lineno": 23,
            "columnno": 10,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000225",
                "name": "out",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "out",
        "longname": "<anonymous>~out",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                760,
                924
            ],
            "filename": "contextmenu.js",
            "lineno": 26,
            "columnno": 14,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000231",
                "name": "ActionsModule",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ActionsModule",
        "longname": "<anonymous>~ActionsModule",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                902,
                922
            ],
            "filename": "contextmenu.js",
            "lineno": 26,
            "columnno": 156,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000243",
                "name": "searchExports",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "searchExports",
        "longname": "searchExports",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                948,
                951
            ],
            "filename": "contextmenu.js",
            "lineno": 28,
            "columnno": 19,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000247",
                "name": "key"
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1083,
                1124
            ],
            "filename": "contextmenu.js",
            "lineno": 30,
            "columnno": 16,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000268",
                "name": "out.closeContextMenu",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "ActionsModule[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "closeContextMenu",
        "longname": "<anonymous>~out.closeContextMenu",
        "kind": "member",
        "memberof": "<anonymous>~out",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1236,
                1276
            ],
            "filename": "contextmenu.js",
            "lineno": 33,
            "columnno": 16,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000288",
                "name": "out.openContextMenu",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "ActionsModule[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "openContextMenu",
        "longname": "<anonymous>~out.openContextMenu",
        "kind": "member",
        "memberof": "<anonymous>~out",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1315,
                1424
            ],
            "filename": "contextmenu.js",
            "lineno": 37,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000296",
                "name": "startupComplete",
                "type": "LogicalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "startupComplete",
        "longname": "<anonymous>~startupComplete",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1463,
                1486
            ],
            "filename": "contextmenu.js",
            "lineno": 40,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000313",
                "name": "startupComplete",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "startupComplete",
        "longname": "<anonymous>~startupComplete",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1626,
                1652
            ],
            "filename": "contextmenu.js",
            "lineno": 44,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000331",
                "name": "closeContextMenu",
                "type": "ArrowFunctionExpression"
            }
        },
        "undocumented": true,
        "name": "closeContextMenu",
        "longname": "closeContextMenu",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1667,
                1692
            ],
            "filename": "contextmenu.js",
            "lineno": 45,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000334",
                "name": "openContextMenu",
                "type": "ArrowFunctionExpression"
            }
        },
        "undocumented": true,
        "name": "openContextMenu",
        "longname": "openContextMenu",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1742,
                5014
            ],
            "filename": "contextmenu.js",
            "lineno": 52,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000339",
                "name": "MenuPatcher",
                "type": "ClassDeclaration",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "MenuPatcher",
        "longname": "MenuPatcher",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1767,
                1800
            ],
            "filename": "contextmenu.js",
            "lineno": 53,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000342",
                "name": "MAX_PATCH_ITERATIONS",
                "type": "ClassProperty"
            }
        },
        "undocumented": true,
        "name": "MAX_PATCH_ITERATIONS",
        "longname": "MenuPatcher#MAX_PATCH_ITERATIONS",
        "kind": "member",
        "memberof": "MenuPatcher",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1806,
                1826
            ],
            "filename": "contextmenu.js",
            "lineno": 54,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000344",
                "name": "patches",
                "type": "ClassProperty"
            }
        },
        "undocumented": true,
        "name": "patches",
        "longname": "MenuPatcher#patches",
        "kind": "member",
        "memberof": "MenuPatcher",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1832,
                1866
            ],
            "filename": "contextmenu.js",
            "lineno": 55,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000346",
                "name": "subPatches",
                "type": "ClassProperty"
            }
        },
        "undocumented": true,
        "name": "subPatches",
        "longname": "MenuPatcher#subPatches",
        "kind": "member",
        "memberof": "MenuPatcher",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1874,
                3171
            ],
            "filename": "contextmenu.js",
            "lineno": 57,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000349",
                "name": "MenuPatcher.initialize",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "initialize",
        "longname": "MenuPatcher.initialize",
        "kind": "function",
        "memberof": "MenuPatcher",
        "scope": "static",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2045,
                2051
            ],
            "filename": "contextmenu.js",
            "lineno": 60,
            "columnno": 15,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000366",
                "name": "module",
                "type": "Identifier",
                "value": "module"
            }
        },
        "undocumented": true,
        "name": "module",
        "longname": "module",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2053,
                2056
            ],
            "filename": "contextmenu.js",
            "lineno": 60,
            "columnno": 23,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000368",
                "name": "key",
                "type": "Identifier",
                "value": "key"
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "key",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2088,
                2262
            ],
            "filename": "contextmenu.js",
            "lineno": 61,
            "columnno": 18,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000374",
                "name": "foundModule",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "foundModule",
        "longname": "<anonymous>~foundModule",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2240,
                2260
            ],
            "filename": "contextmenu.js",
            "lineno": 61,
            "columnno": 170,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000407",
                "name": "searchExports",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "searchExports",
        "longname": "searchExports",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2283,
                2357
            ],
            "filename": "contextmenu.js",
            "lineno": 62,
            "columnno": 18,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000410",
                "name": "foundKey",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "foundKey",
        "longname": "<anonymous>~foundKey",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2382,
                2401
            ],
            "filename": "contextmenu.js",
            "lineno": 64,
            "columnno": 20,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000431",
                "name": "module",
                "type": "Identifier",
                "value": "foundModule"
            }
        },
        "undocumented": true,
        "name": "module",
        "longname": "module",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2403,
                2416
            ],
            "filename": "contextmenu.js",
            "lineno": 64,
            "columnno": 41,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000433",
                "name": "key",
                "type": "Identifier",
                "value": "foundKey"
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "key",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2540,
                2568
            ],
            "filename": "contextmenu.js",
            "lineno": 68,
            "columnno": 18,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000448",
                "name": "promise",
                "type": "MemberExpression",
                "value": "methodArguments[1]"
            }
        },
        "undocumented": true,
        "name": "promise",
        "longname": "<anonymous>~promise",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2583,
                3150
            ],
            "filename": "contextmenu.js",
            "lineno": 69,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000454",
                "name": "methodArguments[1]",
                "type": "FunctionExpression",
                "paramnames": []
            },
            "vars": {
                "render": "methodArguments[1]~render",
                "": null
            }
        },
        "undocumented": true,
        "name": "methodArguments[1]",
        "longname": "methodArguments[1]",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2647,
                2692
            ],
            "filename": "contextmenu.js",
            "lineno": 70,
            "columnno": 22,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000461",
                "name": "render",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "render",
        "longname": "methodArguments[1]~render",
        "kind": "constant",
        "memberof": "methodArguments[1]",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2758,
                2777
            ],
            "filename": "contextmenu.js",
            "lineno": 73,
            "columnno": 26,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000475",
                "name": "res",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "res",
        "longname": "<anonymous>~res",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3179,
                4426
            ],
            "filename": "contextmenu.js",
            "lineno": 88,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000510",
                "name": "MenuPatcher.patchRecursive",
                "type": "MethodDefinition",
                "paramnames": [
                    "target",
                    "method",
                    "iteration"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "patchRecursive",
        "longname": "MenuPatcher.patchRecursive",
        "kind": "function",
        "memberof": "MenuPatcher",
        "scope": "static",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3312,
                4375
            ],
            "filename": "contextmenu.js",
            "lineno": 91,
            "columnno": 14,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000527",
                "name": "proxyFunction",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "proxyFunction",
        "longname": "<anonymous>~proxyFunction",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3395,
                3428
            ],
            "filename": "contextmenu.js",
            "lineno": 92,
            "columnno": 18,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000543",
                "name": "originalFunction",
                "type": "MemberExpression",
                "value": "target[undefined]"
            }
        },
        "undocumented": true,
        "name": "originalFunction",
        "longname": "<anonymous>~originalFunction",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3449,
                3468
            ],
            "filename": "contextmenu.js",
            "lineno": 93,
            "columnno": 18,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000549",
                "name": "depth",
                "type": "UpdateExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "depth",
        "longname": "<anonymous>~depth",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3483,
                4161
            ],
            "filename": "contextmenu.js",
            "lineno": 94,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000553",
                "name": "patch",
                "type": "FunctionDeclaration",
                "paramnames": []
            },
            "vars": {
                "res": "<anonymous>~patch~res",
                "layer": "<anonymous>~patch~layer"
            }
        },
        "undocumented": true,
        "name": "patch",
        "longname": "<anonymous>~patch",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3525,
                3570
            ],
            "filename": "contextmenu.js",
            "lineno": 95,
            "columnno": 22,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000557",
                "name": "res",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "res",
        "longname": "<anonymous>~patch~res",
        "kind": "constant",
        "memberof": "<anonymous>~patch",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3881,
                3934
            ],
            "filename": "contextmenu.js",
            "lineno": 103,
            "columnno": 26,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000593",
                "name": "layer",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "layer",
        "longname": "<anonymous>~patch~layer",
        "kind": "constant",
        "memberof": "<anonymous>~patch",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4177,
                4219
            ],
            "filename": "contextmenu.js",
            "lineno": 113,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000624",
                "name": "patch._originalFunction",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "originalFunction",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_originalFunction",
        "longname": "<anonymous>~patch._originalFunction",
        "kind": "member",
        "memberof": "<anonymous>~patch",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4388,
                4418
            ],
            "filename": "contextmenu.js",
            "lineno": 120,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000648",
                "name": "target[undefined]",
                "type": "Identifier",
                "value": "proxyFunction",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "target[undefined]",
        "longname": "target[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4434,
                4796
            ],
            "filename": "contextmenu.js",
            "lineno": 123,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000653",
                "name": "MenuPatcher.runPatches",
                "type": "MethodDefinition",
                "paramnames": [
                    "id",
                    "res",
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "runPatches",
        "longname": "MenuPatcher.runPatches",
        "kind": "function",
        "memberof": "MenuPatcher",
        "scope": "static",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4532,
                4537
            ],
            "filename": "contextmenu.js",
            "lineno": 126,
            "columnno": 19,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000670",
                "name": "patch"
            }
        },
        "undocumented": true,
        "name": "patch",
        "longname": "<anonymous>~patch",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4804,
                4921
            ],
            "filename": "contextmenu.js",
            "lineno": 136,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000698",
                "name": "MenuPatcher.patch",
                "type": "MethodDefinition",
                "paramnames": [
                    "id",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "patch",
        "longname": "MenuPatcher.patch",
        "kind": "function",
        "memberof": "MenuPatcher",
        "scope": "static",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4842,
                4872
            ],
            "filename": "contextmenu.js",
            "lineno": 137,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000705",
                "name": "this.patches[undefined]",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "patches[undefined]",
        "longname": "MenuPatcher#patches[undefined]",
        "kind": "member",
        "memberof": "MenuPatcher",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4929,
                5011
            ],
            "filename": "contextmenu.js",
            "lineno": 141,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000723",
                "name": "MenuPatcher.unpatch",
                "type": "MethodDefinition",
                "paramnames": [
                    "id",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "unpatch",
        "longname": "MenuPatcher.unpatch",
        "kind": "function",
        "memberof": "MenuPatcher",
        "scope": "static",
        "params": []
    },
    {
        "comment": "/**\r\n * `ContextMenu` is a module to help patch and create context menus. Instance is accessible through the {@link BdApi}.\r\n * @type ContextMenu\r\n * @summary {@link ContextMenu} is a utility class for interacting with React internals.\r\n * @name ContextMenu\r\n */",
        "meta": {
            "filename": "contextmenu.js",
            "lineno": 147,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`ContextMenu` is a module to help patch and create context menus. Instance is accessible through the {@link BdApi}.",
        "type": {
            "names": [
                "ContextMenu"
            ]
        },
        "summary": "{@link ContextMenu} is a utility class for interacting with React internals.",
        "name": "ContextMenu",
        "longname": "ContextMenu",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5284,
                12324
            ],
            "filename": "contextmenu.js",
            "lineno": 153,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000731",
                "name": "ContextMenu",
                "type": "ClassDeclaration",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ContextMenu",
        "longname": "ContextMenu",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "/**\r\n     * Allows you to patch a given context menu. Acts as a wrapper around the `Patcher`.\r\n     * \r\n     * @param {string} navId Discord's internal `navId` used to identify context menus\r\n     * @param {function} callback Callback function that accepts the React render tree\r\n     * @returns {function} A function that automatically unpatches\r\n     */",
        "meta": {
            "range": [
                5672,
                5810
            ],
            "filename": "contextmenu.js",
            "lineno": 162,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000734",
                "name": "ContextMenu#patch",
                "type": "MethodDefinition",
                "paramnames": [
                    "navId",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Allows you to patch a given context menu. Acts as a wrapper around the `Patcher`.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Discord's internal `navId` used to identify context menus",
                "name": "navId"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Callback function that accepts the React render tree",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function that automatically unpatches"
            }
        ],
        "name": "patch",
        "longname": "ContextMenu#patch",
        "kind": "function",
        "memberof": "ContextMenu",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Allows you to remove the patch added to a given context menu.\r\n     * \r\n     * @param {string} navId The original `navId` from patching\r\n     * @param {function} callback The original callback from patching\r\n     */",
        "meta": {
            "range": [
                6051,
                6131
            ],
            "filename": "contextmenu.js",
            "lineno": 174,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000755",
                "name": "ContextMenu#unpatch",
                "type": "MethodDefinition",
                "paramnames": [
                    "navId",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Allows you to remove the patch added to a given context menu.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The original `navId` from patching",
                "name": "navId"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The original callback from patching",
                "name": "callback"
            }
        ],
        "name": "unpatch",
        "longname": "ContextMenu#unpatch",
        "kind": "function",
        "memberof": "ContextMenu",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Builds a single menu item. The only prop shown here is the type, the rest should\r\n     * match the actual component being built. View those to see what options exist\r\n     * for each, they often have less in common than you might think.\r\n     * \r\n     * @param {object} props Props used to build the item\r\n     * @param {string} [props.type=\"text\"] Type of the item, options: text, submenu, toggle, radio, custom, separator\r\n     * @returns {object} The created component\r\n     * \r\n     * @example\r\n     * // Creates a single menu item that prints \"MENU ITEM\" on click\r\n     * ContextMenu.buildItem({\r\n     *      label: \"Menu Item\",\r\n     *      action: () => {console.log(\"MENU ITEM\");}\r\n     * });\r\n     * \r\n     * @example\r\n     * // Creates a single toggle item that starts unchecked\r\n     * // and print the new value on every toggle\r\n     * ContextMenu.buildItem({\r\n     *      type: \"toggle\",\r\n     *      label: \"Item Toggle\",\r\n     *      checked: false,\r\n     *      action: (newValue) => {console.log(newValue);}\r\n     * });\r\n     */",
        "meta": {
            "range": [
                7203,
                8691
            ],
            "filename": "contextmenu.js",
            "lineno": 204,
            "columnno": 5,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000768",
                "name": "ContextMenu#buildItem",
                "type": "MethodDefinition",
                "paramnames": [
                    "props"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Builds a single menu item. The only prop shown here is the type, the rest should\rmatch the actual component being built. View those to see what options exist\rfor each, they often have less in common than you might think.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Props used to build the item",
                "name": "props"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"text\"",
                "description": "Type of the item, options: text, submenu, toggle, radio, custom, separator",
                "name": "props.type"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The created component"
            }
        ],
        "examples": [
            "// Creates a single menu item that prints \"MENU ITEM\" on click\rContextMenu.buildItem({\r     label: \"Menu Item\",\r     action: () => {console.log(\"MENU ITEM\");}\r});",
            "// Creates a single toggle item that starts unchecked\r// and print the new value on every toggle\rContextMenu.buildItem({\r     type: \"toggle\",\r     label: \"Item Toggle\",\r     checked: false,\r     action: (newValue) => {console.log(newValue);}\r});"
        ],
        "name": "buildItem",
        "longname": "ContextMenu#buildItem",
        "kind": "function",
        "memberof": "ContextMenu",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7238,
                7242
            ],
            "filename": "contextmenu.js",
            "lineno": 205,
            "columnno": 15,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000776",
                "name": "type",
                "type": "Identifier",
                "value": "type"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "type",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7357,
                7388
            ],
            "filename": "contextmenu.js",
            "lineno": 208,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000792",
                "name": "Component",
                "type": "MemberExpression",
                "value": "MenuComponents.Item"
            }
        },
        "undocumented": true,
        "name": "Component",
        "longname": "<anonymous>~Component",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7459,
                7527
            ],
            "filename": "contextmenu.js",
            "lineno": 210,
            "columnno": 33,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000808",
                "name": "props.children",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "children",
        "longname": "props.children",
        "kind": "member",
        "memberof": "props",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7612,
                7698
            ],
            "filename": "contextmenu.js",
            "lineno": 213,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000833",
                "name": "Component",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Component",
        "longname": "<anonymous>~Component",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7731,
                7759
            ],
            "filename": "contextmenu.js",
            "lineno": 214,
            "columnno": 30,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000850",
                "name": "props.checked",
                "type": "MemberExpression",
                "value": "props.active",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "checked",
        "longname": "props.checked",
        "kind": "member",
        "memberof": "props",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7825,
                7863
            ],
            "filename": "contextmenu.js",
            "lineno": 217,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000863",
                "name": "Component",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "MenuComponents.ControlItem",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Component",
        "longname": "<anonymous>~Component",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7900,
                7962
            ],
            "filename": "contextmenu.js",
            "lineno": 219,
            "columnno": 23,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000874",
                "name": "props.id",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "props.id",
        "kind": "member",
        "memberof": "props",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7991,
                8013
            ],
            "filename": "contextmenu.js",
            "lineno": 220,
            "columnno": 26,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000894",
                "name": "props.color",
                "type": "Literal",
                "value": "danger",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "color",
        "longname": "props.color",
        "kind": "member",
        "memberof": "props",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8060,
                8088
            ],
            "filename": "contextmenu.js",
            "lineno": 221,
            "columnno": 44,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000909",
                "name": "props.action",
                "type": "MemberExpression",
                "value": "props.onClick",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "action",
        "longname": "props.action",
        "kind": "member",
        "memberof": "props",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8099,
                8120
            ],
            "filename": "contextmenu.js",
            "lineno": 222,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000917",
                "name": "props.extended",
                "type": "Literal",
                "value": true,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "extended",
        "longname": "props.extended",
        "kind": "member",
        "memberof": "props",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8409,
                8438
            ],
            "filename": "contextmenu.js",
            "lineno": 228,
            "columnno": 18,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000940",
                "name": "originalAction",
                "type": "MemberExpression",
                "value": "props.action"
            }
        },
        "undocumented": true,
        "name": "originalAction",
        "longname": "<anonymous>~originalAction",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8453,
                8475
            ],
            "filename": "contextmenu.js",
            "lineno": 229,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000946",
                "name": "props.checked",
                "type": "Identifier",
                "value": "active",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "checked",
        "longname": "props.checked",
        "kind": "member",
        "memberof": "props",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8490,
                8607
            ],
            "filename": "contextmenu.js",
            "lineno": 230,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000952",
                "name": "props.action",
                "type": "FunctionExpression",
                "paramnames": [
                    "ev"
                ]
            }
        },
        "undocumented": true,
        "name": "action",
        "longname": "props.action",
        "kind": "function",
        "memberof": "props",
        "scope": "static"
    },
    {
        "comment": "/**\r\n     * Creates the all the items **and groups** of a context menu recursively.\r\n     * There is no hard limit to the number of groups within groups or number\r\n     * of items in a menu.\r\n     * \r\n     * @param {Array<object>} setup Array of item props used to build items. See {@link ContextMenu.buildItem}.\r\n     * @returns {Array<object>} Array of the created component\r\n     * \r\n     * @example\r\n     * // Creates a single item group item with a toggle item\r\n     * ContextMenu.buildMenuChildren([{\r\n     *      type: \"group\",\r\n     *      items: [{\r\n     *          type: \"toggle\",\r\n     *          label: \"Item Toggle\",\r\n     *          active: false,\r\n     *          action: (newValue) => {console.log(newValue);}\r\n     *      }]\r\n     * }]);\r\n     * \r\n     * @example\r\n     * // Creates two item groups with a single toggle item each\r\n     * ContextMenu.buildMenuChildren([{\r\n     *     type: \"group\",\r\n     *     items: [{\r\n     *         type: \"toggle\",\r\n     *         label: \"Item Toggle\",\r\n     *         active: false,\r\n     *         action: (newValue) => {\r\n     *             console.log(newValue);\r\n     *         }\r\n     *     }]\r\n     * }, {\r\n     *     type: \"group\",\r\n     *     items: [{\r\n     *         type: \"toggle\",\r\n     *         label: \"Item Toggle\",\r\n     *         active: false,\r\n     *         action: (newValue) => {\r\n     *             console.log(newValue);\r\n     *         }\r\n     *     }]\r\n     * }]);\r\n     */",
        "meta": {
            "range": [
                10159,
                10584
            ],
            "filename": "contextmenu.js",
            "lineno": 283,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000975",
                "name": "ContextMenu#buildMenuChildren",
                "type": "MethodDefinition",
                "paramnames": [
                    "setup"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Creates the all the items **and groups** of a context menu recursively.\rThere is no hard limit to the number of groups within groups or number\rof items in a menu.",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                },
                "description": "Array of item props used to build items. See {@link ContextMenu.buildItem}.",
                "name": "setup"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                },
                "description": "Array of the created component"
            }
        ],
        "examples": [
            "// Creates a single item group item with a toggle item\rContextMenu.buildMenuChildren([{\r     type: \"group\",\r     items: [{\r         type: \"toggle\",\r         label: \"Item Toggle\",\r         active: false,\r         action: (newValue) => {console.log(newValue);}\r     }]\r}]);",
            "// Creates two item groups with a single toggle item each\rContextMenu.buildMenuChildren([{\r    type: \"group\",\r    items: [{\r        type: \"toggle\",\r        label: \"Item Toggle\",\r        active: false,\r        action: (newValue) => {\r            console.log(newValue);\r        }\r    }]\r}, {\r    type: \"group\",\r    items: [{\r        type: \"toggle\",\r        label: \"Item Toggle\",\r        active: false,\r        action: (newValue) => {\r            console.log(newValue);\r        }\r    }]\r}]);"
        ],
        "name": "buildMenuChildren",
        "longname": "ContextMenu#buildMenuChildren",
        "kind": "function",
        "memberof": "ContextMenu",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10201,
                10325
            ],
            "filename": "contextmenu.js",
            "lineno": 284,
            "columnno": 14,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100000981",
                "name": "mapper",
                "type": "ArrowFunctionExpression"
            }
        },
        "undocumented": true,
        "name": "mapper",
        "longname": "<anonymous>~mapper",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10342,
                10526
            ],
            "filename": "contextmenu.js",
            "lineno": 288,
            "columnno": 14,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001003",
                "name": "buildGroup",
                "type": "FunctionExpression"
            },
            "vars": {
                "items": "<anonymous>~buildGroup~items",
                "": null
            }
        },
        "undocumented": true,
        "name": "buildGroup",
        "longname": "<anonymous>~buildGroup",
        "kind": "function",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10392,
                10438
            ],
            "filename": "contextmenu.js",
            "lineno": 289,
            "columnno": 18,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001009",
                "name": "items",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "items",
        "longname": "<anonymous>~buildGroup~items",
        "kind": "constant",
        "memberof": "<anonymous>~buildGroup",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\r\n     * Creates the menu *component* including the wrapping `ContextMenu`.\r\n     * Calls {@link ContextMenu.buildMenuChildren} under the covers.\r\n     * Used to call in combination with {@link ContextMenu.open}.\r\n     * \r\n     * @param {Array<object>} setup Array of item props used to build items. See {@link ContextMenu.buildMenuChildren}.\r\n     * @returns {function} The unique context menu component\r\n     */",
        "meta": {
            "range": [
                11014,
                11156
            ],
            "filename": "contextmenu.js",
            "lineno": 303,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001046",
                "name": "ContextMenu#buildMenu",
                "type": "MethodDefinition",
                "paramnames": [
                    "setup"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Creates the menu *component* including the wrapping `ContextMenu`.\rCalls {@link ContextMenu.buildMenuChildren} under the covers.\rUsed to call in combination with {@link ContextMenu.open}.",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                },
                "description": "Array of item props used to build items. See {@link ContextMenu.buildMenuChildren}.",
                "name": "setup"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The unique context menu component"
            }
        ],
        "name": "buildMenu",
        "longname": "ContextMenu#buildMenu",
        "kind": "function",
        "memberof": "ContextMenu",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Function that allows you to open an entire context menu. Recommended to build the menu with this module.\r\n     * \r\n     * @param {MouseEvent} event The context menu event. This can be emulated, requires target, and all X, Y locations.\r\n     * @param {function} menuComponent Component to render. This can be any React component or output of {@link ContextMenu.buildMenu}.\r\n     * @param {object} config Configuration/props for the context menu\r\n     * @param {string} [config.position=\"right\"] Default position for the menu, options: \"left\", \"right\"\r\n     * @param {string} [config.align=\"top\"] Default alignment for the menu, options: \"bottom\", \"top\"\r\n     * @param {function} [config.onClose] Function to run when the menu is closed\r\n     */",
        "meta": {
            "range": [
                11925,
                12187
            ],
            "filename": "contextmenu.js",
            "lineno": 317,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001069",
                "name": "ContextMenu#open",
                "type": "MethodDefinition",
                "paramnames": [
                    "event",
                    "menuComponent",
                    "config"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Function that allows you to open an entire context menu. Recommended to build the menu with this module.",
        "params": [
            {
                "type": {
                    "names": [
                        "MouseEvent"
                    ]
                },
                "description": "The context menu event. This can be emulated, requires target, and all X, Y locations.",
                "name": "event"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Component to render. This can be any React component or output of {@link ContextMenu.buildMenu}.",
                "name": "menuComponent"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Configuration/props for the context menu",
                "name": "config"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"right\"",
                "description": "Default position for the menu, options: \"left\", \"right\"",
                "name": "config.position"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"top\"",
                "description": "Default alignment for the menu, options: \"bottom\", \"top\"",
                "name": "config.align"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "Function to run when the menu is closed",
                "name": "config.onClose"
            }
        ],
        "name": "open",
        "longname": "ContextMenu#open",
        "kind": "function",
        "memberof": "ContextMenu",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12111,
                12155
            ],
            "filename": "contextmenu.js",
            "lineno": 319,
            "columnno": 76,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001098",
                "name": "onClose",
                "type": "MemberExpression",
                "value": "ContextMenuActions.closeContextMenu"
            }
        },
        "undocumented": true,
        "name": "onClose",
        "longname": "onClose",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\r\n     * Closes the current opened context menu immediately.\r\n     */",
        "meta": {
            "range": [
                12273,
                12321
            ],
            "filename": "contextmenu.js",
            "lineno": 326,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001103",
                "name": "ContextMenu#close",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Closes the current opened context menu immediately.",
        "name": "close",
        "longname": "ContextMenu#close",
        "kind": "function",
        "memberof": "ContextMenu",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12581,
                12608
            ],
            "filename": "contextmenu.js",
            "lineno": 340,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001151",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * `Data` is a simple utility class for the management of plugin data. An instance is available on {@link BdApi}.\n * @type Data\n * @summary {@link Data} is a simple utility class for the management of plugin data.\n * @name Data\n */",
        "meta": {
            "filename": "data.js",
            "lineno": 4,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`Data` is a simple utility class for the management of plugin data. An instance is available on {@link BdApi}.",
        "type": {
            "names": [
                "Data"
            ]
        },
        "summary": "{@link Data} is a simple utility class for the management of plugin data.",
        "name": "Data",
        "longname": "Data",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                282,
                1780
            ],
            "filename": "data.js",
            "lineno": 10,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001159",
                "name": "Data",
                "type": "ClassDeclaration",
                "paramnames": [
                    "callerName"
                ]
            }
        },
        "undocumented": true,
        "name": "Data",
        "longname": "Data",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                300,
                317
            ],
            "filename": "data.js",
            "lineno": 12,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001162",
                "name": "callerName",
                "type": "ClassPrivateProperty"
            }
        },
        "undocumented": true,
        "name": "callerName",
        "longname": "Data#callerName",
        "kind": "member",
        "memberof": "Data",
        "scope": "instance",
        "access": "private"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                323,
                426
            ],
            "filename": "data.js",
            "lineno": 14,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001164",
                "name": "Data",
                "type": "MethodDefinition",
                "paramnames": [
                    "callerName"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Data",
        "longname": "Data",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                390,
                419
            ],
            "filename": "data.js",
            "lineno": 16,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001174",
                "name": "this.",
                "type": "Identifier",
                "value": "callerName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Data",
        "longname": "Data.Data",
        "kind": "member",
        "memberof": "Data",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Saves JSON-serializable data.\n     * \n     * @param {string} pluginName Name of the plugin saving data\n     * @param {string} key Which piece of data to store\n     * @param {any} data The data to be saved\n     */",
        "meta": {
            "range": [
                660,
                897
            ],
            "filename": "data.js",
            "lineno": 26,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001180",
                "name": "Data#save",
                "type": "MethodDefinition",
                "paramnames": [
                    "pluginName",
                    "key",
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Saves JSON-serializable data.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the plugin saving data",
                "name": "pluginName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Which piece of data to store",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "The data to be saved",
                "name": "data"
            }
        ],
        "name": "save",
        "longname": "Data#save",
        "kind": "function",
        "memberof": "Data",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                734,
                744
            ],
            "filename": "data.js",
            "lineno": 28,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001194",
                "name": "data",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "key",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~data",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                758,
                774
            ],
            "filename": "data.js",
            "lineno": 29,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001198",
                "name": "key",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "pluginName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                788,
                817
            ],
            "filename": "data.js",
            "lineno": 30,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001202",
                "name": "pluginName",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pluginName",
        "longname": "<anonymous>~pluginName",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * Loads previously stored data.\n     * \n     * @param {string} pluginName Name of the plugin loading data\n     * @param {string} key Which piece of data to load\n     * @returns {any} The stored data\n     */",
        "meta": {
            "range": [
                1123,
                1324
            ],
            "filename": "data.js",
            "lineno": 42,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001216",
                "name": "Data#load",
                "type": "MethodDefinition",
                "paramnames": [
                    "pluginName",
                    "key"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Loads previously stored data.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the plugin loading data",
                "name": "pluginName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Which piece of data to load",
                "name": "key"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "The stored data"
            }
        ],
        "name": "load",
        "longname": "Data#load",
        "kind": "function",
        "memberof": "Data",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1191,
                1207
            ],
            "filename": "data.js",
            "lineno": 44,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001229",
                "name": "key",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "pluginName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1221,
                1250
            ],
            "filename": "data.js",
            "lineno": 45,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001233",
                "name": "pluginName",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pluginName",
        "longname": "<anonymous>~pluginName",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * Deletes a piece of stored data. This is different than saving `null` or `undefined`.\n     * \n     * @param {string} pluginName Name of the plugin deleting data\n     * @param {string} key Which piece of data to delete.\n     */",
        "meta": {
            "range": [
                1571,
                1777
            ],
            "filename": "data.js",
            "lineno": 56,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001246",
                "name": "Data#delete",
                "type": "MethodDefinition",
                "paramnames": [
                    "pluginName",
                    "key"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Deletes a piece of stored data. This is different than saving `null` or `undefined`.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the plugin deleting data",
                "name": "pluginName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Which piece of data to delete.",
                "name": "key"
            }
        ],
        "name": "delete",
        "longname": "Data#delete",
        "kind": "function",
        "memberof": "Data",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1641,
                1657
            ],
            "filename": "data.js",
            "lineno": 58,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001259",
                "name": "key",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "pluginName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "key",
        "longname": "<anonymous>~key",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1671,
                1700
            ],
            "filename": "data.js",
            "lineno": 59,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001263",
                "name": "pluginName",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pluginName",
        "longname": "<anonymous>~pluginName",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1834,
                1854
            ],
            "filename": "data.js",
            "lineno": 68,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001290",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * `DOM` is a simple utility class for dom manipulation. An instance is available on {@link BdApi}.\n * @type DOM\n * @summary {@link DOM} is a simple utility class for dom manipulation.\n * @name DOM\n */",
        "meta": {
            "filename": "dom.js",
            "lineno": 4,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`DOM` is a simple utility class for dom manipulation. An instance is available on {@link BdApi}.",
        "type": {
            "names": [
                "DOM"
            ]
        },
        "summary": "{@link DOM} is a simple utility class for dom manipulation.",
        "name": "DOM",
        "longname": "DOM",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                254,
                4182
            ],
            "filename": "dom.js",
            "lineno": 10,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001298",
                "name": "DOM",
                "type": "ClassDeclaration",
                "paramnames": [
                    "callerName"
                ]
            }
        },
        "undocumented": true,
        "name": "DOM",
        "longname": "DOM",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "/**\n     * Current width of the user's screen.\n     * @type {number}\n     */",
        "meta": {
            "range": [
                352,
                450
            ],
            "filename": "dom.js",
            "lineno": 16,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001301",
                "name": "DOM#screenWidth",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Current width of the user's screen.",
        "type": {
            "names": [
                "number"
            ]
        },
        "name": "screenWidth",
        "longname": "DOM#screenWidth",
        "kind": "member",
        "memberof": "DOM",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "/**\n     * Current height of the user's screen.\n     * @type {number}\n     */",
        "meta": {
            "range": [
                538,
                639
            ],
            "filename": "dom.js",
            "lineno": 22,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001320",
                "name": "DOM#screenHeight",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Current height of the user's screen.",
        "type": {
            "names": [
                "number"
            ]
        },
        "name": "screenHeight",
        "longname": "DOM#screenHeight",
        "kind": "member",
        "memberof": "DOM",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                645,
                662
            ],
            "filename": "dom.js",
            "lineno": 24,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001339",
                "name": "callerName",
                "type": "ClassPrivateProperty"
            }
        },
        "undocumented": true,
        "name": "callerName",
        "longname": "DOM#callerName",
        "kind": "member",
        "memberof": "DOM",
        "scope": "instance",
        "access": "private"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                668,
                771
            ],
            "filename": "dom.js",
            "lineno": 26,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001341",
                "name": "DOM",
                "type": "MethodDefinition",
                "paramnames": [
                    "callerName"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "DOM",
        "longname": "DOM",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                735,
                764
            ],
            "filename": "dom.js",
            "lineno": 28,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001351",
                "name": "this.",
                "type": "Identifier",
                "value": "callerName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "DOM",
        "longname": "DOM.DOM",
        "kind": "member",
        "memberof": "DOM",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Adds a `<style>` to the document with the given ID.\n     * \n     * @param {string} id ID to use for style element\n     * @param {string} css CSS to apply to the document\n     */",
        "meta": {
            "range": [
                970,
                1272
            ],
            "filename": "dom.js",
            "lineno": 37,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001357",
                "name": "DOM#addStyle",
                "type": "MethodDefinition",
                "paramnames": [
                    "id",
                    "css"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Adds a `<style>` to the document with the given ID.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "ID to use for style element",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "CSS to apply to the document",
                "name": "css"
            }
        ],
        "name": "addStyle",
        "longname": "DOM#addStyle",
        "kind": "function",
        "memberof": "DOM",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1060,
                1077
            ],
            "filename": "dom.js",
            "lineno": 39,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001376",
                "name": "id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "arguments[0]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "<anonymous>~id",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1091,
                1109
            ],
            "filename": "dom.js",
            "lineno": 40,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001382",
                "name": "css",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "arguments[1]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "css",
        "longname": "<anonymous>~css",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1170,
                1178
            ],
            "filename": "dom.js",
            "lineno": 43,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001394",
                "name": "css",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "id",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "css",
        "longname": "<anonymous>~css",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1192,
                1213
            ],
            "filename": "dom.js",
            "lineno": 44,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001398",
                "name": "id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "<anonymous>~id",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * Removes a `<style>` from the document corresponding to the given ID.\n     * \n     * @param {string} id ID used for the style element\n     */",
        "meta": {
            "range": [
                1434,
                1683
            ],
            "filename": "dom.js",
            "lineno": 55,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001411",
                "name": "DOM#removeStyle",
                "type": "MethodDefinition",
                "paramnames": [
                    "id"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Removes a `<style>` from the document corresponding to the given ID.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "ID used for the style element",
                "name": "id"
            }
        ],
        "name": "removeStyle",
        "longname": "DOM#removeStyle",
        "kind": "function",
        "memberof": "DOM",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1522,
                1539
            ],
            "filename": "dom.js",
            "lineno": 57,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001429",
                "name": "id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "arguments[0]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "<anonymous>~id",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1600,
                1621
            ],
            "filename": "dom.js",
            "lineno": 60,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001441",
                "name": "id",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "<anonymous>~id",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * Adds a listener for when the node is removed from the document body.\n     * \n     * @param {HTMLElement} node Node to be observed\n     * @param {function} callback Function to run when removed\n     */",
        "meta": {
            "range": [
                1905,
                1991
            ],
            "filename": "dom.js",
            "lineno": 72,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001453",
                "name": "DOM#onRemoved",
                "type": "MethodDefinition",
                "paramnames": [
                    "node",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Adds a listener for when the node is removed from the document body.",
        "params": [
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "description": "Node to be observed",
                "name": "node"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function to run when removed",
                "name": "callback"
            }
        ],
        "name": "onRemoved",
        "longname": "DOM#onRemoved",
        "kind": "function",
        "memberof": "DOM",
        "scope": "instance"
    },
    {
        "comment": "/**\n     * Utility to help smoothly animate using JavaScript.\n     * \n     * @param {function} update Render function indicating the style should be updated\n     * @param {number} duration Duration in ms to animate for\n     * @param {object} [options] Options to customize the animation\n     * @param {function} [options.timing] Optional function calculating progress based on current time fraction. Linear by default.\n     */",
        "meta": {
            "range": [
                2428,
                2554
            ],
            "filename": "dom.js",
            "lineno": 84,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001466",
                "name": "DOM#animate",
                "type": "MethodDefinition",
                "paramnames": [
                    "update",
                    "duration",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Utility to help smoothly animate using JavaScript.",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Render function indicating the style should be updated",
                "name": "update"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Duration in ms to animate for",
                "name": "duration"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "Options to customize the animation",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "Optional function calculating progress based on current time fraction. Linear by default.",
                "name": "options.timing"
            }
        ],
        "name": "animate",
        "longname": "DOM#animate",
        "kind": "function",
        "memberof": "DOM",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2505,
                2511
            ],
            "filename": "dom.js",
            "lineno": 85,
            "columnno": 35,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001481",
                "name": "update",
                "type": "Identifier",
                "value": "update"
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "update",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2513,
                2521
            ],
            "filename": "dom.js",
            "lineno": 85,
            "columnno": 43,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001483",
                "name": "duration",
                "type": "Identifier",
                "value": "duration"
            }
        },
        "undocumented": true,
        "name": "duration",
        "longname": "duration",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2523,
                2545
            ],
            "filename": "dom.js",
            "lineno": 85,
            "columnno": 53,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001485",
                "name": "timing",
                "type": "MemberExpression",
                "value": "options.timing"
            }
        },
        "undocumented": true,
        "name": "timing",
        "longname": "timing",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n     * Utility function to make creating DOM elements easier. Acts similarly \n     * to `React.createElement`\n     * \n     * @param {string} tag HTML tag name to create\n     * @param {object} [options] Options object to customize the element\n     * @param {string} [options.className] Class name to add to the element\n     * @param {string} [options.id] ID to set for the element\n     * @param {HTMLElement} [options.target] Target element to automatically append to\n     * @param {HTMLElement} [child] Child node to add\n     * @returns {HTMLElement} The created HTML element\n     */",
        "meta": {
            "range": [
                3152,
                3268
            ],
            "filename": "dom.js",
            "lineno": 100,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001489",
                "name": "DOM#createElement",
                "type": "MethodDefinition",
                "paramnames": [
                    "tag",
                    "options",
                    "child"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Utility function to make creating DOM elements easier. Acts similarly \nto `React.createElement`",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "HTML tag name to create",
                "name": "tag"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "Options object to customize the element",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Class name to add to the element",
                "name": "options.className"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "ID to set for the element",
                "name": "options.id"
            },
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "optional": true,
                "description": "Target element to automatically append to",
                "name": "options.target"
            },
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "optional": true,
                "description": "Child node to add",
                "name": "child"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "description": "The created HTML element"
            }
        ],
        "name": "createElement",
        "longname": "DOM#createElement",
        "kind": "function",
        "memberof": "DOM",
        "scope": "instance"
    },
    {
        "comment": "/**\n     * Parses a string of HTML and returns the results. If the second parameter is true,\n     * the parsed HTML will be returned as a document fragment {@see https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment}.\n     * This is extremely useful if you have a list of elements at the top level, they can then be appended all at once to another node.\n     * \n     * If the second parameter is false, then the return value will be the list of parsed\n     * nodes and there were multiple top level nodes, otherwise the single node is returned.\n     * \n     * @param {string} html HTML to be parsed\n     * @param {boolean} [fragment=false] Whether or not the return should be the raw `DocumentFragment`\n     * @returns {(DocumentFragment|NodeList|HTMLElement)} The result of HTML parsing\n     */",
        "meta": {
            "range": [
                4086,
                4180
            ],
            "filename": "dom.js",
            "lineno": 116,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001508",
                "name": "DOM#parseHTML",
                "type": "MethodDefinition",
                "paramnames": [
                    "html",
                    "fragment"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Parses a string of HTML and returns the results. If the second parameter is true,\nthe parsed HTML will be returned as a document fragment {@see https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment}.\nThis is extremely useful if you have a list of elements at the top level, they can then be appended all at once to another node.\n\nIf the second parameter is false, then the return value will be the list of parsed\nnodes and there were multiple top level nodes, otherwise the single node is returned.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "HTML to be parsed",
                "name": "html"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not the return should be the raw `DocumentFragment`",
                "name": "fragment"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "DocumentFragment",
                        "NodeList",
                        "HTMLElement"
                    ]
                },
                "description": "The result of HTML parsing"
            }
        ],
        "name": "parseHTML",
        "longname": "DOM#parseHTML",
        "kind": "function",
        "memberof": "DOM",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4234,
                4253
            ],
            "filename": "dom.js",
            "lineno": 123,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001537",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                53,
                94
            ],
            "filename": "fetch.js",
            "lineno": 3,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001546",
                "name": "redirects",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "redirects",
        "longname": "redirects",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                103,
                202
            ],
            "filename": "fetch.js",
            "lineno": 4,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001554",
                "name": "methods",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "methods",
        "longname": "methods",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                211,
                262
            ],
            "filename": "fetch.js",
            "lineno": 5,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001569",
                "name": "bodylessStatusCodes",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "bodylessStatusCodes",
        "longname": "bodylessStatusCodes",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                267,
                735
            ],
            "filename": "fetch.js",
            "lineno": 7,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001578",
                "name": "FetchResponse",
                "type": "ClassDeclaration",
                "paramnames": [
                    "options"
                ]
            }
        },
        "undocumented": true,
        "name": "FetchResponse",
        "longname": "FetchResponse",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                311,
                630
            ],
            "filename": "fetch.js",
            "lineno": 8,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001582",
                "name": "FetchResponse",
                "type": "MethodDefinition",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "FetchResponse",
        "longname": "FetchResponse",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                430,
                467
            ],
            "filename": "fetch.js",
            "lineno": 10,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001603",
                "name": "headers",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "headers",
        "longname": "headers",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                482,
                513
            ],
            "filename": "fetch.js",
            "lineno": 11,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001609",
                "name": "method",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "method",
        "longname": "method",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                528,
                549
            ],
            "filename": "fetch.js",
            "lineno": 12,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001615",
                "name": "body",
                "type": "MemberExpression",
                "value": "options.content"
            }
        },
        "undocumented": true,
        "name": "body",
        "longname": "body",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                599,
                622
            ],
            "filename": "fetch.js",
            "lineno": 16,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001622",
                "name": "this._options",
                "type": "Identifier",
                "value": "options",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "_options",
        "longname": "FetchResponse#_options",
        "kind": "member",
        "memberof": "FetchResponse",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                638,
                675
            ],
            "filename": "fetch.js",
            "lineno": 19,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001627",
                "name": "FetchResponse#url",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "url",
        "longname": "FetchResponse#url",
        "kind": "member",
        "memberof": "FetchResponse",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                681,
                732
            ],
            "filename": "fetch.js",
            "lineno": 20,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001637",
                "name": "FetchResponse#redirected",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "redirected",
        "longname": "FetchResponse#redirected",
        "kind": "member",
        "memberof": "FetchResponse",
        "scope": "instance",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                745,
                1018
            ],
            "filename": "fetch.js",
            "lineno": 23,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001648",
                "name": "convertSignal",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "listeners": "convertSignal~listeners",
                "": null
            }
        },
        "undocumented": true,
        "name": "convertSignal",
        "longname": "convertSignal",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                784,
                805
            ],
            "filename": "fetch.js",
            "lineno": 24,
            "columnno": 10,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001654",
                "name": "listeners",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "listeners",
        "longname": "convertSignal~listeners",
        "kind": "constant",
        "memberof": "convertSignal",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                927,
                1007
            ],
            "filename": "fetch.js",
            "lineno": 31,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001677",
                "name": "addEventListener",
                "type": "FunctionExpression"
            }
        },
        "undocumented": true,
        "name": "addEventListener",
        "longname": "addEventListener",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "/**\r\n * @typedef {Object} FetchOptions\r\n * @property {\"GET\" | \"PUT\" | \"POST\" | \"DELETE\" | \"PATCH\" | \"OPTIONS\" | \"HEAD\" | \"CONNECT\" | \"TRACE\"} [method] - Request method.\r\n * @property {Record<string, string>} [headers] - Request headers.\r\n * @property {\"manual\" | \"follow\"} [redirect] - Whether to follow redirects.\r\n * @property {number} [maxRedirects] - Maximum amount of redirects to be followed.\r\n * @property {AbortSignal} [signal] - Signal to abruptly cancel the request\r\n * @property {Uint8Array | string} [body] - Defines a request body. Data must be serializable. \r\n * @property {number} [timeout] - Request timeout time.\r\n */",
        "meta": {
            "filename": "fetch.js",
            "lineno": 37,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "kind": "typedef",
        "name": "FetchOptions",
        "type": {
            "names": [
                "Object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "\"GET\"",
                        "\"PUT\"",
                        "\"POST\"",
                        "\"DELETE\"",
                        "\"PATCH\"",
                        "\"OPTIONS\"",
                        "\"HEAD\"",
                        "\"CONNECT\"",
                        "\"TRACE\""
                    ]
                },
                "optional": true,
                "description": "Request method.",
                "name": "method"
            },
            {
                "type": {
                    "names": [
                        "Record.<string, string>"
                    ]
                },
                "optional": true,
                "description": "Request headers.",
                "name": "headers"
            },
            {
                "type": {
                    "names": [
                        "\"manual\"",
                        "\"follow\""
                    ]
                },
                "optional": true,
                "description": "Whether to follow redirects.",
                "name": "redirect"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "Maximum amount of redirects to be followed.",
                "name": "maxRedirects"
            },
            {
                "type": {
                    "names": [
                        "AbortSignal"
                    ]
                },
                "optional": true,
                "description": "Signal to abruptly cancel the request",
                "name": "signal"
            },
            {
                "type": {
                    "names": [
                        "Uint8Array",
                        "string"
                    ]
                },
                "optional": true,
                "description": "Defines a request body. Data must be serializable.",
                "name": "body"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "Request timeout time.",
                "name": "timeout"
            }
        ],
        "longname": "FetchOptions",
        "scope": "global"
    },
    {
        "comment": "/**\r\n * @param {string} url\r\n * @param {FetchOptions} options\r\n * @returns {Promise<FetchResponse>}\r\n */",
        "meta": {
            "range": [
                1767,
                3448
            ],
            "filename": "fetch.js",
            "lineno": 53,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001688",
                "name": "module.exports",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "url",
                    "options"
                ]
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "FetchOptions"
                    ]
                },
                "name": "options"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<FetchResponse>"
                    ]
                }
            }
        ],
        "name": "exports",
        "longname": "module.exports",
        "kind": "function",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1782,
                3448
            ],
            "filename": "fetch.js",
            "lineno": 53,
            "columnno": 15,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001689",
                "name": "fetch",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "url",
                    "options"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "fetch",
        "longname": "fetch",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1880,
                1889
            ],
            "filename": "fetch.js",
            "lineno": 55,
            "columnno": 14,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001704",
                "name": "data",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "<anonymous>~data",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1958,
                2073
            ],
            "filename": "fetch.js",
            "lineno": 58,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001716",
                "name": "data.headers",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "headers",
        "longname": "<anonymous>~data.headers",
        "kind": "member",
        "memberof": "<anonymous>~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2174,
                2206
            ],
            "filename": "fetch.js",
            "lineno": 61,
            "columnno": 85,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001755",
                "name": "data.redirect",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "options.redirect",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "redirect",
        "longname": "<anonymous>~data.redirect",
        "kind": "member",
        "memberof": "<anonymous>~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2293,
                2317
            ],
            "filename": "fetch.js",
            "lineno": 62,
            "columnno": 84,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001776",
                "name": "data.body",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "options.body",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "body",
        "longname": "<anonymous>~data.body",
        "kind": "member",
        "memberof": "<anonymous>~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2399,
                2427
            ],
            "filename": "fetch.js",
            "lineno": 63,
            "columnno": 79,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001799",
                "name": "data.method",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "options.method",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "method",
        "longname": "<anonymous>~data.method",
        "kind": "member",
        "memberof": "<anonymous>~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2484,
                2524
            ],
            "filename": "fetch.js",
            "lineno": 64,
            "columnno": 54,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001814",
                "name": "data.maxRedirects",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "options.maxRedirects",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "maxRedirects",
        "longname": "<anonymous>~data.maxRedirects",
        "kind": "member",
        "memberof": "<anonymous>~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2576,
                2606
            ],
            "filename": "fetch.js",
            "lineno": 65,
            "columnno": 49,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001829",
                "name": "data.timeout",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "options.timeout",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "timeout",
        "longname": "<anonymous>~data.timeout",
        "kind": "member",
        "memberof": "<anonymous>~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2662,
                2705
            ],
            "filename": "fetch.js",
            "lineno": 67,
            "columnno": 51,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001843",
                "name": "data.signal",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "signal",
        "longname": "<anonymous>~data.signal",
        "kind": "member",
        "memberof": "<anonymous>~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2722,
                2725
            ],
            "filename": "fetch.js",
            "lineno": 69,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001853",
                "name": "ctx"
            }
        },
        "undocumented": true,
        "name": "ctx",
        "longname": "<anonymous>~ctx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2755,
                2790
            ],
            "filename": "fetch.js",
            "lineno": 71,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001858",
                "name": "ctx",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ctx",
        "longname": "<anonymous>~ctx",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3025,
                3052
            ],
            "filename": "fetch.js",
            "lineno": 83,
            "columnno": 22,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001893",
                "name": "resultData",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "resultData",
        "longname": "<anonymous>~resultData",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3079,
                3298
            ],
            "filename": "fetch.js",
            "lineno": 85,
            "columnno": 22,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001900",
                "name": "req",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "req",
        "longname": "<anonymous>~req",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3126,
                3157
            ],
            "filename": "fetch.js",
            "lineno": 86,
            "columnno": 20,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001905",
                "name": "method",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "method",
        "longname": "method",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3180,
                3209
            ],
            "filename": "fetch.js",
            "lineno": 87,
            "columnno": 20,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100001911",
                "name": "status",
                "type": "MemberExpression",
                "value": "resultData.statusCode"
            }
        },
        "undocumented": true,
        "name": "status",
        "longname": "status",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1365,
                1384
            ],
            "filename": "index.js",
            "lineno": 36,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002055",
                "name": "bounded",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "bounded",
        "longname": "bounded",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1392,
                1431
            ],
            "filename": "index.js",
            "lineno": 37,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002060",
                "name": "PluginAPI",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "PluginAPI",
        "longname": "PluginAPI",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1439,
                1476
            ],
            "filename": "index.js",
            "lineno": 38,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002066",
                "name": "ThemeAPI",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ThemeAPI",
        "longname": "ThemeAPI",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1484,
                1510
            ],
            "filename": "index.js",
            "lineno": 39,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002072",
                "name": "PatcherAPI",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "PatcherAPI",
        "longname": "PatcherAPI",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1518,
                1538
            ],
            "filename": "index.js",
            "lineno": 40,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002077",
                "name": "DataAPI",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "DataAPI",
        "longname": "DataAPI",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1546,
                1564
            ],
            "filename": "index.js",
            "lineno": 41,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002082",
                "name": "DOMAPI",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "DOMAPI",
        "longname": "DOMAPI",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1572,
                1606
            ],
            "filename": "index.js",
            "lineno": 42,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002087",
                "name": "ContextMenuAPI",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "ContextMenuAPI",
        "longname": "ContextMenuAPI",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1614,
                1642
            ],
            "filename": "index.js",
            "lineno": 43,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002092",
                "name": "DefaultLogger",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "DefaultLogger",
        "longname": "DefaultLogger",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * `Components` is a namespace holding a series of React components. It is available under {@link BdApi}.\n * @type Components\n * @summary {@link Components} a namespace holding a series of React components\n * @name Components\n */",
        "meta": {
            "filename": "index.js",
            "lineno": 45,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`Components` is a namespace holding a series of React components. It is available under {@link BdApi}.",
        "type": {
            "names": [
                "Components"
            ]
        },
        "summary": "{@link Components} a namespace holding a series of React components",
        "name": "Components",
        "longname": "Components",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1885,
                2594
            ],
            "filename": "index.js",
            "lineno": 51,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002097",
                "name": "Components",
                "type": "ObjectExpression",
                "value": "{\"Tooltip\":\"\",\"ColorInput\":\"\",\"DropdownInput\":\"\",\"SettingItem\":\"\",\"KeybindInput\":\"\",\"NumberInput\":\"\",\"RadioInput\":\"\",\"SearchInput\":\"\",\"SliderInput\":\"\",\"SwitchInput\":\"\",\"TextInput\":\"\",\"SettingGroup\":\"\",\"ErrorBoundary\":\"\",\"Text\":\"\",\"Flex\":\"\",\"Button\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "Components",
        "longname": "Components",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1904,
                1950
            ],
            "filename": "index.js",
            "lineno": 52,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002100",
                "name": "Tooltip",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Tooltip",
        "longname": "Components.Tooltip",
        "kind": "member",
        "memberof": "Components",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1956,
                1993
            ],
            "filename": "index.js",
            "lineno": 53,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002107",
                "name": "ColorInput",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ColorInput",
        "longname": "Components.ColorInput",
        "kind": "member",
        "memberof": "Components",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1999,
                2042
            ],
            "filename": "index.js",
            "lineno": 54,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002112",
                "name": "DropdownInput",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "DropdownInput",
        "longname": "Components.DropdownInput",
        "kind": "member",
        "memberof": "Components",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2048,
                2087
            ],
            "filename": "index.js",
            "lineno": 55,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002117",
                "name": "SettingItem",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "SettingItem",
        "longname": "Components.SettingItem",
        "kind": "member",
        "memberof": "Components",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2093,
                2134
            ],
            "filename": "index.js",
            "lineno": 56,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002122",
                "name": "KeybindInput",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "KeybindInput",
        "longname": "Components.KeybindInput",
        "kind": "member",
        "memberof": "Components",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2140,
                2179
            ],
            "filename": "index.js",
            "lineno": 57,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002127",
                "name": "NumberInput",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "NumberInput",
        "longname": "Components.NumberInput",
        "kind": "member",
        "memberof": "Components",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2185,
                2222
            ],
            "filename": "index.js",
            "lineno": 58,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002132",
                "name": "RadioInput",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "RadioInput",
        "longname": "Components.RadioInput",
        "kind": "member",
        "memberof": "Components",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2228,
                2267
            ],
            "filename": "index.js",
            "lineno": 59,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002137",
                "name": "SearchInput",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "SearchInput",
        "longname": "Components.SearchInput",
        "kind": "member",
        "memberof": "Components",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2273,
                2312
            ],
            "filename": "index.js",
            "lineno": 60,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002142",
                "name": "SliderInput",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "SliderInput",
        "longname": "Components.SliderInput",
        "kind": "member",
        "memberof": "Components",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2318,
                2357
            ],
            "filename": "index.js",
            "lineno": 61,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002147",
                "name": "SwitchInput",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "SwitchInput",
        "longname": "Components.SwitchInput",
        "kind": "member",
        "memberof": "Components",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2363,
                2398
            ],
            "filename": "index.js",
            "lineno": 62,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002152",
                "name": "TextInput",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "TextInput",
        "longname": "Components.TextInput",
        "kind": "member",
        "memberof": "Components",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2404,
                2445
            ],
            "filename": "index.js",
            "lineno": 63,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002157",
                "name": "SettingGroup",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "SettingGroup",
        "longname": "Components.SettingGroup",
        "kind": "member",
        "memberof": "Components",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2451,
                2494
            ],
            "filename": "index.js",
            "lineno": 64,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002162",
                "name": "ErrorBoundary",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "ErrorBoundary",
        "longname": "Components.ErrorBoundary",
        "kind": "member",
        "memberof": "Components",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2500,
                2525
            ],
            "filename": "index.js",
            "lineno": 65,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002167",
                "name": "Text",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Text",
        "longname": "Components.Text",
        "kind": "member",
        "memberof": "Components",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2531,
                2556
            ],
            "filename": "index.js",
            "lineno": 66,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002172",
                "name": "Flex",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Flex",
        "longname": "Components.Flex",
        "kind": "member",
        "memberof": "Components",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2562,
                2591
            ],
            "filename": "index.js",
            "lineno": 67,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002177",
                "name": "Button",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Button",
        "longname": "Components.Button",
        "kind": "member",
        "memberof": "Components",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2742,
                3756
            ],
            "filename": "index.js",
            "lineno": 74,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002182",
                "name": "module.exports",
                "type": "ClassDeclaration"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "class",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * `BdApi` is a globally (`window.BdApi`) accessible object for use by plugins and developers to make their lives easier.\n * @name BdApi\n */",
        "meta": {
            "filename": "index.js",
            "lineno": 70,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`BdApi` is a globally (`window.BdApi`) accessible object for use by plugins and developers to make their lives easier.",
        "name": "BdApi",
        "longname": "BdApi",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2757,
                3756
            ],
            "filename": "index.js",
            "lineno": 74,
            "columnno": 15,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002183",
                "name": "module.exports",
                "type": "ClassDeclaration",
                "paramnames": [
                    "pluginName"
                ]
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "class",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2775,
                3406
            ],
            "filename": "index.js",
            "lineno": 75,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002186",
                "name": "module.exports",
                "type": "MethodDefinition",
                "paramnames": [
                    "pluginName"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports#module.exports",
        "kind": "class",
        "memberof": "module.exports#module",
        "scope": "static",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3193,
                3231
            ],
            "filename": "index.js",
            "lineno": 87,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002231",
                "name": "this.Patcher",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Patcher",
        "longname": "module.exports#Patcher",
        "kind": "member",
        "memberof": "module.exports",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3241,
                3273
            ],
            "filename": "index.js",
            "lineno": 88,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002239",
                "name": "this.Data",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Data",
        "longname": "module.exports#Data",
        "kind": "member",
        "memberof": "module.exports",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3283,
                3313
            ],
            "filename": "index.js",
            "lineno": 89,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002247",
                "name": "this.DOM",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "DOM",
        "longname": "module.exports#DOM",
        "kind": "member",
        "memberof": "module.exports",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3323,
                3359
            ],
            "filename": "index.js",
            "lineno": 90,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002255",
                "name": "this.Logger",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Logger",
        "longname": "module.exports#Logger",
        "kind": "member",
        "memberof": "module.exports",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3440,
                3473
            ],
            "filename": "index.js",
            "lineno": 96,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002269",
                "name": "Plugins",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Plugins",
        "longname": "Plugins",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3478,
                3509
            ],
            "filename": "index.js",
            "lineno": 97,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002275",
                "name": "Themes",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Themes",
        "longname": "Themes",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3514,
                3545
            ],
            "filename": "index.js",
            "lineno": 98,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002281",
                "name": "Webpack",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Webpack",
        "longname": "Webpack",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3550,
                3577
            ],
            "filename": "index.js",
            "lineno": 99,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002287",
                "name": "Utils",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Utils",
        "longname": "Utils",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3582,
                3603
            ],
            "filename": "index.js",
            "lineno": 100,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002293",
                "name": "UI",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "UI",
        "longname": "UI",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3608,
                3645
            ],
            "filename": "index.js",
            "lineno": 101,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002299",
                "name": "ReactUtils",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "ReactUtils",
        "longname": "ReactUtils",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3650,
                3692
            ],
            "filename": "index.js",
            "lineno": 102,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002305",
                "name": "ContextMenu",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "ContextMenu",
        "longname": "ContextMenu",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3697,
                3734
            ],
            "filename": "index.js",
            "lineno": 103,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002311",
                "name": "Components",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Components",
        "longname": "Components",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3739,
                3753
            ],
            "filename": "index.js",
            "lineno": 104,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002317",
                "name": "Net",
                "type": "ClassProperty"
            }
        },
        "undocumented": true,
        "name": "Net",
        "longname": "module.exports#Net",
        "kind": "member",
        "memberof": "module.exports",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3746,
                3751
            ],
            "filename": "index.js",
            "lineno": 104,
            "columnno": 11,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002319",
                "name": "fetch",
                "type": "Identifier",
                "value": "fetch"
            }
        },
        "undocumented": true,
        "name": "fetch",
        "longname": "fetch",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * An instance of {@link AddonAPI} to access plugins.\n * @type AddonAPI\n */",
        "meta": {
            "range": [
                3893,
                3918
            ],
            "filename": "index.js",
            "lineno": 114,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002329",
                "name": "BdApi.Plugins",
                "type": "Identifier",
                "value": "PluginAPI",
                "paramnames": []
            }
        },
        "description": "An instance of {@link AddonAPI} to access plugins.",
        "type": {
            "names": [
                "AddonAPI"
            ]
        },
        "name": "Plugins",
        "longname": "BdApi.Plugins",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\n * An instance of {@link AddonAPI} to access themes.\n * @type AddonAPI\n */",
        "meta": {
            "range": [
                4000,
                4023
            ],
            "filename": "index.js",
            "lineno": 120,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002335",
                "name": "BdApi.Themes",
                "type": "Identifier",
                "value": "ThemeAPI",
                "paramnames": []
            }
        },
        "description": "An instance of {@link AddonAPI} to access themes.",
        "type": {
            "names": [
                "AddonAPI"
            ]
        },
        "name": "Themes",
        "longname": "BdApi.Themes",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\n * An instance of {@link Patcher} to monkey patch functions.\n * @type Patcher\n */",
        "meta": {
            "range": [
                4112,
                4138
            ],
            "filename": "index.js",
            "lineno": 126,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002341",
                "name": "BdApi.Patcher",
                "type": "Identifier",
                "value": "PatcherAPI",
                "paramnames": []
            }
        },
        "description": "An instance of {@link Patcher} to monkey patch functions.",
        "type": {
            "names": [
                "Patcher"
            ]
        },
        "name": "Patcher",
        "longname": "BdApi.Patcher",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\n * An instance of {@link Webpack} to search for modules.\n * @type Webpack\n */",
        "meta": {
            "range": [
                4223,
                4246
            ],
            "filename": "index.js",
            "lineno": 132,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002347",
                "name": "BdApi.Webpack",
                "type": "Identifier",
                "value": "Webpack",
                "paramnames": []
            }
        },
        "description": "An instance of {@link Webpack} to search for modules.",
        "type": {
            "names": [
                "Webpack"
            ]
        },
        "name": "Webpack",
        "longname": "BdApi.Webpack",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\n * An instance of {@link Data} to manage data.\n * @type Data\n */",
        "meta": {
            "range": [
                4319,
                4339
            ],
            "filename": "index.js",
            "lineno": 138,
            "columnno": 1,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002353",
                "name": "BdApi.Data",
                "type": "Identifier",
                "value": "DataAPI",
                "paramnames": []
            }
        },
        "description": "An instance of {@link Data} to manage data.",
        "type": {
            "names": [
                "Data"
            ]
        },
        "name": "Data",
        "longname": "BdApi.Data",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\n * An instance of {@link UI} to create interfaces.\n * @type UI\n */",
        "meta": {
            "range": [
                4413,
                4426
            ],
            "filename": "index.js",
            "lineno": 144,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002359",
                "name": "BdApi.UI",
                "type": "Identifier",
                "value": "UI",
                "paramnames": []
            }
        },
        "description": "An instance of {@link UI} to create interfaces.",
        "type": {
            "names": [
                "UI"
            ]
        },
        "name": "UI",
        "longname": "BdApi.UI",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\n * An instance of {@link ReactUtils} to work with React.\n * @type ReactUtils\n */",
        "meta": {
            "range": [
                4514,
                4543
            ],
            "filename": "index.js",
            "lineno": 150,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002365",
                "name": "BdApi.ReactUtils",
                "type": "Identifier",
                "value": "ReactUtils",
                "paramnames": []
            }
        },
        "description": "An instance of {@link ReactUtils} to work with React.",
        "type": {
            "names": [
                "ReactUtils"
            ]
        },
        "name": "ReactUtils",
        "longname": "BdApi.ReactUtils",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\n * An instance of {@link Utils} for general utility functions.\n * @type Utils\n */",
        "meta": {
            "range": [
                4632,
                4651
            ],
            "filename": "index.js",
            "lineno": 156,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002371",
                "name": "BdApi.Utils",
                "type": "Identifier",
                "value": "Utils",
                "paramnames": []
            }
        },
        "description": "An instance of {@link Utils} for general utility functions.",
        "type": {
            "names": [
                "Utils"
            ]
        },
        "name": "Utils",
        "longname": "BdApi.Utils",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\n * An instance of {@link DOM} to interact with the DOM.\n * @type DOM\n */",
        "meta": {
            "range": [
                4731,
                4749
            ],
            "filename": "index.js",
            "lineno": 162,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002377",
                "name": "BdApi.DOM",
                "type": "Identifier",
                "value": "DOMAPI",
                "paramnames": []
            }
        },
        "description": "An instance of {@link DOM} to interact with the DOM.",
        "type": {
            "names": [
                "DOM"
            ]
        },
        "name": "DOM",
        "longname": "BdApi.DOM",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\n * An instance of {@link ContextMenu} for interacting with context menus.\n * @type ContextMenu\n */",
        "meta": {
            "range": [
                4855,
                4889
            ],
            "filename": "index.js",
            "lineno": 168,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002383",
                "name": "BdApi.ContextMenu",
                "type": "Identifier",
                "value": "ContextMenuAPI",
                "paramnames": []
            }
        },
        "description": "An instance of {@link ContextMenu} for interacting with context menus.",
        "type": {
            "names": [
                "ContextMenu"
            ]
        },
        "name": "ContextMenu",
        "longname": "BdApi.ContextMenu",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\n * An set of react components plugins can make use of.\n * @type Components\n */",
        "meta": {
            "range": [
                4975,
                5004
            ],
            "filename": "index.js",
            "lineno": 174,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002389",
                "name": "BdApi.Components",
                "type": "Identifier",
                "value": "Components",
                "paramnames": []
            }
        },
        "description": "An set of react components plugins can make use of.",
        "type": {
            "names": [
                "Components"
            ]
        },
        "name": "Components",
        "longname": "BdApi.Components",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/**\n * An instance of {@link Net} for using network related tools.\n * @type Net\n */",
        "meta": {
            "range": [
                5091,
                5110
            ],
            "filename": "index.js",
            "lineno": 180,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002395",
                "name": "BdApi.Net",
                "type": "ObjectExpression",
                "value": "{\"fetch\":\"\"}",
                "paramnames": []
            }
        },
        "description": "An instance of {@link Net} for using network related tools.",
        "type": {
            "names": [
                "Net"
            ]
        },
        "name": "Net",
        "longname": "BdApi.Net",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5104,
                5109
            ],
            "filename": "index.js",
            "lineno": 180,
            "columnno": 13,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002400",
                "name": "fetch",
                "type": "Identifier",
                "value": "fetch"
            }
        },
        "undocumented": true,
        "name": "fetch",
        "longname": "BdApi.Net.fetch",
        "kind": "member",
        "memberof": "BdApi.Net",
        "scope": "static"
    },
    {
        "comment": "/**\n * An instance of {@link Logger} for logging information.\n * @type Logger\n */",
        "meta": {
            "range": [
                5195,
                5223
            ],
            "filename": "index.js",
            "lineno": 186,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002403",
                "name": "BdApi.Logger",
                "type": "Identifier",
                "value": "DefaultLogger",
                "paramnames": []
            }
        },
        "description": "An instance of {@link Logger} for logging information.",
        "type": {
            "names": [
                "Logger"
            ]
        },
        "name": "Logger",
        "longname": "BdApi.Logger",
        "kind": "member",
        "memberof": "BdApi",
        "scope": "static"
    },
    {
        "comment": "/** \n * The React module being used inside Discord.\n * @type React\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                592,
                620
            ],
            "filename": "legacy.js",
            "lineno": 22,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002489",
                "name": "React",
                "type": "MemberExpression",
                "value": "DiscordModules.React"
            }
        },
        "description": "The React module being used inside Discord.",
        "type": {
            "names": [
                "React"
            ]
        },
        "memberof": "BdApi",
        "name": "React",
        "longname": "BdApi.React",
        "kind": "constant",
        "scope": "static",
        "params": []
    },
    {
        "comment": "/** \n * The ReactDOM module being used inside Discord.\n * @type ReactDOM\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                725,
                759
            ],
            "filename": "legacy.js",
            "lineno": 29,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002495",
                "name": "ReactDOM",
                "type": "MemberExpression",
                "value": "DiscordModules.ReactDOM"
            }
        },
        "description": "The ReactDOM module being used inside Discord.",
        "type": {
            "names": [
                "ReactDOM"
            ]
        },
        "memberof": "BdApi",
        "name": "ReactDOM",
        "longname": "BdApi.ReactDOM",
        "kind": "constant",
        "scope": "static",
        "params": []
    },
    {
        "comment": "/** \n * A reference object to get BD's settings.\n * @type object\n * @deprecated\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                871,
                902
            ],
            "filename": "legacy.js",
            "lineno": 37,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002501",
                "name": "settings",
                "type": "MemberExpression",
                "value": "Settings.collections"
            }
        },
        "description": "A reference object to get BD's settings.",
        "type": {
            "names": [
                "object"
            ]
        },
        "deprecated": true,
        "memberof": "BdApi",
        "name": "settings",
        "longname": "BdApi.settings",
        "kind": "constant",
        "scope": "static",
        "params": []
    },
    {
        "comment": "/** \n * A reference object for BD's emotes.\n * @type object\n * @deprecated\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                1009,
                1020
            ],
            "filename": "legacy.js",
            "lineno": 45,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002507",
                "name": "emotes",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "description": "A reference object for BD's emotes.",
        "type": {
            "names": [
                "object"
            ]
        },
        "deprecated": true,
        "memberof": "BdApi",
        "name": "emotes",
        "longname": "BdApi.emotes",
        "kind": "constant",
        "scope": "static",
        "params": []
    },
    {
        "comment": "/** \n * A reference string for BD's version.\n * @type string\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                1113,
                1137
            ],
            "filename": "legacy.js",
            "lineno": 52,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002511",
                "name": "version",
                "type": "MemberExpression",
                "value": "Config.version"
            }
        },
        "description": "A reference string for BD's version.",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "BdApi",
        "name": "version",
        "longname": "BdApi.version",
        "kind": "constant",
        "scope": "static",
        "params": []
    },
    {
        "comment": "/**\n * Adds a `<style>` to the document with the given ID.\n * \n * @deprecated\n * @param {string} id ID to use for style element\n * @param {string} css CSS to apply to the document\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                1344,
                1412
            ],
            "filename": "legacy.js",
            "lineno": 63,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002516",
                "name": "injectCSS",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "id",
                    "css"
                ]
            }
        },
        "description": "Adds a `<style>` to the document with the given ID.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "ID to use for style element",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "CSS to apply to the document",
                "name": "css"
            }
        ],
        "memberof": "BdApi",
        "name": "injectCSS",
        "longname": "BdApi.injectCSS",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Removes a `<style>` from the document corresponding to the given ID.\n * \n * @deprecated\n * @param {string} id ID uses for the style element\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                1584,
                1641
            ],
            "filename": "legacy.js",
            "lineno": 74,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002528",
                "name": "clearCSS",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "id"
                ]
            }
        },
        "description": "Removes a `<style>` from the document corresponding to the given ID.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "ID uses for the style element",
                "name": "id"
            }
        ],
        "memberof": "BdApi",
        "name": "clearCSS",
        "longname": "BdApi.clearCSS",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Automatically creates and links a remote JS script.\n * \n * @deprecated\n * @param {string} id ID of the script element\n * @param {string} url URL of the remote script\n * @returns {Promise} Resolves upon onload event\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                1888,
                1961
            ],
            "filename": "legacy.js",
            "lineno": 87,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002538",
                "name": "linkJS",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "id",
                    "url"
                ]
            }
        },
        "description": "Automatically creates and links a remote JS script.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "ID of the script element",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of the remote script",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "Resolves upon onload event"
            }
        ],
        "memberof": "BdApi",
        "name": "linkJS",
        "longname": "BdApi.linkJS",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Removes a remotely linked JS script.\n * \n * @deprecated\n * @param {string} id ID of the script element\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                2096,
                2154
            ],
            "filename": "legacy.js",
            "lineno": 98,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002550",
                "name": "unlinkJS",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "id"
                ]
            }
        },
        "description": "Removes a remotely linked JS script.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "ID of the script element",
                "name": "id"
            }
        ],
        "memberof": "BdApi",
        "name": "unlinkJS",
        "longname": "BdApi.unlinkJS",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Shows a generic but very customizable modal.\n * \n * @deprecated\n * @param {string} title Title of the modal\n * @param {(string|ReactElement|Array<string|ReactElement>)} content A string of text to display in the modal\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                2404,
                2472
            ],
            "filename": "legacy.js",
            "lineno": 110,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002560",
                "name": "alert",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "title",
                    "content"
                ]
            }
        },
        "description": "Shows a generic but very customizable modal.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Title of the modal",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "ReactElement",
                        "Array.<(string|ReactElement)>"
                    ]
                },
                "description": "A string of text to display in the modal",
                "name": "content"
            }
        ],
        "memberof": "BdApi",
        "name": "alert",
        "longname": "BdApi.alert",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Shows a generic but very customizable confirmation modal with optional confirm and cancel callbacks.\n * \n * @deprecated\n * @param {string} title Title of the modal\n * @param {(string|ReactElement|Array<string|ReactElement>)} children Single or mixed array of React elements and strings. Everything is wrapped in Discord's `TextElement` component so strings will show and render properly.\n * @param {object} [options] Options to modify the modal\n * @param {boolean} [options.danger=false] Whether the main button should be red or not\n * @param {string} [options.confirmText=Okay] Text for the confirmation/submit button\n * @param {string} [options.cancelText=Cancel] Text for the cancel button\n * @param {callable} [options.onConfirm=NOOP] Callback to occur when clicking the submit button\n * @param {callable} [options.onCancel=NOOP] Callback to occur when clicking the cancel button\n * @returns {string} The key used for this modal\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                3437,
                3567
            ],
            "filename": "legacy.js",
            "lineno": 129,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002572",
                "name": "showConfirmationModal",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "title",
                    "content",
                    "options"
                ]
            }
        },
        "description": "Shows a generic but very customizable confirmation modal with optional confirm and cancel callbacks.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Title of the modal",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "ReactElement",
                        "Array.<(string|ReactElement)>"
                    ]
                },
                "description": "Single or mixed array of React elements and strings. Everything is wrapped in Discord's `TextElement` component so strings will show and render properly.",
                "name": "children"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "Options to modify the modal",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the main button should be red or not",
                "name": "options.danger"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "Okay",
                "description": "Text for the confirmation/submit button",
                "name": "options.confirmText"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "Cancel",
                "description": "Text for the cancel button",
                "name": "options.cancelText"
            },
            {
                "type": {
                    "names": [
                        "callable"
                    ]
                },
                "optional": true,
                "defaultvalue": "NOOP",
                "description": "Callback to occur when clicking the submit button",
                "name": "options.onConfirm"
            },
            {
                "type": {
                    "names": [
                        "callable"
                    ]
                },
                "optional": true,
                "defaultvalue": "NOOP",
                "description": "Callback to occur when clicking the cancel button",
                "name": "options.onCancel"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The key used for this modal"
            }
        ],
        "memberof": "BdApi",
        "name": "showConfirmationModal",
        "longname": "BdApi.showConfirmationModal",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Shows a toast similar to android towards the bottom of the screen.\n *\n * @deprecated\n * @param {string} content The string to show in the toast\n * @param {object} options Options object. Optional parameter\n * @param {string} [options.type=\"\"] Changes the type of the toast stylistically and semantically. Choices: \"\", \"info\", \"success\", \"danger\"/\"error\", \"warning\"/\"warn\". Default: \"\".\n * @param {boolean} [options.icon=true] Determines whether the icon should show corresponding to the type. A toast without type will always have no icon. Default: `true`.\n * @param {number} [options.timeout=3000] Adjusts the time (in ms) the toast should be shown for before disappearing automatically. Default: `3000`.\n * @param {boolean} [options.forceShow=false] Whether to force showing the toast and ignore the BD setting\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                4412,
                4492
            ],
            "filename": "legacy.js",
            "lineno": 145,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002588",
                "name": "showToast",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "content",
                    "options"
                ]
            }
        },
        "description": "Shows a toast similar to android towards the bottom of the screen.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The string to show in the toast",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Options object. Optional parameter",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "Changes the type of the toast stylistically and semantically. Choices: \"\", \"info\", \"success\", \"danger\"/\"error\", \"warning\"/\"warn\". Default: \"\".",
                "name": "options.type"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Determines whether the icon should show corresponding to the type. A toast without type will always have no icon. Default: `true`.",
                "name": "options.icon"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 3000,
                "description": "Adjusts the time (in ms) the toast should be shown for before disappearing automatically. Default: `3000`.",
                "name": "options.timeout"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to force showing the toast and ignore the BD setting",
                "name": "options.forceShow"
            }
        ],
        "memberof": "BdApi",
        "name": "showToast",
        "longname": "BdApi.showToast",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Shows a notice above Discord's chat layer.\n * \n * @deprecated\n * @param {string|Node} content Content of the notice\n * @param {object} options Options for the notice\n * @param {string} [options.type=\"info\" | \"error\" | \"warning\" | \"success\"] Type for the notice. Will affect the color.\n * @param {Array<{label: string, onClick: function}>} [options.buttons] Buttons that should be added next to the notice text\n * @param {number} [options.timeout=10000] Timeout until the notice is closed. Will not fire when set to `0`.\n * @returns {function} A callback for closing the notice. Passing `true` as first parameter closes immediately without transitioning out.\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                5183,
                5272
            ],
            "filename": "legacy.js",
            "lineno": 161,
            "columnno": 1,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002602",
                "name": "showNotice",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "content",
                    "options"
                ]
            }
        },
        "description": "Shows a notice above Discord's chat layer.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "Node"
                    ]
                },
                "description": "Content of the notice",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Options for the notice",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"info\" | \"error\" | \"warning\" | \"success\"",
                "description": "Type for the notice. Will affect the color.",
                "name": "options.type"
            },
            {
                "type": {
                    "names": [
                        "Array.<{label: string, onClick: function()}>"
                    ]
                },
                "optional": true,
                "description": "Buttons that should be added next to the notice text",
                "name": "options.buttons"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 10000,
                "description": "Timeout until the notice is closed. Will not fire when set to `0`.",
                "name": "options.timeout"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A callback for closing the notice. Passing `true` as first parameter closes immediately without transitioning out."
            }
        ],
        "memberof": "BdApi",
        "name": "showNotice",
        "longname": "BdApi.showNotice",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Finds a webpack module using a filter.\n * \n * @deprecated\n * @param {function} filter A filter given the exports, module, and moduleId. Returns `true` if the module matches.\n * @returns {any} Either the matching module or `undefined`\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                5538,
                5614
            ],
            "filename": "legacy.js",
            "lineno": 173,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002616",
                "name": "findModule",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "filter"
                ]
            }
        },
        "description": "Finds a webpack module using a filter.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A filter given the exports, module, and moduleId. Returns `true` if the module matches.",
                "name": "filter"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "Either the matching module or `undefined`"
            }
        ],
        "memberof": "BdApi",
        "name": "findModule",
        "longname": "BdApi.findModule",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Finds multiple webpack modules using a filter.\n * \n * @deprecated\n * @param {function} filter A filter given the exports, module, and moduleId. Returns `true` if the module matches.\n * @returns {Array} Either an array of matching modules or an empty array\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                5902,
                5998
            ],
            "filename": "legacy.js",
            "lineno": 185,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002626",
                "name": "findAllModules",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "filter"
                ]
            }
        },
        "description": "Finds multiple webpack modules using a filter.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A filter given the exports, module, and moduleId. Returns `true` if the module matches.",
                "name": "filter"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array"
                    ]
                },
                "description": "Either an array of matching modules or an empty array"
            }
        ],
        "memberof": "BdApi",
        "name": "findAllModules",
        "longname": "BdApi.findAllModules",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5981,
                5993
            ],
            "filename": "legacy.js",
            "lineno": 186,
            "columnno": 45,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002637",
                "name": "first",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "first",
        "longname": "first",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n * Finds a webpack module by own properties.\n * \n * @deprecated\n * @param {...string} props Any desired properties\n * @returns {any} Either the matching module or `undefined`\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                6202,
                6290
            ],
            "filename": "legacy.js",
            "lineno": 197,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002639",
                "name": "findModuleByProps",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "props"
                ]
            }
        },
        "description": "Finds a webpack module by own properties.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "variable": true,
                "description": "Any desired properties",
                "name": "props"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "Either the matching module or `undefined`"
            }
        ],
        "memberof": "BdApi",
        "name": "findModuleByProps",
        "longname": "BdApi.findModuleByProps",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Finds a webpack module by own prototypes.\n * \n * @deprecated\n * @param {...string} protos Any desired prototype properties\n * @returns {any} Either the matching module or `undefined`\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                6506,
                6606
            ],
            "filename": "legacy.js",
            "lineno": 210,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002651",
                "name": "findModuleByPrototypes",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "protos"
                ]
            }
        },
        "description": "Finds a webpack module by own prototypes.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "variable": true,
                "description": "Any desired prototype properties",
                "name": "protos"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "Either the matching module or `undefined`"
            }
        ],
        "memberof": "BdApi",
        "name": "findModuleByPrototypes",
        "longname": "BdApi.findModuleByPrototypes",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Finds a webpack module by `displayName` property.\n * \n * @deprecated\n * @param {string} name Desired `displayName` property\n * @returns {any} Either the matching module or `undefined`\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                6822,
                6914
            ],
            "filename": "legacy.js",
            "lineno": 222,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002663",
                "name": "findModuleByDisplayName",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "name"
                ]
            }
        },
        "description": "Finds a webpack module by `displayName` property.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Desired `displayName` property",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "Either the matching module or `undefined`"
            }
        ],
        "memberof": "BdApi",
        "name": "findModuleByDisplayName",
        "longname": "BdApi.findModuleByDisplayName",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Gets the internal React data of a specified node.\n * \n * @deprecated\n * @param {HTMLElement} node Node to get the internal React data from.\n * @returns {object|undefined} Either the found data or `undefined`\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                7154,
                7400
            ],
            "filename": "legacy.js",
            "lineno": 234,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002673",
                "name": "getInternalInstance",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "node"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Gets the internal React data of a specified node.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "description": "Node to get the internal React data from.",
                "name": "node"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object",
                        "undefined"
                    ]
                },
                "description": "Either the found data or `undefined`"
            }
        ],
        "memberof": "BdApi",
        "name": "getInternalInstance",
        "longname": "BdApi.getInternalInstance",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Loads previously stored data.\n * \n * @deprecated\n * @param {string} pluginName Name of the plugin loading data\n * @param {string} key Which piece of data to load\n * @returns {any} The stored data\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                7628,
                7719
            ],
            "filename": "legacy.js",
            "lineno": 248,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002711",
                "name": "loadData",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "pluginName",
                    "key"
                ]
            }
        },
        "description": "Loads previously stored data.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the plugin loading data",
                "name": "pluginName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Which piece of data to load",
                "name": "key"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "The stored data"
            }
        ],
        "memberof": "BdApi",
        "name": "loadData",
        "longname": "BdApi.loadData",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Saves JSON-serializable data.\n * \n * @deprecated\n * @param {string} pluginName Name of the plugin saving data\n * @param {string} key Which piece of data to store\n * @param {any} data The data to be saved\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                7955,
                8058
            ],
            "filename": "legacy.js",
            "lineno": 261,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002723",
                "name": "saveData",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "pluginName",
                    "key",
                    "data"
                ]
            }
        },
        "description": "Saves JSON-serializable data.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the plugin saving data",
                "name": "pluginName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Which piece of data to store",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "The data to be saved",
                "name": "data"
            }
        ],
        "memberof": "BdApi",
        "name": "saveData",
        "longname": "BdApi.saveData",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Deletes a piece of stored data. This is different than saving `null` or `undefined`.\n * \n * @deprecated\n * @param {string} pluginName Name of the plugin deleting data\n * @param {string} key Which piece of data to delete\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                8310,
                8399
            ],
            "filename": "legacy.js",
            "lineno": 273,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002737",
                "name": "deleteData",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "pluginName",
                    "key"
                ]
            }
        },
        "description": "Deletes a piece of stored data. This is different than saving `null` or `undefined`.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the plugin deleting data",
                "name": "pluginName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Which piece of data to delete",
                "name": "key"
            }
        ],
        "memberof": "BdApi",
        "name": "deleteData",
        "longname": "BdApi.deleteData",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Monkey-patches a method on an object. The patching callback may be run before, after or instead of target method.\n * \n *  - Be careful when monkey-patching. Think not only about original functionality of target method and your changes, but also about developers of other plugins, who may also patch this method before or after you. Try to change target method behaviour as little as possible, and avoid changing method signatures.\n *  - Display name of patched method is changed, so you can see if a function has been patched (and how many times) while debugging or in the stack trace. Also, patched methods have property `__monkeyPatched` set to `true`, in case you want to check something programmatically.\n * \n * @deprecated\n * @param {object} what Object to be patched. You can can also pass class prototypes to patch all class instances.\n * @param {string} methodName Name of the function to be patched\n * @param {object} options Options object to configure the patch\n * @param {function} [options.after] Callback that will be called after original target method call. You can modify return value here, so it will be passed to external code which calls target method. Can be combined with `before`.\n * @param {function} [options.before] Callback that will be called before original target method call. You can modify arguments here, so it will be passed to original method. Can be combined with `after`.\n * @param {function} [options.instead] Callback that will be called instead of original target method call. You can get access to original method using `originalMethod` parameter if you want to call it, but you do not have to. Can't be combined with `before` or `after`.\n * @param {boolean} [options.once=false] Set to `true` if you want to automatically unpatch method after first call\n * @param {boolean} [options.silent=false] Set to `true` if you want to suppress log messages about patching and unpatching\n * @returns {function} A function that cancels the monkey patch\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                10415,
                11516
            ],
            "filename": "legacy.js",
            "lineno": 295,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002749",
                "name": "monkeyPatch",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "what",
                    "methodName",
                    "options"
                ]
            },
            "vars": {
                "undefined": null,
                "patchType": "BdApi.monkeyPatch~patchType",
                "originalMethod": "BdApi.monkeyPatch~originalMethod",
                "data": "BdApi.monkeyPatch~data",
                "": null,
                "data.cancelPatch": "BdApi.monkeyPatch~data.cancelPatch"
            }
        },
        "description": "Monkey-patches a method on an object. The patching callback may be run before, after or instead of target method.\n\n - Be careful when monkey-patching. Think not only about original functionality of target method and your changes, but also about developers of other plugins, who may also patch this method before or after you. Try to change target method behaviour as little as possible, and avoid changing method signatures.\n - Display name of patched method is changed, so you can see if a function has been patched (and how many times) while debugging or in the stack trace. Also, patched methods have property `__monkeyPatched` set to `true`, in case you want to check something programmatically.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object to be patched. You can can also pass class prototypes to patch all class instances.",
                "name": "what"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the function to be patched",
                "name": "methodName"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Options object to configure the patch",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "Callback that will be called after original target method call. You can modify return value here, so it will be passed to external code which calls target method. Can be combined with `before`.",
                "name": "options.after"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "Callback that will be called before original target method call. You can modify arguments here, so it will be passed to original method. Can be combined with `after`.",
                "name": "options.before"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "Callback that will be called instead of original target method call. You can get access to original method using `originalMethod` parameter if you want to call it, but you do not have to. Can't be combined with `before` or `after`.",
                "name": "options.instead"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Set to `true` if you want to automatically unpatch method after first call",
                "name": "options.once"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Set to `true` if you want to suppress log messages about patching and unpatching",
                "name": "options.silent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function that cancels the monkey patch"
            }
        ],
        "memberof": "BdApi",
        "name": "monkeyPatch",
        "longname": "BdApi.monkeyPatch",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10476,
                10482
            ],
            "filename": "legacy.js",
            "lineno": 296,
            "columnno": 11,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002758",
                "name": "before",
                "type": "Identifier",
                "value": "before"
            }
        },
        "undocumented": true,
        "name": "before",
        "longname": "before",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10484,
                10489
            ],
            "filename": "legacy.js",
            "lineno": 296,
            "columnno": 19,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002760",
                "name": "after",
                "type": "Identifier",
                "value": "after"
            }
        },
        "undocumented": true,
        "name": "after",
        "longname": "after",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10491,
                10498
            ],
            "filename": "legacy.js",
            "lineno": 296,
            "columnno": 26,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002762",
                "name": "instead",
                "type": "Identifier",
                "value": "instead"
            }
        },
        "undocumented": true,
        "name": "instead",
        "longname": "instead",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10500,
                10512
            ],
            "filename": "legacy.js",
            "lineno": 296,
            "columnno": 35,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002764",
                "name": "once",
                "type": "AssignmentPattern",
                "value": "once"
            }
        },
        "undocumented": true,
        "name": "once",
        "longname": "once",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10514,
                10532
            ],
            "filename": "legacy.js",
            "lineno": 296,
            "columnno": 49,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002768",
                "name": "callerId",
                "type": "AssignmentPattern",
                "value": "callerId"
            }
        },
        "undocumented": true,
        "name": "callerId",
        "longname": "callerId",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10555,
                10629
            ],
            "filename": "legacy.js",
            "lineno": 297,
            "columnno": 10,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002774",
                "name": "patchType",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "patchType",
        "longname": "BdApi.monkeyPatch~patchType",
        "kind": "constant",
        "memberof": "BdApi.monkeyPatch",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10736,
                10769
            ],
            "filename": "legacy.js",
            "lineno": 299,
            "columnno": 10,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002797",
                "name": "originalMethod",
                "type": "MemberExpression",
                "value": "what[undefined]"
            }
        },
        "undocumented": true,
        "name": "originalMethod",
        "longname": "BdApi.monkeyPatch~originalMethod",
        "kind": "constant",
        "memberof": "BdApi.monkeyPatch",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10781,
                10934
            ],
            "filename": "legacy.js",
            "lineno": 300,
            "columnno": 10,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002803",
                "name": "data",
                "type": "ObjectExpression",
                "value": "{\"originalMethod\":\"\",\"callOriginalMethod\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "BdApi.monkeyPatch~data",
        "kind": "constant",
        "memberof": "BdApi.monkeyPatch",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10798,
                10828
            ],
            "filename": "legacy.js",
            "lineno": 301,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002806",
                "name": "originalMethod",
                "type": "Identifier",
                "value": "originalMethod"
            }
        },
        "undocumented": true,
        "name": "originalMethod",
        "longname": "BdApi.monkeyPatch~data.originalMethod",
        "kind": "member",
        "memberof": "BdApi.monkeyPatch~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10838,
                10928
            ],
            "filename": "legacy.js",
            "lineno": 302,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002808",
                "name": "callOriginalMethod",
                "type": "ArrowFunctionExpression"
            }
        },
        "undocumented": true,
        "name": "callOriginalMethod",
        "longname": "BdApi.monkeyPatch~data.callOriginalMethod",
        "kind": "function",
        "memberof": "BdApi.monkeyPatch~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10940,
                11484
            ],
            "filename": "legacy.js",
            "lineno": 304,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002823",
                "name": "data.cancelPatch",
                "type": "CallExpression",
                "funcscope": "BdApi.monkeyPatch",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "cancelPatch",
        "longname": "BdApi.monkeyPatch~data.cancelPatch",
        "kind": "member",
        "memberof": "BdApi.monkeyPatch~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11051,
                11079
            ],
            "filename": "legacy.js",
            "lineno": 305,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002840",
                "name": "data.thisObject",
                "type": "Identifier",
                "funcscope": "BdApi.monkeyPatch",
                "value": "thisObject",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "thisObject",
        "longname": "BdApi.monkeyPatch~data.thisObject",
        "kind": "member",
        "memberof": "BdApi.monkeyPatch~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11089,
                11116
            ],
            "filename": "legacy.js",
            "lineno": 306,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002846",
                "name": "data.methodArguments",
                "type": "Identifier",
                "funcscope": "BdApi.monkeyPatch",
                "value": "args",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "methodArguments",
        "longname": "BdApi.monkeyPatch~data.methodArguments",
        "kind": "member",
        "memberof": "BdApi.monkeyPatch~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11126,
                11156
            ],
            "filename": "legacy.js",
            "lineno": 307,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002852",
                "name": "data.returnValue",
                "type": "Identifier",
                "funcscope": "BdApi.monkeyPatch",
                "value": "returnValue",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "returnValue",
        "longname": "BdApi.monkeyPatch~data.returnValue",
        "kind": "member",
        "memberof": "BdApi.monkeyPatch~data",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11190,
                11251
            ],
            "filename": "legacy.js",
            "lineno": 309,
            "columnno": 18,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002860",
                "name": "patchReturn",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "patchReturn",
        "longname": "<anonymous>~patchReturn",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n * Adds a listener for when the node is removed from the document body.\n * \n * @deprecated\n * @param {HTMLElement} node Node to be observed\n * @param {function} callback Function to run when removed\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                11744,
                11831
            ],
            "filename": "legacy.js",
            "lineno": 328,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002902",
                "name": "onRemoved",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "node",
                    "callback"
                ]
            }
        },
        "description": "Adds a listener for when the node is removed from the document body.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "description": "Node to be observed",
                "name": "node"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function to run when removed",
                "name": "callback"
            }
        ],
        "memberof": "BdApi",
        "name": "onRemoved",
        "longname": "BdApi.onRemoved",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Wraps a given function in a `try..catch` block.\n * \n * @deprecated\n * @param {function} method Function to wrap\n * @param {string} message Additional message to print when an error occurs\n * @returns {function} The new wrapped function\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                12099,
                12311
            ],
            "filename": "legacy.js",
            "lineno": 341,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002914",
                "name": "suppressErrors",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "method",
                    "message"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Wraps a given function in a `try..catch` block.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function to wrap",
                "name": "method"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Additional message to print when an error occurs",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The new wrapped function"
            }
        ],
        "memberof": "BdApi",
        "name": "suppressErrors",
        "longname": "BdApi.suppressErrors",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Tests a given object to determine if it is valid JSON.\n * \n * @deprecated\n * @param {object} data Data to be tested\n * @returns {boolean} Result of the test\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                12500,
                12622
            ],
            "filename": "legacy.js",
            "lineno": 356,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002942",
                "name": "testJSON",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "data"
                ]
            }
        },
        "description": "Tests a given object to determine if it is valid JSON.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Data to be tested",
                "name": "data"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Result of the test"
            }
        ],
        "memberof": "BdApi",
        "name": "testJSON",
        "longname": "BdApi.testJSON",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Gets a specific setting's status from BD.\n * \n * @deprecated\n * @param {string} [collection=\"settings\"] Collection ID\n * @param {string} category Category ID in the collection\n * @param {string} id Setting ID in the category\n * @returns {boolean} If the setting is enabled\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                12927,
                13033
            ],
            "filename": "legacy.js",
            "lineno": 375,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002957",
                "name": "isSettingEnabled",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "collection",
                    "category",
                    "id"
                ]
            }
        },
        "description": "Gets a specific setting's status from BD.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"settings\"",
                "description": "Collection ID",
                "name": "collection"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Category ID in the collection",
                "name": "category"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Setting ID in the category",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If the setting is enabled"
            }
        ],
        "memberof": "BdApi",
        "name": "isSettingEnabled",
        "longname": "BdApi.isSettingEnabled",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Enables a BetterDiscord setting by IDs.\n * \n * @deprecated\n * @param {string} [collection=\"settings\"] Collection ID\n * @param {string} category Category ID in the collection\n * @param {string} id Setting ID in the category\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                13288,
                13397
            ],
            "filename": "legacy.js",
            "lineno": 388,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002971",
                "name": "enableSetting",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "collection",
                    "category",
                    "id"
                ]
            }
        },
        "description": "Enables a BetterDiscord setting by IDs.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"settings\"",
                "description": "Collection ID",
                "name": "collection"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Category ID in the collection",
                "name": "category"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Setting ID in the category",
                "name": "id"
            }
        ],
        "memberof": "BdApi",
        "name": "enableSetting",
        "longname": "BdApi.enableSetting",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Disables a BetterDiscord setting by IDs.\n * \n * @deprecated\n * @param {string} [collection=\"settings\"] Collection ID\n * @param {string} category Category ID in the collection\n * @param {string} id Setting ID in the category\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                13653,
                13764
            ],
            "filename": "legacy.js",
            "lineno": 401,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100002986",
                "name": "disableSetting",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "collection",
                    "category",
                    "id"
                ]
            }
        },
        "description": "Disables a BetterDiscord setting by IDs.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"settings\"",
                "description": "Collection ID",
                "name": "collection"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Category ID in the collection",
                "name": "category"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Setting ID in the category",
                "name": "id"
            }
        ],
        "memberof": "BdApi",
        "name": "disableSetting",
        "longname": "BdApi.disableSetting",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Toggles a BetterDiscord setting by IDs.\n * \n * @deprecated\n * @param {string} [collection=\"settings\"] Collection ID\n * @param {string} category Category ID in the collection\n * @param {string} id Setting ID in the category\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                14019,
                14163
            ],
            "filename": "legacy.js",
            "lineno": 414,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003001",
                "name": "toggleSetting",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "collection",
                    "category",
                    "id"
                ]
            }
        },
        "description": "Toggles a BetterDiscord setting by IDs.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"settings\"",
                "description": "Collection ID",
                "name": "collection"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Category ID in the collection",
                "name": "category"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Setting ID in the category",
                "name": "id"
            }
        ],
        "memberof": "BdApi",
        "name": "toggleSetting",
        "longname": "BdApi.toggleSetting",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Gets some data in BetterDiscord's misc data.\n * \n * @deprecated\n * @param {string} key Key of the data to load\n * @returns {any} The stored data\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                14340,
                14404
            ],
            "filename": "legacy.js",
            "lineno": 426,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003023",
                "name": "getBDData",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "key"
                ]
            }
        },
        "description": "Gets some data in BetterDiscord's misc data.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Key of the data to load",
                "name": "key"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "The stored data"
            }
        ],
        "memberof": "BdApi",
        "name": "getBDData",
        "longname": "BdApi.getBDData",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Sets some data in BetterDiscord's misc data.\n * \n * @deprecated\n * @param {string} key Key of the data to store\n * @returns {any} The stored data\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                14582,
                14658
            ],
            "filename": "legacy.js",
            "lineno": 438,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003033",
                "name": "setBDData",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "key",
                    "data"
                ]
            }
        },
        "description": "Sets some data in BetterDiscord's misc data.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Key of the data to store",
                "name": "key"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "The stored data"
            }
        ],
        "memberof": "BdApi",
        "name": "setBDData",
        "longname": "BdApi.setBDData",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n * Gives access to the [Electron Dialog](https://www.electronjs.org/docs/latest/api/dialog/) api. \n * Returns a `Promise` that resolves to an `object` that has a `boolean` cancelled and a `filePath` string for saving and a `filePaths` string array for opening.\n * \n * @deprecated\n * @param {object} options Options object to configure the dialog\n * @param {\"open\"|\"save\"} [options.mode=\"open\"] Determines whether the dialog should open or save files\n * @param {string} [options.defaultPath=~] Path the dialog should show on launch\n * @param {Array<object<string, string[]>>} [options.filters=[]] An array of [file filters](https://www.electronjs.org/docs/latest/api/structures/file-filter)\n * @param {string} [options.title] Title for the titlebar\n * @param {string} [options.message] Message for the dialog\n * @param {boolean} [options.showOverwriteConfirmation=false] Whether the user should be prompted when overwriting a file\n * @param {boolean} [options.showHiddenFiles=false] Whether hidden files should be shown in the dialog\n * @param {boolean} [options.promptToCreate=false] Whether the user should be prompted to create non-existant folders\n * @param {boolean} [options.openDirectory=false] Whether the user should be able to select a directory as a target\n * @param {boolean} [options.openFile=true] Whether the user should be able to select a file as a target\n * @param {boolean} [options.multiSelections=false] Whether the user should be able to select multiple targets\n * @param {boolean} [options.modal=false] Whether the dialog should act as a modal to the main window\n * @returns {Promise<object>} Result of the dialog\n * @memberof BdApi\n */",
        "meta": {
            "range": [
                16323,
                16476
            ],
            "filename": "legacy.js",
            "lineno": 463,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003045",
                "name": "openDialog",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "options"
                ]
            },
            "vars": {
                "data": "BdApi.openDialog~data"
            }
        },
        "description": "Gives access to the [Electron Dialog](https://www.electronjs.org/docs/latest/api/dialog/) api. \nReturns a `Promise` that resolves to an `object` that has a `boolean` cancelled and a `filePath` string for saving and a `filePaths` string array for opening.",
        "deprecated": true,
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Options object to configure the dialog",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "\"open\"",
                        "\"save\""
                    ]
                },
                "optional": true,
                "defaultvalue": "\"open\"",
                "description": "Determines whether the dialog should open or save files",
                "name": "options.mode"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "~",
                "description": "Path the dialog should show on launch",
                "name": "options.defaultPath"
            },
            {
                "type": {
                    "names": [
                        "Array.<object.<string, Array.<string>>>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "An array of [file filters](https://www.electronjs.org/docs/latest/api/structures/file-filter)",
                "name": "options.filters"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Title for the titlebar",
                "name": "options.title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Message for the dialog",
                "name": "options.message"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the user should be prompted when overwriting a file",
                "name": "options.showOverwriteConfirmation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether hidden files should be shown in the dialog",
                "name": "options.showHiddenFiles"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the user should be prompted to create non-existant folders",
                "name": "options.promptToCreate"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the user should be able to select a directory as a target",
                "name": "options.openDirectory"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether the user should be able to select a file as a target",
                "name": "options.openFile"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the user should be able to select multiple targets",
                "name": "options.multiSelections"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the dialog should act as a modal to the main window",
                "name": "options.modal"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<object>"
                    ]
                },
                "description": "Result of the dialog"
            }
        ],
        "memberof": "BdApi",
        "name": "openDialog",
        "longname": "BdApi.openDialog",
        "kind": "function",
        "scope": "static",
        "async": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16370,
                16406
            ],
            "filename": "legacy.js",
            "lineno": 464,
            "columnno": 10,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003050",
                "name": "data",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "BdApi.openDialog~data",
        "kind": "constant",
        "memberof": "BdApi.openDialog",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16491,
                16496
            ],
            "filename": "legacy.js",
            "lineno": 471,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003071",
                "name": "exports.React",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "React",
        "longname": "React",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16502,
                16510
            ],
            "filename": "legacy.js",
            "lineno": 472,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003074",
                "name": "exports.ReactDOM",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "ReactDOM",
        "longname": "ReactDOM",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16516,
                16524
            ],
            "filename": "legacy.js",
            "lineno": 473,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003077",
                "name": "exports.settings",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "settings",
        "longname": "settings",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16530,
                16536
            ],
            "filename": "legacy.js",
            "lineno": 474,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003080",
                "name": "exports.emotes",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "emotes",
        "longname": "emotes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16542,
                16549
            ],
            "filename": "legacy.js",
            "lineno": 475,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003083",
                "name": "exports.version",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "version",
        "longname": "version",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16555,
                16564
            ],
            "filename": "legacy.js",
            "lineno": 476,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003086",
                "name": "exports.injectCSS",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "injectCSS",
        "longname": "injectCSS",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16570,
                16578
            ],
            "filename": "legacy.js",
            "lineno": 477,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003089",
                "name": "exports.clearCSS",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "clearCSS",
        "longname": "clearCSS",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16584,
                16590
            ],
            "filename": "legacy.js",
            "lineno": 478,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003092",
                "name": "exports.linkJS",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "linkJS",
        "longname": "linkJS",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16596,
                16604
            ],
            "filename": "legacy.js",
            "lineno": 479,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003095",
                "name": "exports.unlinkJS",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "unlinkJS",
        "longname": "unlinkJS",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16610,
                16615
            ],
            "filename": "legacy.js",
            "lineno": 480,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003098",
                "name": "exports.alert",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "alert",
        "longname": "alert",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16621,
                16642
            ],
            "filename": "legacy.js",
            "lineno": 481,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003101",
                "name": "exports.showConfirmationModal",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "showConfirmationModal",
        "longname": "showConfirmationModal",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16648,
                16657
            ],
            "filename": "legacy.js",
            "lineno": 482,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003104",
                "name": "exports.showToast",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "showToast",
        "longname": "showToast",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16663,
                16673
            ],
            "filename": "legacy.js",
            "lineno": 483,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003107",
                "name": "exports.showNotice",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "showNotice",
        "longname": "showNotice",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16679,
                16689
            ],
            "filename": "legacy.js",
            "lineno": 484,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003110",
                "name": "exports.findModule",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "findModule",
        "longname": "findModule",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16695,
                16709
            ],
            "filename": "legacy.js",
            "lineno": 485,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003113",
                "name": "exports.findAllModules",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "findAllModules",
        "longname": "findAllModules",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16715,
                16732
            ],
            "filename": "legacy.js",
            "lineno": 486,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003116",
                "name": "exports.findModuleByProps",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "findModuleByProps",
        "longname": "findModuleByProps",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16738,
                16760
            ],
            "filename": "legacy.js",
            "lineno": 487,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003119",
                "name": "exports.findModuleByPrototypes",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "findModuleByPrototypes",
        "longname": "findModuleByPrototypes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16766,
                16789
            ],
            "filename": "legacy.js",
            "lineno": 488,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003122",
                "name": "exports.findModuleByDisplayName",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "findModuleByDisplayName",
        "longname": "findModuleByDisplayName",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16795,
                16814
            ],
            "filename": "legacy.js",
            "lineno": 489,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003125",
                "name": "exports.getInternalInstance",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "getInternalInstance",
        "longname": "getInternalInstance",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16820,
                16828
            ],
            "filename": "legacy.js",
            "lineno": 490,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003128",
                "name": "exports.loadData",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "loadData",
        "longname": "loadData",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16834,
                16853
            ],
            "filename": "legacy.js",
            "lineno": 491,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003131",
                "name": "exports.getData",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "getData",
        "longname": "getData",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16859,
                16867
            ],
            "filename": "legacy.js",
            "lineno": 492,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003134",
                "name": "exports.saveData",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "saveData",
        "longname": "saveData",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16873,
                16892
            ],
            "filename": "legacy.js",
            "lineno": 493,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003137",
                "name": "exports.setData",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "setData",
        "longname": "setData",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16898,
                16908
            ],
            "filename": "legacy.js",
            "lineno": 494,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003140",
                "name": "exports.deleteData",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "deleteData",
        "longname": "deleteData",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16914,
                16925
            ],
            "filename": "legacy.js",
            "lineno": 495,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003143",
                "name": "exports.monkeyPatch",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "monkeyPatch",
        "longname": "monkeyPatch",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16931,
                16940
            ],
            "filename": "legacy.js",
            "lineno": 496,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003146",
                "name": "exports.onRemoved",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "onRemoved",
        "longname": "onRemoved",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16946,
                16960
            ],
            "filename": "legacy.js",
            "lineno": 497,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003149",
                "name": "exports.suppressErrors",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "suppressErrors",
        "longname": "suppressErrors",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16966,
                16974
            ],
            "filename": "legacy.js",
            "lineno": 498,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003152",
                "name": "exports.testJSON",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "testJSON",
        "longname": "testJSON",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                16980,
                16996
            ],
            "filename": "legacy.js",
            "lineno": 499,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003155",
                "name": "exports.isSettingEnabled",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "isSettingEnabled",
        "longname": "isSettingEnabled",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17002,
                17015
            ],
            "filename": "legacy.js",
            "lineno": 500,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003158",
                "name": "exports.enableSetting",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "enableSetting",
        "longname": "enableSetting",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17021,
                17035
            ],
            "filename": "legacy.js",
            "lineno": 501,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003161",
                "name": "exports.disableSetting",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "disableSetting",
        "longname": "disableSetting",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17041,
                17054
            ],
            "filename": "legacy.js",
            "lineno": 502,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003164",
                "name": "exports.toggleSetting",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "toggleSetting",
        "longname": "toggleSetting",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17060,
                17069
            ],
            "filename": "legacy.js",
            "lineno": 503,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003167",
                "name": "exports.getBDData",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "getBDData",
        "longname": "getBDData",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17075,
                17084
            ],
            "filename": "legacy.js",
            "lineno": 504,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003170",
                "name": "exports.setBDData",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "setBDData",
        "longname": "setBDData",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                17090,
                17100
            ],
            "filename": "legacy.js",
            "lineno": 505,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003173",
                "name": "exports.openDialog",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "openDialog",
        "longname": "openDialog",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\r\n * Simple logger for the lib and plugins.\r\n *\r\n * @module Logger\r\n * @version 0.1.0\r\n */",
        "meta": {
            "filename": "logger.js",
            "lineno": 1,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "Simple logger for the lib and plugins.",
        "kind": "module",
        "name": "Logger",
        "version": "0.1.0",
        "longname": "module:Logger"
    },
    {
        "comment": "/**\r\n * List of logging types.\r\n */",
        "meta": {
            "range": [
                177,
                288
            ],
            "filename": "logger.js",
            "lineno": 14,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003179",
                "name": "LogTypes",
                "type": "ObjectExpression",
                "value": "{\"error\":\"error\",\"debug\":\"debug\",\"log\":\"log\",\"warn\":\"warn\",\"info\":\"info\"}"
            }
        },
        "description": "List of logging types.",
        "name": "LogTypes",
        "longname": "module:Logger~LogTypes",
        "kind": "constant",
        "scope": "inner",
        "memberof": "module:Logger",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                195,
                209
            ],
            "filename": "logger.js",
            "lineno": 15,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003182",
                "name": "error",
                "type": "Literal",
                "value": "error"
            }
        },
        "undocumented": true,
        "name": "error",
        "longname": "module:Logger~LogTypes.error",
        "kind": "member",
        "memberof": "module:Logger~LogTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                216,
                230
            ],
            "filename": "logger.js",
            "lineno": 16,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003184",
                "name": "debug",
                "type": "Literal",
                "value": "debug"
            }
        },
        "undocumented": true,
        "name": "debug",
        "longname": "module:Logger~LogTypes.debug",
        "kind": "member",
        "memberof": "module:Logger~LogTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                237,
                247
            ],
            "filename": "logger.js",
            "lineno": 17,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003186",
                "name": "log",
                "type": "Literal",
                "value": "log"
            }
        },
        "undocumented": true,
        "name": "log",
        "longname": "module:Logger~LogTypes.log",
        "kind": "member",
        "memberof": "module:Logger~LogTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                254,
                266
            ],
            "filename": "logger.js",
            "lineno": 18,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003188",
                "name": "warn",
                "type": "Literal",
                "value": "warn"
            }
        },
        "undocumented": true,
        "name": "warn",
        "longname": "module:Logger~LogTypes.warn",
        "kind": "member",
        "memberof": "module:Logger~LogTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                273,
                285
            ],
            "filename": "logger.js",
            "lineno": 19,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003190",
                "name": "info",
                "type": "Literal",
                "value": "info"
            }
        },
        "undocumented": true,
        "name": "info",
        "longname": "module:Logger~LogTypes.info",
        "kind": "member",
        "memberof": "module:Logger~LogTypes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                299,
                342
            ],
            "filename": "logger.js",
            "lineno": 22,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003193",
                "name": "parseType",
                "type": "ArrowFunctionExpression"
            }
        },
        "undocumented": true,
        "name": "parseType",
        "longname": "module:Logger~parseType",
        "kind": "function",
        "scope": "inner",
        "memberof": "module:Logger",
        "params": []
    },
    {
        "comment": "/**\r\n * `Logger` is a helper class to log data in a nice and consistent way. An instance is available on {@link BdApi}.\r\n * @type Logger\r\n * @summary {@link Logger} is a simple utility for logging information.\r\n * @name Logger\r\n */",
        "meta": {
            "filename": "logger.js",
            "lineno": 25,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`Logger` is a helper class to log data in a nice and consistent way. An instance is available on {@link BdApi}.",
        "type": {
            "names": [
                "Logger"
            ]
        },
        "summary": "{@link Logger} is a simple utility for logging information.",
        "name": "Logger",
        "longname": "module:Logger~Logger",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:Logger"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                582,
                3982
            ],
            "filename": "logger.js",
            "lineno": 31,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003202",
                "name": "Logger",
                "type": "ClassDeclaration",
                "paramnames": [
                    "pluginName",
                    "nameStyle",
                    "messageStyle"
                ]
            }
        },
        "undocumented": true,
        "name": "Logger",
        "longname": "module:Logger~Logger",
        "kind": "class",
        "scope": "inner",
        "memberof": "module:Logger"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                604,
                621
            ],
            "filename": "logger.js",
            "lineno": 33,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003205",
                "name": "pluginName",
                "type": "ClassPrivateProperty"
            }
        },
        "undocumented": true,
        "name": "pluginName",
        "longname": "module:Logger~Logger#pluginName",
        "kind": "member",
        "memberof": "module:Logger~Logger",
        "scope": "instance",
        "access": "private"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                627,
                676
            ],
            "filename": "logger.js",
            "lineno": 34,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003207",
                "name": "nameStyle",
                "type": "ClassPrivateProperty"
            }
        },
        "undocumented": true,
        "name": "nameStyle",
        "longname": "module:Logger~Logger#nameStyle",
        "kind": "member",
        "memberof": "module:Logger~Logger",
        "scope": "instance",
        "access": "private"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                682,
                701
            ],
            "filename": "logger.js",
            "lineno": 35,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003209",
                "name": "messageStyle",
                "type": "ClassPrivateProperty"
            }
        },
        "undocumented": true,
        "name": "messageStyle",
        "longname": "module:Logger~Logger#messageStyle",
        "kind": "member",
        "memberof": "module:Logger~Logger",
        "scope": "instance",
        "access": "private"
    },
    {
        "comment": "/**\r\n     * @param {string} pluginName - Name of the plugin\r\n     * @param {string} nameStyle - CSS to style the plugin name\r\n     * @param {string} messageStyle - CSS to style the main message\r\n     */",
        "meta": {
            "range": [
                917,
                1163
            ],
            "filename": "logger.js",
            "lineno": 42,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003211",
                "name": "Logger",
                "type": "MethodDefinition",
                "paramnames": [
                    "pluginName",
                    "nameStyle",
                    "messageStyle"
                ]
            },
            "vars": {
                "": null
            }
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the plugin",
                "name": "pluginName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "CSS to style the plugin name",
                "name": "nameStyle"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "CSS to style the main message",
                "name": "messageStyle"
            }
        ],
        "name": "Logger",
        "longname": "module:Logger~Logger",
        "kind": "class",
        "memberof": "module:Logger",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1011,
                1040
            ],
            "filename": "logger.js",
            "lineno": 44,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003223",
                "name": "this.",
                "type": "Identifier",
                "value": "pluginName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Logger",
        "longname": "module:Logger~Logger",
        "kind": "member",
        "memberof": "module:Logger",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1066,
                1093
            ],
            "filename": "logger.js",
            "lineno": 45,
            "columnno": 23,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003232",
                "name": "this.",
                "type": "Identifier",
                "value": "nameStyle",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Logger",
        "longname": "module:Logger~Logger",
        "kind": "member",
        "memberof": "module:Logger",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1122,
                1155
            ],
            "filename": "logger.js",
            "lineno": 46,
            "columnno": 26,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003241",
                "name": "this.",
                "type": "Identifier",
                "value": "messageStyle",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Logger",
        "longname": "module:Logger~Logger",
        "kind": "member",
        "memberof": "module:Logger",
        "scope": "inner"
    },
    {
        "comment": "/**\r\n     * Logs an error using a collapsed error group with stacktrace.\r\n     *\r\n     * @param {string} pluginName - Name of the calling module.\r\n     * @param {string} message - Message or error to have logged.\r\n     * @param {Error} error - Error object to log with the message.\r\n     */",
        "meta": {
            "range": [
                1467,
                1803
            ],
            "filename": "logger.js",
            "lineno": 56,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003247",
                "name": "Logger#stacktrace",
                "type": "MethodDefinition",
                "paramnames": [
                    "pluginName",
                    "message",
                    "error"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Logs an error using a collapsed error group with stacktrace.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the calling module.",
                "name": "pluginName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Message or error to have logged.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "Error"
                    ]
                },
                "description": "Error object to log with the message.",
                "name": "error"
            }
        ],
        "name": "stacktrace",
        "longname": "module:Logger~Logger#stacktrace",
        "kind": "function",
        "memberof": "module:Logger~Logger",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1554,
                1569
            ],
            "filename": "logger.js",
            "lineno": 58,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003261",
                "name": "error",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "message",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "error",
        "longname": "module:Logger~error",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:Logger"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1584,
                1604
            ],
            "filename": "logger.js",
            "lineno": 59,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003265",
                "name": "message",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "pluginName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "module:Logger~message",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:Logger"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1619,
                1648
            ],
            "filename": "logger.js",
            "lineno": 60,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003269",
                "name": "pluginName",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pluginName",
        "longname": "module:Logger~pluginName",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:Logger"
    },
    {
        "comment": "/**\r\n     * Logs an error message.\r\n     * \r\n     * @param {string} pluginName Name of the calling module\r\n     * @param  {...any} message Messages to have logged.\r\n     */",
        "meta": {
            "range": [
                1989,
                2062
            ],
            "filename": "logger.js",
            "lineno": 71,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003293",
                "name": "Logger#error",
                "type": "MethodDefinition",
                "paramnames": [
                    "pluginName",
                    "message"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Logs an error message.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the calling module",
                "name": "pluginName"
            },
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "variable": true,
                "description": "Messages to have logged.",
                "name": "message"
            }
        ],
        "name": "error",
        "longname": "module:Logger~Logger#error",
        "kind": "function",
        "memberof": "module:Logger~Logger",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Logs a warning message.\r\n     *\r\n     * @param {string} module - Name of the calling module.\r\n     * @param {...any} message - Messages to have logged.\r\n     */",
        "meta": {
            "range": [
                2248,
                2319
            ],
            "filename": "logger.js",
            "lineno": 79,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003309",
                "name": "Logger#warn",
                "type": "MethodDefinition",
                "paramnames": [
                    "pluginName",
                    "message"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Logs a warning message.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the calling module.",
                "name": "module"
            },
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "variable": true,
                "description": "Messages to have logged.",
                "name": "message"
            }
        ],
        "name": "warn",
        "longname": "module:Logger~Logger#warn",
        "kind": "function",
        "memberof": "module:Logger~Logger",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Logs an informational message.\r\n     *\r\n     * @param {string} module - Name of the calling module.\r\n     * @param {...any} message - Messages to have logged.\r\n     */",
        "meta": {
            "range": [
                2512,
                2583
            ],
            "filename": "logger.js",
            "lineno": 87,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003325",
                "name": "Logger#info",
                "type": "MethodDefinition",
                "paramnames": [
                    "pluginName",
                    "message"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Logs an informational message.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the calling module.",
                "name": "module"
            },
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "variable": true,
                "description": "Messages to have logged.",
                "name": "message"
            }
        ],
        "name": "info",
        "longname": "module:Logger~Logger#info",
        "kind": "function",
        "memberof": "module:Logger~Logger",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Logs used for debugging purposes.\r\n     *\r\n     * @param {string} module - Name of the calling module.\r\n     * @param {...any} message - Messages to have logged.\r\n     */",
        "meta": {
            "range": [
                2779,
                2852
            ],
            "filename": "logger.js",
            "lineno": 95,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003341",
                "name": "Logger#debug",
                "type": "MethodDefinition",
                "paramnames": [
                    "pluginName",
                    "message"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Logs used for debugging purposes.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the calling module.",
                "name": "module"
            },
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "variable": true,
                "description": "Messages to have logged.",
                "name": "message"
            }
        ],
        "name": "debug",
        "longname": "module:Logger~Logger#debug",
        "kind": "function",
        "memberof": "module:Logger~Logger",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Logs used for basic loggin.\r\n     *\r\n     * @param {string} module - Name of the calling module.\r\n     * @param {...any} message - Messages to have logged.\r\n     */",
        "meta": {
            "range": [
                3042,
                3104
            ],
            "filename": "logger.js",
            "lineno": 103,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003357",
                "name": "Logger#log",
                "type": "MethodDefinition",
                "paramnames": [
                    "pluginName",
                    "message"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Logs used for basic loggin.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the calling module.",
                "name": "module"
            },
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "variable": true,
                "description": "Messages to have logged.",
                "name": "message"
            }
        ],
        "name": "log",
        "longname": "module:Logger~Logger#log",
        "kind": "function",
        "memberof": "module:Logger~Logger",
        "scope": "instance"
    },
    {
        "comment": "/**\r\n     * Logs strings using different console levels and a module label.\r\n     *\r\n     * @param {string} module - Name of the calling module.\r\n     * @param {any|Array<any>} message - Messages to have logged.\r\n     * @param {module:Logger.LogTypes} type - Type of log to use in console.\r\n     */",
        "meta": {
            "range": [
                3416,
                3979
            ],
            "filename": "logger.js",
            "lineno": 112,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003372",
                "name": "Logger#",
                "type": "MethodDefinition",
                "paramnames": [
                    "pluginName",
                    "message",
                    "type"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Logs strings using different console levels and a module label.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the calling module.",
                "name": "module"
            },
            {
                "type": {
                    "names": [
                        "any",
                        "Array.<any>"
                    ]
                },
                "description": "Messages to have logged.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "module:Logger.LogTypes"
                    ]
                },
                "description": "Type of log to use in console.",
                "name": "type"
            }
        ],
        "name": "",
        "longname": "",
        "kind": "function",
        "memberof": "module:Logger~Logger"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3468,
                3490
            ],
            "filename": "logger.js",
            "lineno": 113,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003383",
                "name": "type",
                "type": "CallExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "module:Logger~type",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:Logger"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3598,
                3632
            ],
            "filename": "logger.js",
            "lineno": 116,
            "columnno": 37,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003396",
                "name": "message",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "module:Logger~message",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:Logger"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3769,
                3803
            ],
            "filename": "logger.js",
            "lineno": 119,
            "columnno": 44,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003411",
                "name": "message",
                "type": "ArrayExpression",
                "funcscope": "<anonymous>",
                "value": "[\"pluginName\",\"\"]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "message",
        "longname": "module:Logger~message",
        "kind": "member",
        "scope": "inner",
        "memberof": "module:Logger"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3830,
                3874
            ],
            "filename": "logger.js",
            "lineno": 121,
            "columnno": 14,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003418",
                "name": "displayName",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "displayName",
        "longname": "<anonymous>~displayName",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4046,
                4068
            ],
            "filename": "logger.js",
            "lineno": 129,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003459",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "module:Logger",
        "longname": "module:Logger",
        "kind": "member"
    },
    {
        "comment": "/**\n * `Patcher` is a utility class for modifying existing functions. Instance is accessible through the {@link BdApi}.\n * This is extremely useful for modifying the internals of Discord by adjusting return value or React renders, or arguments of internal functions.\n * @type Patcher\n * @summary {@link Patcher} is a utility class for modifying existing functions.\n * @name Patcher\n */",
        "meta": {
            "filename": "patcher.js",
            "lineno": 6,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`Patcher` is a utility class for modifying existing functions. Instance is accessible through the {@link BdApi}.\nThis is extremely useful for modifying the internals of Discord by adjusting return value or React renders, or arguments of internal functions.",
        "type": {
            "names": [
                "Patcher"
            ]
        },
        "summary": "{@link Patcher} is a utility class for modifying existing functions.",
        "name": "Patcher",
        "longname": "Patcher",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                483,
                4903
            ],
            "filename": "patcher.js",
            "lineno": 13,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003471",
                "name": "Patcher",
                "type": "ClassDeclaration",
                "paramnames": [
                    "callerName"
                ]
            }
        },
        "undocumented": true,
        "name": "Patcher",
        "longname": "Patcher",
        "kind": "class",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                504,
                521
            ],
            "filename": "patcher.js",
            "lineno": 15,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003474",
                "name": "callerName",
                "type": "ClassPrivateProperty"
            }
        },
        "undocumented": true,
        "name": "callerName",
        "longname": "Patcher#callerName",
        "kind": "member",
        "memberof": "Patcher",
        "scope": "instance",
        "access": "private"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                526,
                629
            ],
            "filename": "patcher.js",
            "lineno": 16,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003476",
                "name": "Patcher",
                "type": "MethodDefinition",
                "paramnames": [
                    "callerName"
                ]
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "Patcher",
        "longname": "Patcher",
        "kind": "class",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                593,
                622
            ],
            "filename": "patcher.js",
            "lineno": 18,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003486",
                "name": "this.",
                "type": "Identifier",
                "value": "callerName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "Patcher",
        "longname": "Patcher.Patcher",
        "kind": "member",
        "memberof": "Patcher",
        "scope": "static"
    },
    {
        "comment": "/**\n     * This method patches onto another function, allowing your code to run beforehand. \n     * Using this, you are also able to modify the incoming arguments before the original method is run.\n     * \n     * @param {string} caller Name of the caller of the patch function\n     * @param {object} moduleToPatch Object with the function to be patched. Can also be an object's prototype.\n     * @param {string} functionName Name of the function to be patched\n     * @param {function} callback Function to run before the original method. The function is given the `this` context and the `arguments` of the original function.\n     * @returns {function} Function that cancels the original patch\n     */",
        "meta": {
            "range": [
                1340,
                1705
            ],
            "filename": "patcher.js",
            "lineno": 31,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003492",
                "name": "Patcher#before",
                "type": "MethodDefinition",
                "paramnames": [
                    "caller",
                    "moduleToPatch",
                    "functionName",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "This method patches onto another function, allowing your code to run beforehand. \nUsing this, you are also able to modify the incoming arguments before the original method is run.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the caller of the patch function",
                "name": "caller"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object with the function to be patched. Can also be an object's prototype.",
                "name": "moduleToPatch"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the function to be patched",
                "name": "functionName"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function to run before the original method. The function is given the `this` context and the `arguments` of the original function.",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function that cancels the original patch"
            }
        ],
        "name": "before",
        "longname": "Patcher#before",
        "kind": "function",
        "memberof": "Patcher",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1440,
                1463
            ],
            "filename": "patcher.js",
            "lineno": 33,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003507",
                "name": "callback",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "functionName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "callback",
        "longname": "<anonymous>~callback",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1477,
                1505
            ],
            "filename": "patcher.js",
            "lineno": 34,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003511",
                "name": "functionName",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "moduleToPatch",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "functionName",
        "longname": "<anonymous>~functionName",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1519,
                1541
            ],
            "filename": "patcher.js",
            "lineno": 35,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003515",
                "name": "moduleToPatch",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "caller",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "moduleToPatch",
        "longname": "<anonymous>~moduleToPatch",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1555,
                1580
            ],
            "filename": "patcher.js",
            "lineno": 36,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003519",
                "name": "caller",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "caller",
        "longname": "<anonymous>~caller",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1682,
                1696
            ],
            "filename": "patcher.js",
            "lineno": 38,
            "columnno": 90,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003535",
                "name": "type",
                "type": "Literal",
                "value": "before"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "type",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n     * This method patches onto another function, allowing your code to run instead. \n     * Using this, you are able to replace the original completely. You can still call the original manually if needed.\n     * \n     * @param {string} caller Name of the caller of the patch function\n     * @param {object} moduleToPatch Object with the function to be patched. Can also be an object's prototype.\n     * @param {string} functionName Name of the function to be patched\n     * @param {function} callback Function to run before the original method. The function is given the `this` context, `arguments` of the original function, and also the original function.\n     * @returns {function} Function that cancels the original patch\n     */",
        "meta": {
            "range": [
                2453,
                2820
            ],
            "filename": "patcher.js",
            "lineno": 51,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003537",
                "name": "Patcher#instead",
                "type": "MethodDefinition",
                "paramnames": [
                    "caller",
                    "moduleToPatch",
                    "functionName",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "This method patches onto another function, allowing your code to run instead. \nUsing this, you are able to replace the original completely. You can still call the original manually if needed.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the caller of the patch function",
                "name": "caller"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object with the function to be patched. Can also be an object's prototype.",
                "name": "moduleToPatch"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the function to be patched",
                "name": "functionName"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function to run before the original method. The function is given the `this` context, `arguments` of the original function, and also the original function.",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function that cancels the original patch"
            }
        ],
        "name": "instead",
        "longname": "Patcher#instead",
        "kind": "function",
        "memberof": "Patcher",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2554,
                2577
            ],
            "filename": "patcher.js",
            "lineno": 53,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003552",
                "name": "callback",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "functionName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "callback",
        "longname": "<anonymous>~callback",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2591,
                2619
            ],
            "filename": "patcher.js",
            "lineno": 54,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003556",
                "name": "functionName",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "moduleToPatch",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "functionName",
        "longname": "<anonymous>~functionName",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2633,
                2655
            ],
            "filename": "patcher.js",
            "lineno": 55,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003560",
                "name": "moduleToPatch",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "caller",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "moduleToPatch",
        "longname": "<anonymous>~moduleToPatch",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2669,
                2694
            ],
            "filename": "patcher.js",
            "lineno": 56,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003564",
                "name": "caller",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "caller",
        "longname": "<anonymous>~caller",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2796,
                2811
            ],
            "filename": "patcher.js",
            "lineno": 58,
            "columnno": 90,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003580",
                "name": "type",
                "type": "Literal",
                "value": "instead"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "type",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n     * This method patches onto another function, allowing your code to run afterwards. \n     * Using this, you are able to modify the return value after the original method is run.\n     * \n     * @param {string} caller Name of the caller of the patch function\n     * @param {object} moduleToPatch Object with the function to be patched. Can also be an object's prototype.\n     * @param {string} functionName Name of the function to be patched\n     * @param {function} callback Function to run after the original method. The function is given the `this` context, the `arguments` of the original function, and the `return` value of the original function.\n     * @returns {function} Function that cancels the original patch\n     */",
        "meta": {
            "range": [
                3564,
                3927
            ],
            "filename": "patcher.js",
            "lineno": 71,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003582",
                "name": "Patcher#after",
                "type": "MethodDefinition",
                "paramnames": [
                    "caller",
                    "moduleToPatch",
                    "functionName",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "This method patches onto another function, allowing your code to run afterwards. \nUsing this, you are able to modify the return value after the original method is run.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the caller of the patch function",
                "name": "caller"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object with the function to be patched. Can also be an object's prototype.",
                "name": "moduleToPatch"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the function to be patched",
                "name": "functionName"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function to run after the original method. The function is given the `this` context, the `arguments` of the original function, and the `return` value of the original function.",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function that cancels the original patch"
            }
        ],
        "name": "after",
        "longname": "Patcher#after",
        "kind": "function",
        "memberof": "Patcher",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3663,
                3686
            ],
            "filename": "patcher.js",
            "lineno": 73,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003597",
                "name": "callback",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "functionName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "callback",
        "longname": "<anonymous>~callback",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3700,
                3728
            ],
            "filename": "patcher.js",
            "lineno": 74,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003601",
                "name": "functionName",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "moduleToPatch",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "functionName",
        "longname": "<anonymous>~functionName",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3742,
                3764
            ],
            "filename": "patcher.js",
            "lineno": 75,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003605",
                "name": "moduleToPatch",
                "type": "Identifier",
                "funcscope": "<anonymous>",
                "value": "caller",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "moduleToPatch",
        "longname": "<anonymous>~moduleToPatch",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3778,
                3803
            ],
            "filename": "patcher.js",
            "lineno": 76,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003609",
                "name": "caller",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "caller",
        "longname": "<anonymous>~caller",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3905,
                3918
            ],
            "filename": "patcher.js",
            "lineno": 78,
            "columnno": 90,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003625",
                "name": "type",
                "type": "Literal",
                "value": "after"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "type",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n     * Returns all patches by a particular caller. The patches all have an `unpatch()` method.\n     * \n     * @param {string} caller ID of the original patches\n     * @returns {Array<function>} Array of all the patch objects\n     */",
        "meta": {
            "range": [
                4174,
                4475
            ],
            "filename": "patcher.js",
            "lineno": 87,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003627",
                "name": "Patcher#getPatchesByCaller",
                "type": "MethodDefinition",
                "paramnames": [
                    "caller"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Returns all patches by a particular caller. The patches all have an `unpatch()` method.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "ID of the original patches",
                "name": "caller"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<function()>"
                    ]
                },
                "description": "Array of all the patch objects"
            }
        ],
        "name": "getPatchesByCaller",
        "longname": "Patcher#getPatchesByCaller",
        "kind": "function",
        "memberof": "Patcher",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4233,
                4258
            ],
            "filename": "patcher.js",
            "lineno": 88,
            "columnno": 30,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003638",
                "name": "caller",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "caller",
        "longname": "<anonymous>~caller",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "/**\n     * Automatically cancels all patches created with a specific ID.\n     * \n     * @param {string} caller ID of the original patches\n     */",
        "meta": {
            "range": [
                4631,
                4901
            ],
            "filename": "patcher.js",
            "lineno": 98,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003662",
                "name": "Patcher#unpatchAll",
                "type": "MethodDefinition",
                "paramnames": [
                    "caller"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Automatically cancels all patches created with a specific ID.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "ID of the original patches",
                "name": "caller"
            }
        ],
        "name": "unpatchAll",
        "longname": "Patcher#unpatchAll",
        "kind": "function",
        "memberof": "Patcher",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4682,
                4707
            ],
            "filename": "patcher.js",
            "lineno": 99,
            "columnno": 30,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003673",
                "name": "caller",
                "type": "MemberExpression",
                "funcscope": "<anonymous>",
                "value": "this.",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "caller",
        "longname": "<anonymous>~caller",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4963,
                4986
            ],
            "filename": "patcher.js",
            "lineno": 107,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003711",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * `ReactUtils` is a utility class for interacting with React internals. Instance is accessible through the {@link BdApi}.\n * This is extremely useful for interacting with the internals of the UI.\n * @type ReactUtils\n * @summary {@link ReactUtils} is a utility class for interacting with React internals.\n * @name ReactUtils\n */",
        "meta": {
            "filename": "reactutils.js",
            "lineno": 4,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`ReactUtils` is a utility class for interacting with React internals. Instance is accessible through the {@link BdApi}.\nThis is extremely useful for interacting with the internals of the UI.",
        "type": {
            "names": [
                "ReactUtils"
            ]
        },
        "summary": "{@link ReactUtils} is a utility class for interacting with React internals.",
        "name": "ReactUtils",
        "longname": "ReactUtils",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                396,
                3527
            ],
            "filename": "reactutils.js",
            "lineno": 11,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003720",
                "name": "ReactUtils",
                "type": "ObjectExpression",
                "value": "{\"rootInstance\":\"\",\"getInternalInstance\":\"\",\"getOwnerInstance\":\"\",\"wrapElement\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "ReactUtils",
        "longname": "ReactUtils",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                416,
                526
            ],
            "filename": "reactutils.js",
            "lineno": 13,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003723",
                "name": "rootInstance",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "rootInstance",
        "longname": "ReactUtils.rootInstance",
        "kind": "member",
        "memberof": "ReactUtils",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Gets the internal React data of a specified node.\n     * \n     * @param {HTMLElement} node Node to get the internal React data from\n     * @returns {object|undefined} Either the found data or `undefined` \n     */",
        "meta": {
            "range": [
                761,
                984
            ],
            "filename": "reactutils.js",
            "lineno": 21,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003728",
                "name": "getInternalInstance",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "description": "Gets the internal React data of a specified node.",
        "params": [
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "description": "Node to get the internal React data from",
                "name": "node"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object",
                        "undefined"
                    ]
                },
                "description": "Either the found data or `undefined`"
            }
        ],
        "name": "getInternalInstance",
        "longname": "ReactUtils.getInternalInstance",
        "kind": "function",
        "memberof": "ReactUtils",
        "scope": "static"
    },
    {
        "comment": "/**\n      * Attempts to find the \"owner\" node to the current node. This is generally \n      * a node with a `stateNode` - a class component.\n      * \n      * @param {HTMLElement} node Node to obtain React instance of\n      * @param {object} options Options for the search\n      * @param {array} [options.include] List of items to include in the search\n      * @param {array} [options.exclude=[\"Popout\", \"Tooltip\", \"Scroller\", \"BackgroundFlash\"]] List of items to exclude from the search.\n      * @param {callable} [options.filter=_=>_] Filter to check the current instance with (should return a boolean)\n      * @return {object|undefined} The owner instance or `undefined` if not found\n      */",
        "meta": {
            "range": [
                1690,
                2719
            ],
            "filename": "reactutils.js",
            "lineno": 37,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003766",
                "name": "getOwnerInstance",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null,
                "excluding": "ReactUtils.getOwnerInstance~excluding",
                "nameFilter": "ReactUtils.getOwnerInstance~nameFilter",
                "getDisplayName": "ReactUtils.getOwnerInstance~getDisplayName",
                "classFilter": "ReactUtils.getOwnerInstance~classFilter",
                "curr": "ReactUtils.getOwnerInstance~curr",
                "owner": "ReactUtils.getOwnerInstance~owner"
            }
        },
        "description": "Attempts to find the \"owner\" node to the current node. This is generally \na node with a `stateNode` - a class component.",
        "params": [
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "description": "Node to obtain React instance of",
                "name": "node"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Options for the search",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "array"
                    ]
                },
                "optional": true,
                "description": "List of items to include in the search",
                "name": "options.include"
            },
            {
                "type": {
                    "names": [
                        "array"
                    ]
                },
                "optional": true,
                "defaultvalue": "[\"Popout\", \"Tooltip\", \"Scroller\", \"BackgroundFlash\"]",
                "description": "List of items to exclude from the search.",
                "name": "options.exclude"
            },
            {
                "type": {
                    "names": [
                        "callable"
                    ]
                },
                "optional": true,
                "defaultvalue": "_=>_",
                "description": "Filter to check the current instance with (should return a boolean)",
                "name": "options.filter"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object",
                        "undefined"
                    ]
                },
                "description": "The owner instance or `undefined` if not found"
            }
        ],
        "name": "getOwnerInstance",
        "longname": "ReactUtils.getOwnerInstance",
        "kind": "function",
        "memberof": "ReactUtils",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1714,
                1721
            ],
            "filename": "reactutils.js",
            "lineno": 37,
            "columnno": 28,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003771",
                "name": "include",
                "type": "Identifier",
                "value": "include"
            }
        },
        "undocumented": true,
        "name": "include",
        "longname": "include",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1723,
                1785
            ],
            "filename": "reactutils.js",
            "lineno": 37,
            "columnno": 37,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003773",
                "name": "exclude",
                "type": "AssignmentPattern",
                "value": "exclude"
            }
        },
        "undocumented": true,
        "name": "exclude",
        "longname": "exclude",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1787,
                1802
            ],
            "filename": "reactutils.js",
            "lineno": 37,
            "columnno": 101,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003781",
                "name": "filter",
                "type": "AssignmentPattern",
                "value": "filter"
            }
        },
        "undocumented": true,
        "name": "filter",
        "longname": "filter",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1876,
                1909
            ],
            "filename": "reactutils.js",
            "lineno": 39,
            "columnno": 14,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003796",
                "name": "excluding",
                "type": "BinaryExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "excluding",
        "longname": "ReactUtils.getOwnerInstance~excluding",
        "kind": "constant",
        "memberof": "ReactUtils.getOwnerInstance",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1925,
                1967
            ],
            "filename": "reactutils.js",
            "lineno": 40,
            "columnno": 14,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003802",
                "name": "nameFilter",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "nameFilter",
        "longname": "ReactUtils.getOwnerInstance~nameFilter",
        "kind": "constant",
        "memberof": "ReactUtils.getOwnerInstance",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1977,
                2150
            ],
            "filename": "reactutils.js",
            "lineno": 41,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003808",
                "name": "getDisplayName",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "owner"
                ]
            },
            "vars": {
                "type": "ReactUtils.getOwnerInstance~getDisplayName~type"
            }
        },
        "undocumented": true,
        "name": "getDisplayName",
        "longname": "ReactUtils.getOwnerInstance~getDisplayName",
        "kind": "function",
        "memberof": "ReactUtils.getOwnerInstance",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2028,
                2045
            ],
            "filename": "reactutils.js",
            "lineno": 42,
            "columnno": 18,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003813",
                "name": "type",
                "type": "MemberExpression",
                "value": "owner.type"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "ReactUtils.getOwnerInstance~getDisplayName~type",
        "kind": "constant",
        "memberof": "ReactUtils.getOwnerInstance~getDisplayName",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2159,
                2327
            ],
            "filename": "reactutils.js",
            "lineno": 46,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003833",
                "name": "classFilter",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "owner"
                ]
            },
            "vars": {
                "name": "ReactUtils.getOwnerInstance~classFilter~name"
            }
        },
        "undocumented": true,
        "name": "classFilter",
        "longname": "ReactUtils.getOwnerInstance~classFilter",
        "kind": "function",
        "memberof": "ReactUtils.getOwnerInstance",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2207,
                2235
            ],
            "filename": "reactutils.js",
            "lineno": 47,
            "columnno": 18,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003838",
                "name": "name",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "ReactUtils.getOwnerInstance~classFilter~name",
        "kind": "constant",
        "memberof": "ReactUtils.getOwnerInstance~classFilter",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2349,
                2392
            ],
            "filename": "reactutils.js",
            "lineno": 51,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003858",
                "name": "curr",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "curr",
        "longname": "ReactUtils.getOwnerInstance~curr",
        "kind": "member",
        "memberof": "ReactUtils.getOwnerInstance",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2407,
                2433
            ],
            "filename": "reactutils.js",
            "lineno": 52,
            "columnno": 13,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003866",
                "name": "curr",
                "type": "LogicalExpression",
                "funcscope": "ReactUtils.getOwnerInstance",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "curr",
        "longname": "ReactUtils.getOwnerInstance~curr",
        "kind": "member",
        "memberof": "ReactUtils.getOwnerInstance",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2450,
                2468
            ],
            "filename": "reactutils.js",
            "lineno": 52,
            "columnno": 56,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003876",
                "name": "curr",
                "type": "MemberExpression",
                "funcscope": "ReactUtils.getOwnerInstance",
                "value": "curr.return",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "curr",
        "longname": "ReactUtils.getOwnerInstance~curr",
        "kind": "member",
        "memberof": "ReactUtils.getOwnerInstance",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2531,
                2553
            ],
            "filename": "reactutils.js",
            "lineno": 54,
            "columnno": 18,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003888",
                "name": "owner",
                "type": "MemberExpression",
                "value": "curr.stateNode"
            }
        },
        "undocumented": true,
        "name": "owner",
        "longname": "ReactUtils.getOwnerInstance~owner",
        "kind": "constant",
        "memberof": "ReactUtils.getOwnerInstance",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n      * Creates an unrendered React component that wraps HTML elements.\n      * \n      * @param {HTMLElement} element Element or array of elements to wrap\n      * @returns {object} Unrendered React component\n      */",
        "meta": {
            "range": [
                2951,
                3524
            ],
            "filename": "reactutils.js",
            "lineno": 67,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003914",
                "name": "wrapElement",
                "type": "FunctionExpression"
            },
            "vars": {
                "undefined": null
            }
        },
        "description": "Creates an unrendered React component that wraps HTML elements.",
        "params": [
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "description": "Element or array of elements to wrap",
                "name": "element"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Unrendered React component"
            }
        ],
        "name": "wrapElement",
        "longname": "ReactUtils.wrapElement",
        "kind": "function",
        "memberof": "ReactUtils",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3128,
                3150
            ],
            "filename": "reactutils.js",
            "lineno": 71,
            "columnno": 16,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003937",
                "name": "this.element",
                "type": "Identifier",
                "value": "element",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "element",
        "longname": "<anonymous>#element",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3168,
                3198
            ],
            "filename": "reactutils.js",
            "lineno": 72,
            "columnno": 16,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003943",
                "name": "this.state",
                "type": "ObjectExpression",
                "value": "{\"hasError\":false}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "state",
        "longname": "<anonymous>#state",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "instance"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3182,
                3197
            ],
            "filename": "reactutils.js",
            "lineno": 72,
            "columnno": 30,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003948",
                "name": "hasError",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "hasError",
        "longname": "<anonymous>#state.hasError",
        "kind": "member",
        "memberof": "<anonymous>#state",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3226,
                3280
            ],
            "filename": "reactutils.js",
            "lineno": 74,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003950",
                "name": "componentDidCatch",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "componentDidCatch",
        "longname": "componentDidCatch",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3262,
                3276
            ],
            "filename": "reactutils.js",
            "lineno": 74,
            "columnno": 48,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003960",
                "name": "hasError",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "hasError",
        "longname": "hasError",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3293,
                3359
            ],
            "filename": "reactutils.js",
            "lineno": 75,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003962",
                "name": "componentDidMount",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "componentDidMount",
        "longname": "componentDidMount",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3372,
                3507
            ],
            "filename": "reactutils.js",
            "lineno": 76,
            "columnno": 12,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003978",
                "name": "render",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "render",
        "longname": "render",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3461,
                3487
            ],
            "filename": "reactutils.js",
            "lineno": 76,
            "columnno": 101,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100003998",
                "name": "className",
                "type": "Literal",
                "value": "react-wrapper"
            }
        },
        "undocumented": true,
        "name": "className",
        "longname": "className",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3489,
                3503
            ],
            "filename": "reactutils.js",
            "lineno": 76,
            "columnno": 129,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004000",
                "name": "ref",
                "type": "Literal",
                "value": "element"
            }
        },
        "undocumented": true,
        "name": "ref",
        "longname": "ref",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3558,
                3584
            ],
            "filename": "reactutils.js",
            "lineno": 84,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004008",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * `UI` is a utility class for creating user interfaces. Instance is accessible through the {@link BdApi}.\n * @type UI\n * @summary {@link UI} is a utility class for creating user interfaces.\n * @name UI\n */",
        "meta": {
            "filename": "ui.js",
            "lineno": 12,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`UI` is a utility class for creating user interfaces. Instance is accessible through the {@link BdApi}.",
        "type": {
            "names": [
                "UI"
            ]
        },
        "summary": "{@link UI} is a utility class for creating user interfaces.",
        "name": "UI",
        "longname": "UI",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                527,
                11775
            ],
            "filename": "ui.js",
            "lineno": 18,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004047",
                "name": "UI",
                "type": "ObjectExpression",
                "value": "{\"alert\":\"\",\"createTooltip\":\"\",\"showConfirmationModal\":\"\",\"showChangelogModal\":\"\",\"showToast\":\"\",\"showNotice\":\"\",\"openDialog\":\"\",\"buildSettingItem\":\"\",\"buildSettingsPanel\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "UI",
        "longname": "UI",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n     * Shows a generic but very customizable modal.\n     * \n     * @param {string} title Title of the modal\n     * @param {(string|ReactElement|Array<string|ReactElement>)} content A string of text to display in the modal\n     */",
        "meta": {
            "range": [
                776,
                843
            ],
            "filename": "ui.js",
            "lineno": 25,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004050",
                "name": "alert",
                "type": "FunctionExpression"
            }
        },
        "description": "Shows a generic but very customizable modal.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Title of the modal",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "ReactElement",
                        "Array.<(string|ReactElement)>"
                    ]
                },
                "description": "A string of text to display in the modal",
                "name": "content"
            }
        ],
        "name": "alert",
        "longname": "UI.alert",
        "kind": "function",
        "memberof": "UI",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Creates a tooltip to automatically show on hover.\n     *\n     * @param {HTMLElement} node DOM node to monitor and show the tooltip on\n     * @param {string|HTMLElement} content String to show in the tooltip\n     * @param {object} options Additional options for the tooltip\n     * @param {\"primary\"|\"info\"|\"success\"|\"warn\"|\"danger\"} [options.style=\"primary\"] Correlates to the Discord styling/colors\n     * @param {\"top\"|\"right\"|\"bottom\"|\"left\"} [options.side=\"top\"] Can be any of top, right, bottom, left\n     * @param {boolean} [options.preventFlip=false] Prevents moving the tooltip to the opposite side if it is too big or goes offscreen\n     * @param {boolean} [options.disabled=false] Whether the tooltip should be disabled from showing on hover\n     * @returns {Tooltip} The tooltip that was generated.\n     */",
        "meta": {
            "range": [
                1682,
                1787
            ],
            "filename": "ui.js",
            "lineno": 41,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004062",
                "name": "createTooltip",
                "type": "FunctionExpression"
            }
        },
        "description": "Creates a tooltip to automatically show on hover.",
        "params": [
            {
                "type": {
                    "names": [
                        "HTMLElement"
                    ]
                },
                "description": "DOM node to monitor and show the tooltip on",
                "name": "node"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "HTMLElement"
                    ]
                },
                "description": "String to show in the tooltip",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Additional options for the tooltip",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "\"primary\"",
                        "\"info\"",
                        "\"success\"",
                        "\"warn\"",
                        "\"danger\""
                    ]
                },
                "optional": true,
                "defaultvalue": "\"primary\"",
                "description": "Correlates to the Discord styling/colors",
                "name": "options.style"
            },
            {
                "type": {
                    "names": [
                        "\"top\"",
                        "\"right\"",
                        "\"bottom\"",
                        "\"left\""
                    ]
                },
                "optional": true,
                "defaultvalue": "\"top\"",
                "description": "Can be any of top, right, bottom, left",
                "name": "options.side"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Prevents moving the tooltip to the opposite side if it is too big or goes offscreen",
                "name": "options.preventFlip"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the tooltip should be disabled from showing on hover",
                "name": "options.disabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Tooltip"
                    ]
                },
                "description": "The tooltip that was generated."
            }
        ],
        "name": "createTooltip",
        "longname": "UI.createTooltip",
        "kind": "function",
        "memberof": "UI",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Shows a generic but very customizable confirmation modal with optional confirm and cancel callbacks.\n     * \n     * @param {string} title Title of the modal.\n     * @param {(string|ReactElement|Array<string|ReactElement>)} children Single or mixed array of React elements and strings. Everything is wrapped in Discord's `TextElement` component so strings will show and render properly.\n     * @param {object} [options] Options to modify the modal\n     * @param {boolean} [options.danger=false] Whether the main button should be red or not\n     * @param {string} [options.confirmText=Okay] Text for the confirmation/submit button\n     * @param {string} [options.cancelText=Cancel] Text for the cancel button\n     * @param {callable} [options.onConfirm=NOOP] Callback to occur when clicking the submit button\n     * @param {callable} [options.onCancel=NOOP] Callback to occur when clicking the cancel button\n     * @param {callable} [options.onClose=NOOP] Callback to occur when exiting the modal\n     * @returns {string} The key used for this modal.\n     */",
        "meta": {
            "range": [
                2866,
                2995
            ],
            "filename": "ui.js",
            "lineno": 59,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004078",
                "name": "showConfirmationModal",
                "type": "FunctionExpression"
            }
        },
        "description": "Shows a generic but very customizable confirmation modal with optional confirm and cancel callbacks.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Title of the modal.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "ReactElement",
                        "Array.<(string|ReactElement)>"
                    ]
                },
                "description": "Single or mixed array of React elements and strings. Everything is wrapped in Discord's `TextElement` component so strings will show and render properly.",
                "name": "children"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "Options to modify the modal",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the main button should be red or not",
                "name": "options.danger"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "Okay",
                "description": "Text for the confirmation/submit button",
                "name": "options.confirmText"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "Cancel",
                "description": "Text for the cancel button",
                "name": "options.cancelText"
            },
            {
                "type": {
                    "names": [
                        "callable"
                    ]
                },
                "optional": true,
                "defaultvalue": "NOOP",
                "description": "Callback to occur when clicking the submit button",
                "name": "options.onConfirm"
            },
            {
                "type": {
                    "names": [
                        "callable"
                    ]
                },
                "optional": true,
                "defaultvalue": "NOOP",
                "description": "Callback to occur when clicking the cancel button",
                "name": "options.onCancel"
            },
            {
                "type": {
                    "names": [
                        "callable"
                    ]
                },
                "optional": true,
                "defaultvalue": "NOOP",
                "description": "Callback to occur when exiting the modal",
                "name": "options.onClose"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The key used for this modal."
            }
        ],
        "name": "showConfirmationModal",
        "longname": "UI.showConfirmationModal",
        "kind": "function",
        "memberof": "UI",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Shows a changelog modal in a similar style to Discord's. Customizable with images, videos, colored sections and supports markdown.\n     * \n     * The changes option is a array of objects that have this typing:\n     * ```ts\n     * interface Changes {\n     *     title: string;\n     *     type: \"fixed\" | \"added\" | \"progress\" | \"changed\";\n     *     items: Array<string>;\n     *     blurb?: string;\n     * }\n     * ```\n     * \n     * @param {object} options Information to display in the modal\n     * @param {string} options.title Title to show in the modal header\n     * @param {string} options.subtitle Title to show below the main header\n     * @param {string} [options.blurb] Text to show in the body of the modal before the list of changes\n     * @param {string} [options.banner] URL to an image to display as the banner of the modal\n     * @param {string} [options.video] Youtube link or url of a video file to use as the banner\n     * @param {string} [options.poster] URL to use for the video freeze-frame poster\n     * @param {string|ReactElement|Array<string|ReactElement>} [options.footer] What to show in the modal footer\n     * @param {Array<Changes>} [options.changes] List of changes to show (see description for details)\n     * @returns {string} The key used for this modal.\n     */",
        "meta": {
            "range": [
                4313,
                4399
            ],
            "filename": "ui.js",
            "lineno": 87,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004094",
                "name": "showChangelogModal",
                "type": "FunctionExpression"
            }
        },
        "description": "Shows a changelog modal in a similar style to Discord's. Customizable with images, videos, colored sections and supports markdown.\n\nThe changes option is a array of objects that have this typing:\n```ts\ninterface Changes {\n    title: string;\n    type: \"fixed\" | \"added\" | \"progress\" | \"changed\";\n    items: Array<string>;\n    blurb?: string;\n}\n```",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Information to display in the modal",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Title to show in the modal header",
                "name": "options.title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Title to show below the main header",
                "name": "options.subtitle"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Text to show in the body of the modal before the list of changes",
                "name": "options.blurb"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "URL to an image to display as the banner of the modal",
                "name": "options.banner"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Youtube link or url of a video file to use as the banner",
                "name": "options.video"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "URL to use for the video freeze-frame poster",
                "name": "options.poster"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "ReactElement",
                        "Array.<(string|ReactElement)>"
                    ]
                },
                "optional": true,
                "description": "What to show in the modal footer",
                "name": "options.footer"
            },
            {
                "type": {
                    "names": [
                        "Array.<Changes>"
                    ]
                },
                "optional": true,
                "description": "List of changes to show (see description for details)",
                "name": "options.changes"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The key used for this modal."
            }
        ],
        "name": "showChangelogModal",
        "longname": "UI.showChangelogModal",
        "kind": "function",
        "memberof": "UI",
        "scope": "static"
    },
    {
        "comment": "/**\n     * This shows a toast similar to android towards the bottom of the screen.\n     *\n     * @param {string} content The string to show in the toast\n     * @param {object} options Options for the toast\n     * @param {string} [options.type=\"\"] Changes the type of the toast stylistically and semantically. Choices: \"\", \"info\", \"success\", \"danger\"/\"error\", \"warning\"/\"warn\". Default: \"\".\n     * @param {boolean} [options.icon=true] Determines whether the icon should show corresponding to the type. A toast without type will always have no icon. Default: `true`.\n     * @param {number} [options.timeout=3000] Adjusts the time (in ms) the toast should be shown for before disappearing automatically. Default: `3000`.\n     * @param {boolean} [options.forceShow=false] Whether to force showing the toast and ignore the BD setting\n     */",
        "meta": {
            "range": [
                5247,
                5326
            ],
            "filename": "ui.js",
            "lineno": 101,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004104",
                "name": "showToast",
                "type": "FunctionExpression"
            }
        },
        "description": "This shows a toast similar to android towards the bottom of the screen.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The string to show in the toast",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Options for the toast",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "Changes the type of the toast stylistically and semantically. Choices: \"\", \"info\", \"success\", \"danger\"/\"error\", \"warning\"/\"warn\". Default: \"\".",
                "name": "options.type"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Determines whether the icon should show corresponding to the type. A toast without type will always have no icon. Default: `true`.",
                "name": "options.icon"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 3000,
                "description": "Adjusts the time (in ms) the toast should be shown for before disappearing automatically. Default: `3000`.",
                "name": "options.timeout"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to force showing the toast and ignore the BD setting",
                "name": "options.forceShow"
            }
        ],
        "name": "showToast",
        "longname": "UI.showToast",
        "kind": "function",
        "memberof": "UI",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Shows a notice above Discord's chat layer.\n     * \n     * @param {string|Node} content Content of the notice\n     * @param {object} options Options for the notice\n     * @param {string} [options.type=\"info\" | \"error\" | \"warning\" | \"success\"] Type for the notice. Will affect the color.\n     * @param {Array<{label: string, onClick: function}>} [options.buttons] Buttons that should be added next to the notice text\n     * @param {number} [options.timeout=10000] Timeout until the notice is closed. Will not fire when set to `0`.\n     * @returns {function} A callback for closing the notice. Passing `true` as first parameter closes immediately without transitioning out.\n     */",
        "meta": {
            "range": [
                6027,
                6115
            ],
            "filename": "ui.js",
            "lineno": 115,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004118",
                "name": "showNotice",
                "type": "FunctionExpression"
            }
        },
        "description": "Shows a notice above Discord's chat layer.",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "Node"
                    ]
                },
                "description": "Content of the notice",
                "name": "content"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Options for the notice",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"info\" | \"error\" | \"warning\" | \"success\"",
                "description": "Type for the notice. Will affect the color.",
                "name": "options.type"
            },
            {
                "type": {
                    "names": [
                        "Array.<{label: string, onClick: function()}>"
                    ]
                },
                "optional": true,
                "description": "Buttons that should be added next to the notice text",
                "name": "options.buttons"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 10000,
                "description": "Timeout until the notice is closed. Will not fire when set to `0`.",
                "name": "options.timeout"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A callback for closing the notice. Passing `true` as first parameter closes immediately without transitioning out."
            }
        ],
        "name": "showNotice",
        "longname": "UI.showNotice",
        "kind": "function",
        "memberof": "UI",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Gives access to the [Electron Dialog](https://www.electronjs.org/docs/latest/api/dialog/) api. \n     * Returns a `Promise` that resolves to an `object` that has a `boolean` cancelled and a `filePath` string for saving and a `filePaths` string array for opening.\n     * \n     * @param {object} options Options object to configure the dialog\n     * @param {\"open\"|\"save\"} [options.mode=\"open\"] Determines whether the dialog should open or save files\n     * @param {string} [options.defaultPath=~] Path the dialog should show on launch\n     * @param {Array<object<string, string[]>>} [options.filters=[]] An array of [file filters](https://www.electronjs.org/docs/latest/api/structures/file-filter)\n     * @param {string} [options.title] Title for the titlebar\n     * @param {string} [options.message] Message for the dialog\n     * @param {boolean} [options.showOverwriteConfirmation=false] Whether the user should be prompted when overwriting a file\n     * @param {boolean} [options.showHiddenFiles=false] Whether hidden files should be shown in the dialog\n     * @param {boolean} [options.promptToCreate=false] Whether the user should be prompted to create non-existent folders\n     * @param {boolean} [options.openDirectory=false] Whether the user should be able to select a directory as a target\n     * @param {boolean} [options.openFile=true] Whether the user should be able to select a file as a target\n     * @param {boolean} [options.multiSelections=false] Whether the user should be able to select multiple targets\n     * @param {boolean} [options.modal=false] Whether the dialog should act as a modal to the main window\n     * @returns {Promise<object>} Result of the dialog\n     */",
        "meta": {
            "range": [
                7827,
                7987
            ],
            "filename": "ui.js",
            "lineno": 138,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004132",
                "name": "openDialog",
                "type": "FunctionExpression"
            },
            "vars": {
                "data": "UI.openDialog~data"
            }
        },
        "description": "Gives access to the [Electron Dialog](https://www.electronjs.org/docs/latest/api/dialog/) api. \nReturns a `Promise` that resolves to an `object` that has a `boolean` cancelled and a `filePath` string for saving and a `filePaths` string array for opening.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Options object to configure the dialog",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "\"open\"",
                        "\"save\""
                    ]
                },
                "optional": true,
                "defaultvalue": "\"open\"",
                "description": "Determines whether the dialog should open or save files",
                "name": "options.mode"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "~",
                "description": "Path the dialog should show on launch",
                "name": "options.defaultPath"
            },
            {
                "type": {
                    "names": [
                        "Array.<object.<string, Array.<string>>>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "An array of [file filters](https://www.electronjs.org/docs/latest/api/structures/file-filter)",
                "name": "options.filters"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Title for the titlebar",
                "name": "options.title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Message for the dialog",
                "name": "options.message"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the user should be prompted when overwriting a file",
                "name": "options.showOverwriteConfirmation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether hidden files should be shown in the dialog",
                "name": "options.showHiddenFiles"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the user should be prompted to create non-existent folders",
                "name": "options.promptToCreate"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the user should be able to select a directory as a target",
                "name": "options.openDirectory"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether the user should be able to select a file as a target",
                "name": "options.openFile"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the user should be able to select multiple targets",
                "name": "options.multiSelections"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the dialog should act as a modal to the main window",
                "name": "options.modal"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<object>"
                    ]
                },
                "description": "Result of the dialog"
            }
        ],
        "name": "openDialog",
        "longname": "UI.openDialog",
        "kind": "function",
        "memberof": "UI",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7869,
                7905
            ],
            "filename": "ui.js",
            "lineno": 139,
            "columnno": 14,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004137",
                "name": "data",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "data",
        "longname": "UI.openDialog~data",
        "kind": "constant",
        "memberof": "UI.openDialog",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n     * Creates a single setting wrapped in a setting item that has a name and note.\n     * The shape of the object should match the props of the component you want to render, check the\n     * `BdApi.Components` section for details. Shown below are ones common to all setting types.\n     * @param {object} setting \n     * @param {string} setting.type One of: dropdown, number, switch, text, slider, radio, keybind, color, custom\n     * @param {string} setting.id Identifier to used for callbacks\n     * @param {string} setting.name Visual name to display\n     * @param {string} setting.note Visual description to display\n     * @param {any} setting.value Current value of the setting\n     * @param {ReactElement} [setting.children] Only used for \"custom\" type\n     * @param {CallableFunction} [setting.onChange] Callback when the value changes (only argument is new value)\n     * @param {boolean} [setting.disabled=false] Whether this setting is disabled\n     * @param {boolean} [setting.inline=true] Whether the input should render inline with the name (this is false by default for radio type)\n     * @returns A SettingItem with a an input as the child\n     */",
        "meta": {
            "range": [
                9164,
                9235
            ],
            "filename": "ui.js",
            "lineno": 161,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004157",
                "name": "buildSettingItem",
                "type": "FunctionExpression"
            }
        },
        "description": "Creates a single setting wrapped in a setting item that has a name and note.\nThe shape of the object should match the props of the component you want to render, check the\n`BdApi.Components` section for details. Shown below are ones common to all setting types.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "setting"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "One of: dropdown, number, switch, text, slider, radio, keybind, color, custom",
                "name": "setting.type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Identifier to used for callbacks",
                "name": "setting.id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Visual name to display",
                "name": "setting.name"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Visual description to display",
                "name": "setting.note"
            },
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "Current value of the setting",
                "name": "setting.value"
            },
            {
                "type": {
                    "names": [
                        "ReactElement"
                    ]
                },
                "optional": true,
                "description": "Only used for \"custom\" type",
                "name": "setting.children"
            },
            {
                "type": {
                    "names": [
                        "CallableFunction"
                    ]
                },
                "optional": true,
                "description": "Callback when the value changes (only argument is new value)",
                "name": "setting.onChange"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether this setting is disabled",
                "name": "setting.disabled"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether the input should render inline with the name (this is false by default for radio type)",
                "name": "setting.inline"
            }
        ],
        "returns": [
            {
                "description": "A SettingItem with a an input as the child"
            }
        ],
        "name": "buildSettingItem",
        "longname": "UI.buildSettingItem",
        "kind": "function",
        "memberof": "UI",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Creates a settings panel (react element) based on json-like data.\n     * \n     * The `settings` array here is an array of the same settings types described in `buildSetting` above.\n     * However, this API allows one additional setting \"type\" called `category`. This has the same properties\n     * as the Group React Component found under the `Components` API.\n     * \n     * `onChange` will always be given 3 arguments: category id, setting id, and setting value. In the case\n     * that you have settings on the \"root\" of the panel, the category id is `null`. Any `onChange`\n     * listeners attached to individual settings will fire before the panel-level change listener.\n     * \n     * `onDrawerToggle` is given 2 arguments: category id, and the current shown state. You can use this to\n     * save drawer states.\n     * \n     * `getDrawerState` is given 2 arguments: category id, and the default shown state. You can use this to\n     * recall a saved drawer state.\n     * \n     * @param {object} props \n     * @param {Array<object>} props.settings Array of settings to show\n     * @param {CallableFunction} props.onChange Function called on every change\n     * @param {CallableFunction} [props.onDrawerToggle] Optionally used to save drawer states\n     * @param {CallableFunction} [props.getDrawerState] Optionially used to recall drawer states\n     * @returns React element usable for a settings panel\n     */",
        "meta": {
            "range": [
                10674,
                11772
            ],
            "filename": "ui.js",
            "lineno": 189,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004165",
                "name": "buildSettingsPanel",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "description": "Creates a settings panel (react element) based on json-like data.\n\nThe `settings` array here is an array of the same settings types described in `buildSetting` above.\nHowever, this API allows one additional setting \"type\" called `category`. This has the same properties\nas the Group React Component found under the `Components` API.\n\n`onChange` will always be given 3 arguments: category id, setting id, and setting value. In the case\nthat you have settings on the \"root\" of the panel, the category id is `null`. Any `onChange`\nlisteners attached to individual settings will fire before the panel-level change listener.\n\n`onDrawerToggle` is given 2 arguments: category id, and the current shown state. You can use this to\nsave drawer states.\n\n`getDrawerState` is given 2 arguments: category id, and the default shown state. You can use this to\nrecall a saved drawer state.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "props"
            },
            {
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                },
                "description": "Array of settings to show",
                "name": "props.settings"
            },
            {
                "type": {
                    "names": [
                        "CallableFunction"
                    ]
                },
                "description": "Function called on every change",
                "name": "props.onChange"
            },
            {
                "type": {
                    "names": [
                        "CallableFunction"
                    ]
                },
                "optional": true,
                "description": "Optionally used to save drawer states",
                "name": "props.onDrawerToggle"
            },
            {
                "type": {
                    "names": [
                        "CallableFunction"
                    ]
                },
                "optional": true,
                "description": "Optionially used to recall drawer states",
                "name": "props.getDrawerState"
            }
        ],
        "returns": [
            {
                "description": "React element usable for a settings panel"
            }
        ],
        "name": "buildSettingsPanel",
        "longname": "UI.buildSettingsPanel",
        "kind": "function",
        "memberof": "UI",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10694,
                10702
            ],
            "filename": "ui.js",
            "lineno": 189,
            "columnno": 24,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004168",
                "name": "settings",
                "type": "Identifier",
                "value": "settings"
            }
        },
        "undocumented": true,
        "name": "settings",
        "longname": "settings",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10704,
                10712
            ],
            "filename": "ui.js",
            "lineno": 189,
            "columnno": 34,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004170",
                "name": "onChange",
                "type": "Identifier",
                "value": "onChange"
            }
        },
        "undocumented": true,
        "name": "onChange",
        "longname": "onChange",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10714,
                10728
            ],
            "filename": "ui.js",
            "lineno": 189,
            "columnno": 44,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004172",
                "name": "onDrawerToggle",
                "type": "Identifier",
                "value": "onDrawerToggle"
            }
        },
        "undocumented": true,
        "name": "onDrawerToggle",
        "longname": "onDrawerToggle",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10730,
                10744
            ],
            "filename": "ui.js",
            "lineno": 189,
            "columnno": 60,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004174",
                "name": "getDrawerState",
                "type": "Identifier",
                "value": "getDrawerState"
            }
        },
        "undocumented": true,
        "name": "getDrawerState",
        "longname": "getDrawerState",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10874,
                10898
            ],
            "filename": "ui.js",
            "lineno": 192,
            "columnno": 51,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004191",
                "name": "id",
                "type": "Literal",
                "value": "buildSettingsPanel"
            }
        },
        "undocumented": true,
        "name": "id",
        "longname": "id",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10900,
                10916
            ],
            "filename": "ui.js",
            "lineno": 192,
            "columnno": 77,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004193",
                "name": "name",
                "type": "Literal",
                "value": "BdApi.UI"
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "name",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11113,
                11184
            ],
            "filename": "ui.js",
            "lineno": 196,
            "columnno": 22,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004225",
                "name": "shownByDefault",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "shownByDefault",
        "longname": "<anonymous>~shownByDefault",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11291,
                11309
            ],
            "filename": "ui.js",
            "lineno": 200,
            "columnno": 20,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004246",
                "name": "onChange",
                "type": "Identifier",
                "value": "onChange"
            }
        },
        "undocumented": true,
        "name": "onChange",
        "longname": "onChange",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11331,
                11391
            ],
            "filename": "ui.js",
            "lineno": 201,
            "columnno": 20,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004248",
                "name": "onDrawerToggle",
                "type": "ArrowFunctionExpression"
            }
        },
        "undocumented": true,
        "name": "onDrawerToggle",
        "longname": "onDrawerToggle",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11413,
                11482
            ],
            "filename": "ui.js",
            "lineno": 202,
            "columnno": 20,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004252",
                "name": "shown",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "shown",
        "longname": "shown",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11596,
                11737
            ],
            "filename": "ui.js",
            "lineno": 208,
            "columnno": 16,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004262",
                "name": "onChange",
                "type": "ArrowFunctionExpression"
            }
        },
        "undocumented": true,
        "name": "onChange",
        "longname": "onChange",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11798,
                11816
            ],
            "filename": "ui.js",
            "lineno": 220,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004282",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "/**\n * `Utils` is a utility containing commonly reused functions. Instance is accessible through the {@link BdApi}.\n * @type Utils\n * @summary {@link Utils} is a utility class for interacting with React internals.\n * @name Utils\n */",
        "meta": {
            "filename": "utils.js",
            "lineno": 5,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`Utils` is a utility containing commonly reused functions. Instance is accessible through the {@link BdApi}.",
        "type": {
            "names": [
                "Utils"
            ]
        },
        "summary": "{@link Utils} is a utility class for interacting with React internals.",
        "name": "Utils",
        "longname": "Utils",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                329,
                4046
            ],
            "filename": "utils.js",
            "lineno": 11,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004295",
                "name": "Utils",
                "type": "ObjectExpression",
                "value": "{\"findInTree\":\"\",\"extend\":\"\",\"debounce\":\"\",\"escapeHTML\":\"\",\"className\":\"\",\"getNestedValue\":\"\",\"semverCompare\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "Utils",
        "longname": "Utils",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n     * Finds a value, subobject, or array from a tree that matches a specific filter. This is a DFS.\n     * \n     * @param {object} tree Tree that should be walked\n     * @param {callable} searchFilter Filter to check against each object and subobject\n     * @param {object} options Additional options to customize the search\n     * @param {Array<string>|null} [options.walkable=null] Array of strings to use as keys that are allowed to be walked on. `null` indicates all keys are walkable.\n     * @param {Array<string>} [options.ignore=[]] Array of strings to use as keys to exclude from the search. Most helpful when `walkable = null`.\n     */",
        "meta": {
            "range": [
                997,
                1115
            ],
            "filename": "utils.js",
            "lineno": 21,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004298",
                "name": "findInTree",
                "type": "FunctionExpression"
            }
        },
        "description": "Finds a value, subobject, or array from a tree that matches a specific filter. This is a DFS.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Tree that should be walked",
                "name": "tree"
            },
            {
                "type": {
                    "names": [
                        "callable"
                    ]
                },
                "description": "Filter to check against each object and subobject",
                "name": "searchFilter"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Additional options to customize the search",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>",
                        "null"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "description": "Array of strings to use as keys that are allowed to be walked on. `null` indicates all keys are walkable.",
                "name": "options.walkable"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "Array of strings to use as keys to exclude from the search. Most helpful when `walkable = null`.",
                "name": "options.ignore"
            }
        ],
        "name": "findInTree",
        "longname": "Utils.findInTree",
        "kind": "function",
        "memberof": "Utils",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Deep extends an object with a set of other objects. Objects later in the list\n     * of `extenders` have priority, that is to say if one sets a key to be a primitive,\n     * it will be overwritten with the next one with the same key. If it is an object,\n     * and the keys match, the object is extended. This happens recursively.\n     * \n     * @param {object} extendee Object to be extended\n     * @param {...object} extenders Objects to extend with\n     * @returns {object} A reference to `extendee`\n     */",
        "meta": {
            "range": [
                1648,
                1743
            ],
            "filename": "utils.js",
            "lineno": 35,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004314",
                "name": "extend",
                "type": "FunctionExpression"
            }
        },
        "description": "Deep extends an object with a set of other objects. Objects later in the list\nof `extenders` have priority, that is to say if one sets a key to be a primitive,\nit will be overwritten with the next one with the same key. If it is an object,\nand the keys match, the object is extended. This happens recursively.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object to be extended",
                "name": "extendee"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "variable": true,
                "description": "Objects to extend with",
                "name": "extenders"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "A reference to `extendee`"
            }
        ],
        "name": "extend",
        "longname": "Utils.extend",
        "kind": "function",
        "memberof": "Utils",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Returns a function, that, as long as it continues to be invoked, will not\n     * be triggered. The function will be called after it stops being called for\n     * `delay` milliseconds. It is called at the end of the sequence (trailing edge).\n     * \n     * Adapted from the version by David Walsh (https://davidwalsh.name/javascript-debounce-function)\n     * \n     * @param {function} executor The function to be debounced\n     * @param {number} delay Number of ms to delay calls\n     * @return {function} A debounced version of the function\n     */",
        "meta": {
            "range": [
                2314,
                2399
            ],
            "filename": "utils.js",
            "lineno": 50,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004328",
                "name": "debounce",
                "type": "FunctionExpression"
            }
        },
        "description": "Returns a function, that, as long as it continues to be invoked, will not\nbe triggered. The function will be called after it stops being called for\n`delay` milliseconds. It is called at the end of the sequence (trailing edge).\n\nAdapted from the version by David Walsh (https://davidwalsh.name/javascript-debounce-function)",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to be debounced",
                "name": "executor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Number of ms to delay calls",
                "name": "delay"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A debounced version of the function"
            }
        ],
        "name": "debounce",
        "longname": "Utils.debounce",
        "kind": "function",
        "memberof": "Utils",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Takes a string of HTML and escapes it using the browser's own escaping mechanism.\n     * \n     * @param {string} html HTML to be escaped\n     * @return {string} Escaped HTML string\n     */",
        "meta": {
            "range": [
                2610,
                2677
            ],
            "filename": "utils.js",
            "lineno": 60,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004340",
                "name": "escapeHTML",
                "type": "FunctionExpression"
            }
        },
        "description": "Takes a string of HTML and escapes it using the browser's own escaping mechanism.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "HTML to be escaped",
                "name": "html"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Escaped HTML string"
            }
        ],
        "name": "escapeHTML",
        "longname": "Utils.escapeHTML",
        "kind": "function",
        "memberof": "Utils",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Builds a classname string from any number of arguments. This includes arrays and objects.\n     * When given an array all values from the array are added to the list.\n     * When given an object they keys are added as the classnames if the value is truthy.\n     * Copyright (c) 2018 Jed Watson https://github.com/JedWatson/classnames MIT License\n     * \n     * @param {...any} argument Anything that should be used to add classnames\n     * @returns {string} Joined classname\n     */",
        "meta": {
            "range": [
                3181,
                3250
            ],
            "filename": "utils.js",
            "lineno": 73,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004350",
                "name": "className",
                "type": "FunctionExpression"
            }
        },
        "description": "Builds a classname string from any number of arguments. This includes arrays and objects.\nWhen given an array all values from the array are added to the list.\nWhen given an object they keys are added as the classnames if the value is truthy.\nCopyright (c) 2018 Jed Watson https://github.com/JedWatson/classnames MIT License",
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "variable": true,
                "description": "Anything that should be used to add classnames",
                "name": "argument"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Joined classname"
            }
        ],
        "name": "className",
        "longname": "Utils.className",
        "kind": "function",
        "memberof": "Utils",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Gets a nested value (if it exists) of an object safely. keyPath should be something like `key.key2.key3`.\n     * Numbers can be used for arrays as well like `key.key2.array.0.id`.\n     * @param {object} obj - object to get nested value from\n     * @param {string} keyPath - key path to the desired value\n     */",
        "meta": {
            "range": [
                3584,
                3675
            ],
            "filename": "utils.js",
            "lineno": 83,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004360",
                "name": "getNestedValue",
                "type": "FunctionExpression"
            }
        },
        "description": "Gets a nested value (if it exists) of an object safely. keyPath should be something like `key.key2.key3`.\nNumbers can be used for arrays as well like `key.key2.array.0.id`.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "object to get nested value from",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "key path to the desired value",
                "name": "keyPath"
            }
        ],
        "name": "getNestedValue",
        "longname": "Utils.getNestedValue",
        "kind": "function",
        "memberof": "Utils",
        "scope": "static"
    },
    {
        "comment": "/**\n     * This works on semantic versioning e.g. \"1.0.0\".\n     * \n     * @param {string} currentVersion\n     * @param {string} newVersion\n     * @returns {number} 0 indicates equal, -1 indicates left hand greater, 1 indicates right hand greater\n     */",
        "meta": {
            "range": [
                3940,
                4044
            ],
            "filename": "utils.js",
            "lineno": 94,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004372",
                "name": "semverCompare",
                "type": "FunctionExpression"
            }
        },
        "description": "This works on semantic versioning e.g. \"1.0.0\".",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "currentVersion"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "newVersion"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "0 indicates equal, -1 indicates left hand greater, 1 indicates right hand greater"
            }
        ],
        "name": "semverCompare",
        "longname": "Utils.semverCompare",
        "kind": "function",
        "memberof": "Utils",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4072,
                4093
            ],
            "filename": "utils.js",
            "lineno": 101,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004388",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                111,
                541
            ],
            "filename": "webpack.js",
            "lineno": 6,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004403",
                "name": "getOptions",
                "type": "ArrowFunctionExpression"
            }
        },
        "undocumented": true,
        "name": "getOptions",
        "longname": "getOptions",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n * `Webpack` is a utility class for getting internal webpack modules. Instance is accessible through the {@link BdApi}.\n * This is extremely useful for interacting with the internals of Discord.\n * @type Webpack\n * @summary {@link Webpack} is a utility class for getting internal webpack modules.\n * @name Webpack\n */",
        "meta": {
            "filename": "webpack.js",
            "lineno": 17,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {}
        },
        "description": "`Webpack` is a utility class for getting internal webpack modules. Instance is accessible through the {@link BdApi}.\nThis is extremely useful for interacting with the internals of Discord.",
        "type": {
            "names": [
                "Webpack"
            ]
        },
        "summary": "{@link Webpack} is a utility class for getting internal webpack modules.",
        "name": "Webpack",
        "longname": "Webpack",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                872,
                12838
            ],
            "filename": "webpack.js",
            "lineno": 24,
            "columnno": 6,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004465",
                "name": "Webpack",
                "type": "ObjectExpression",
                "value": "{\"modules\":\"\",\"Filters\":\"\",\"getWithKey\":\"\",\"getModule\":\"\",\"getModules\":\"\",\"getBulk\":\"\",\"waitForModule\":\"\",\"getByRegex\":\"\",\"getAllByRegex\":\"\",\"getByPrototypeKeys\":\"\",\"getAllByPrototypeKeys\":\"\",\"getByKeys\":\"\",\"getAllByKeys\":\"\",\"getByStrings\":\"\",\"getAllByStrings\":\"\",\"getStore\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "Webpack",
        "longname": "Webpack",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\n     * A Proxy that returns the module source by ID.\n     */",
        "meta": {
            "range": [
                957,
                988
            ],
            "filename": "webpack.js",
            "lineno": 28,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004468",
                "name": "modules",
                "type": "MemberExpression",
                "value": "WebpackModules.modules"
            }
        },
        "description": "A Proxy that returns the module source by ID.",
        "name": "modules",
        "longname": "Webpack.modules",
        "kind": "member",
        "memberof": "Webpack",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Series of {@link Filters} to be used for finding webpack modules.\n     * @type Filters\n     * @memberof Webpack\n     */",
        "meta": {
            "range": [
                1130,
                3521
            ],
            "filename": "webpack.js",
            "lineno": 35,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004472",
                "name": "Filters",
                "type": "ObjectExpression",
                "value": "{\"byProps\":\"\",\"byKeys\":\"\",\"byPrototypeFields\":\"\",\"byPrototypeKeys\":\"\",\"byRegex\":\"\",\"byStrings\":\"\",\"byDisplayName\":\"\",\"byStoreName\":\"\",\"combine\":\"\"}"
            }
        },
        "description": "Series of {@link Filters} to be used for finding webpack modules.",
        "type": {
            "names": [
                "Filters"
            ]
        },
        "memberof": "Webpack",
        "name": "Filters",
        "longname": "Webpack.Filters",
        "kind": "member",
        "scope": "static"
    },
    {
        "comment": "/**\n         * @deprecated\n         */",
        "meta": {
            "range": [
                1196,
                1245
            ],
            "filename": "webpack.js",
            "lineno": 39,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004474",
                "name": "byProps",
                "type": "FunctionExpression"
            }
        },
        "deprecated": true,
        "name": "byProps",
        "longname": "Webpack.Filters.byProps",
        "kind": "function",
        "memberof": "Webpack.Filters",
        "scope": "static"
    },
    {
        "comment": "/**\n         * Generates a function that filters by a set of properties.\n         * @param {...string} keys List of property names\n         * @returns {function} A filter that checks for a set of properties\n         */",
        "meta": {
            "range": [
                1483,
                1529
            ],
            "filename": "webpack.js",
            "lineno": 46,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004485",
                "name": "byKeys",
                "type": "FunctionExpression"
            }
        },
        "description": "Generates a function that filters by a set of properties.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "variable": true,
                "description": "List of property names",
                "name": "keys"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A filter that checks for a set of properties"
            }
        ],
        "name": "byKeys",
        "longname": "Webpack.Filters.byKeys",
        "kind": "function",
        "memberof": "Webpack.Filters",
        "scope": "static"
    },
    {
        "comment": "/**\n         * @deprecated\n         */",
        "meta": {
            "range": [
                1587,
                1655
            ],
            "filename": "webpack.js",
            "lineno": 51,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004496",
                "name": "byPrototypeFields",
                "type": "FunctionExpression"
            }
        },
        "deprecated": true,
        "name": "byPrototypeFields",
        "longname": "Webpack.Filters.byPrototypeFields",
        "kind": "function",
        "memberof": "Webpack.Filters",
        "scope": "static"
    },
    {
        "comment": "/**\n         * Generates a function that filters by a set of properties on the object's prototype.\n         * @param {...string} props List of property names\n         * @returns {function} A filter that checks for a set of properties on the object's prototype.\n         */",
        "meta": {
            "range": [
                1947,
                2013
            ],
            "filename": "webpack.js",
            "lineno": 58,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004507",
                "name": "byPrototypeKeys",
                "type": "FunctionExpression"
            }
        },
        "description": "Generates a function that filters by a set of properties on the object's prototype.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "variable": true,
                "description": "List of property names",
                "name": "props"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A filter that checks for a set of properties on the object's prototype."
            }
        ],
        "name": "byPrototypeKeys",
        "longname": "Webpack.Filters.byPrototypeKeys",
        "kind": "function",
        "memberof": "Webpack.Filters",
        "scope": "static"
    },
    {
        "comment": "/**\n         * Generates a function that filters by a regex.\n         * @param {RegExp} search A RegExp to check on the module\n         * @param {function} filter Additional filter\n         * @returns {function} A filter that checks for a regex match\n         */",
        "meta": {
            "range": [
                2295,
                2342
            ],
            "filename": "webpack.js",
            "lineno": 66,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004518",
                "name": "byRegex",
                "type": "FunctionExpression"
            }
        },
        "description": "Generates a function that filters by a regex.",
        "params": [
            {
                "type": {
                    "names": [
                        "RegExp"
                    ]
                },
                "description": "A RegExp to check on the module",
                "name": "search"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Additional filter",
                "name": "filter"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A filter that checks for a regex match"
            }
        ],
        "name": "byRegex",
        "longname": "Webpack.Filters.byRegex",
        "kind": "function",
        "memberof": "Webpack.Filters",
        "scope": "static"
    },
    {
        "comment": "/**\n         * Generates a function that filters by strings.\n         * @param {...string} strings A list of strings\n         * @returns {function} A filter that checks for a set of strings\n         */",
        "meta": {
            "range": [
                2563,
                2624
            ],
            "filename": "webpack.js",
            "lineno": 73,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004528",
                "name": "byStrings",
                "type": "FunctionExpression"
            }
        },
        "description": "Generates a function that filters by strings.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "variable": true,
                "description": "A list of strings",
                "name": "strings"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A filter that checks for a set of strings"
            }
        ],
        "name": "byStrings",
        "longname": "Webpack.Filters.byStrings",
        "kind": "function",
        "memberof": "Webpack.Filters",
        "scope": "static"
    },
    {
        "comment": "/**\n         * Generates a function that filters by the `displayName` property.\n         * @param {string} name Name the module should have\n         * @returns {function} A filter that checks for a `displayName` match\n         */",
        "meta": {
            "range": [
                2873,
                2930
            ],
            "filename": "webpack.js",
            "lineno": 80,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004540",
                "name": "byDisplayName",
                "type": "FunctionExpression"
            }
        },
        "description": "Generates a function that filters by the `displayName` property.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name the module should have",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A filter that checks for a `displayName` match"
            }
        ],
        "name": "byDisplayName",
        "longname": "Webpack.Filters.byDisplayName",
        "kind": "function",
        "memberof": "Webpack.Filters",
        "scope": "static"
    },
    {
        "comment": "/**\n         * Generates a function that filters by a specific internal Store name.\n         * @param {string} name Name the store should have\n         * @returns {function} A filter that checks for a Store name match\n         */",
        "meta": {
            "range": [
                3179,
                3232
            ],
            "filename": "webpack.js",
            "lineno": 87,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004550",
                "name": "byStoreName",
                "type": "FunctionExpression"
            }
        },
        "description": "Generates a function that filters by a specific internal Store name.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name the store should have",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A filter that checks for a Store name match"
            }
        ],
        "name": "byStoreName",
        "longname": "Webpack.Filters.byStoreName",
        "kind": "function",
        "memberof": "Webpack.Filters",
        "scope": "static"
    },
    {
        "comment": "/**\n         * Generates a combined function from a list of filters.\n         * @param {...function} filters A list of filters\n         * @returns {function} Combinatory filter of all arguments\n         */",
        "meta": {
            "range": [
                3457,
                3514
            ],
            "filename": "webpack.js",
            "lineno": 94,
            "columnno": 8,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004560",
                "name": "combine",
                "type": "FunctionExpression"
            }
        },
        "description": "Generates a combined function from a list of filters.",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "variable": true,
                "description": "A list of filters",
                "name": "filters"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Combinatory filter of all arguments"
            }
        ],
        "name": "combine",
        "longname": "Webpack.Filters.combine",
        "kind": "function",
        "memberof": "Webpack.Filters",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Searches for a module by value, returns module & matched key. Useful in combination with the Patcher. \n     * @param {(value: any, index: number, array: any[]) => boolean} filter A function to use to filter the module\n     * @param {object} [options] Set of options to customize the search\n     * @param {any} [options.target=null] Optional module target to look inside.\n     * @param {Boolean} [options.defaultExport=true] Whether to return default export when matching the default export\n     * @param {Boolean} [options.searchExports=false] Whether to execute the filter on webpack export getters. \n     * @return {[Any, string]}\n     */",
        "meta": {
            "range": [
                4184,
                4861
            ],
            "filename": "webpack.js",
            "lineno": 106,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004572",
                "name": "getWithKey",
                "type": "FunctionExpression"
            }
        },
        "description": "Searches for a module by value, returns module & matched key. Useful in combination with the Patcher.",
        "params": [
            {},
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "Set of options to customize the search",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "description": "Optional module target to look inside.",
                "name": "options.target"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to return default export when matching the default export",
                "name": "options.defaultExport"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to execute the filter on webpack export getters.",
                "name": "options.searchExports"
            }
        ],
        "returns": [
            {}
        ],
        "name": "getWithKey",
        "longname": "Webpack.getWithKey",
        "kind": "function",
        "memberof": "Webpack",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Finds a module using a filter function.\n     * @memberof Webpack\n     * @param {function} filter A function to use to filter modules. It is given exports, module, and moduleID. Return `true` to signify match.\n     * @param {object} [options] Options to configure the search\n     * @param {boolean} [options.first=true] Whether to return only the first matching module\n     * @param {boolean} [options.defaultExport=true] Whether to return default export when matching the default export\n     * @param {boolean} [options.searchExports=false] Whether to execute the filter on webpack exports\n     * @return {any}\n     */",
        "meta": {
            "range": [
                5502,
                6257
            ],
            "filename": "webpack.js",
            "lineno": 123,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004641",
                "name": "getModule",
                "type": "FunctionExpression"
            }
        },
        "description": "Finds a module using a filter function.",
        "memberof": "Webpack",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function to use to filter modules. It is given exports, module, and moduleID. Return `true` to signify match.",
                "name": "filter"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "Options to configure the search",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to return only the first matching module",
                "name": "options.first"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to return default export when matching the default export",
                "name": "options.defaultExport"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to execute the filter on webpack exports",
                "name": "options.searchExports"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                }
            }
        ],
        "name": "getModule",
        "longname": "Webpack.getModule",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Finds all modules matching a filter function.\n     * @param {Function} filter A function to use to filter modules\n     * @param {object} [options] Options to configure the search\n     * @param {Boolean} [options.defaultExport=true] Whether to return default export when matching the default export\n     * @param {Boolean} [options.searchExports=false] Whether to execute the filter on webpack exports\n     * @return {any[]}\n     */",
        "meta": {
            "range": [
                6711,
                7306
            ],
            "filename": "webpack.js",
            "lineno": 138,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004721",
                "name": "getModules",
                "type": "FunctionExpression"
            }
        },
        "description": "Finds all modules matching a filter function.",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function to use to filter modules",
                "name": "filter"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "Options to configure the search",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to return default export when matching the default export",
                "name": "options.defaultExport"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to execute the filter on webpack exports",
                "name": "options.searchExports"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<any>"
                    ]
                }
            }
        ],
        "name": "getModules",
        "longname": "Webpack.getModules",
        "kind": "function",
        "memberof": "Webpack",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7284,
                7296
            ],
            "filename": "webpack.js",
            "lineno": 141,
            "columnno": 72,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004784",
                "name": "first",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "first",
        "longname": "first",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n     * Finds multiple modules using multiple filters.\n     * @memberof Webpack\n     * @param {...object} queries Object representing the query to perform\n     * @param {function} queries.filter A function to use to filter modules\n     * @param {boolean} [queries.first=true] Whether to return only the first matching module\n     * @param {boolean} [queries.defaultExport=true] Whether to return default export when matching the default export\n     * @param {boolean} [queries.searchExports=false] Whether to execute the filter on webpack exports\n     * @return {any}\n     */",
        "meta": {
            "range": [
                7896,
                7960
            ],
            "filename": "webpack.js",
            "lineno": 154,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004786",
                "name": "getBulk",
                "type": "FunctionExpression"
            }
        },
        "description": "Finds multiple modules using multiple filters.",
        "memberof": "Webpack",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "variable": true,
                "description": "Object representing the query to perform",
                "name": "queries"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function to use to filter modules",
                "name": "queries.filter"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to return only the first matching module",
                "name": "queries.first"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to return default export when matching the default export",
                "name": "queries.defaultExport"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to execute the filter on webpack exports",
                "name": "queries.searchExports"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                }
            }
        ],
        "name": "getBulk",
        "longname": "Webpack.getBulk",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Finds a module that is lazily loaded.\n     * @memberof Webpack\n     * @param {function} filter A function to use to filter modules. It is given exports. Return `true` to signify match.\n     * @param {object} [options] Options for configuring the listener\n     * @param {AbortSignal} [options.signal] AbortSignal of an AbortController to cancel the promise\n     * @param {boolean} [options.defaultExport=true] Whether to return default export when matching the default export\n     * @param {boolean} [options.searchExports=false] Whether to execute the filter on webpack exports\n     * @returns {Promise<any>}\n     */",
        "meta": {
            "range": [
                8599,
                9386
            ],
            "filename": "webpack.js",
            "lineno": 166,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004798",
                "name": "waitForModule",
                "type": "FunctionExpression"
            }
        },
        "description": "Finds a module that is lazily loaded.",
        "memberof": "Webpack",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "A function to use to filter modules. It is given exports. Return `true` to signify match.",
                "name": "filter"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "Options for configuring the listener",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "AbortSignal"
                    ]
                },
                "optional": true,
                "description": "AbortSignal of an AbortController to cancel the promise",
                "name": "options.signal"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to return default export when matching the default export",
                "name": "options.defaultExport"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to execute the filter on webpack exports",
                "name": "options.searchExports"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise.<any>"
                    ]
                }
            }
        ],
        "name": "waitForModule",
        "longname": "Webpack.waitForModule",
        "kind": "function",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Finds a module using its code.\n     * @param {RegEx} regex A regular expression to use to filter modules\n     * @param {object} [options] Options to configure the search\n     * @param {Boolean} [options.defaultExport=true] Whether to return default export when matching the default export\n     * @param {Boolean} [options.searchExports=false] Whether to execute the filter on webpack exports\n     * @return {Any}\n     */",
        "meta": {
            "range": [
                9829,
                9942
            ],
            "filename": "webpack.js",
            "lineno": 181,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004878",
                "name": "getByRegex",
                "type": "FunctionExpression"
            }
        },
        "description": "Finds a module using its code.",
        "params": [
            {
                "type": {
                    "names": [
                        "RegEx"
                    ]
                },
                "description": "A regular expression to use to filter modules",
                "name": "regex"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "Options to configure the search",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to return default export when matching the default export",
                "name": "options.defaultExport"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to execute the filter on webpack exports",
                "name": "options.searchExports"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Any"
                    ]
                }
            }
        ],
        "name": "getByRegex",
        "longname": "Webpack.getByRegex",
        "kind": "function",
        "memberof": "Webpack",
        "scope": "static"
    },
    {
        "comment": "/**\n     * Finds all modules using its code.\n     * @param {RegEx} regex A regular expression to use to filter modules\n     * @param {object} [options] Options to configure the search\n     * @param {Boolean} [options.defaultExport=true] Whether to return default export when matching the default export\n     * @param {Boolean} [options.searchExports=false] Whether to execute the filter on webpack exports\n     * @return {Any[]}\n     */",
        "meta": {
            "range": [
                10390,
                10540
            ],
            "filename": "webpack.js",
            "lineno": 193,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004896",
                "name": "getAllByRegex",
                "type": "FunctionExpression"
            }
        },
        "description": "Finds all modules using its code.",
        "params": [
            {
                "type": {
                    "names": [
                        "RegEx"
                    ]
                },
                "description": "A regular expression to use to filter modules",
                "name": "regex"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "description": "Options to configure the search",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to return default export when matching the default export",
                "name": "options.defaultExport"
            },
            {
                "type": {
                    "names": [
                        "Boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to execute the filter on webpack exports",
                "name": "options.searchExports"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Any>"
                    ]
                }
            }
        ],
        "name": "getAllByRegex",
        "longname": "Webpack.getAllByRegex",
        "kind": "function",
        "memberof": "Webpack",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10519,
                10530
            ],
            "filename": "webpack.js",
            "lineno": 194,
            "columnno": 92,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004920",
                "name": "first",
                "type": "Literal",
                "value": true
            }
        },
        "undocumented": true,
        "name": "first",
        "longname": "first",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n     * Finds a single module using properties on its prototype.\n     * @param {...string} prototypes Properties to use to filter modules\n     * @return {Any}\n     */",
        "meta": {
            "range": [
                10721,
                10898
            ],
            "filename": "webpack.js",
            "lineno": 202,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004922",
                "name": "getByPrototypeKeys",
                "type": "FunctionExpression"
            },
            "vars": {
                "options": "Webpack.getByPrototypeKeys~options"
            }
        },
        "description": "Finds a single module using properties on its prototype.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "variable": true,
                "description": "Properties to use to filter modules",
                "name": "prototypes"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Any"
                    ]
                }
            }
        ],
        "name": "getByPrototypeKeys",
        "longname": "Webpack.getByPrototypeKeys",
        "kind": "function",
        "memberof": "Webpack",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10771,
                10803
            ],
            "filename": "webpack.js",
            "lineno": 203,
            "columnno": 14,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004928",
                "name": "options",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "options",
        "longname": "Webpack.getByPrototypeKeys~options",
        "kind": "constant",
        "memberof": "Webpack.getByPrototypeKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n     * Finds all modules with a set of properties of its prototype.\n     * @param {...string} prototypes Properties to use to filter modules\n     * @return {Any[]}\n     */",
        "meta": {
            "range": [
                11085,
                11281
            ],
            "filename": "webpack.js",
            "lineno": 213,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004944",
                "name": "getAllByPrototypeKeys",
                "type": "FunctionExpression"
            },
            "vars": {
                "options": "Webpack.getAllByPrototypeKeys~options"
            }
        },
        "description": "Finds all modules with a set of properties of its prototype.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "variable": true,
                "description": "Properties to use to filter modules",
                "name": "prototypes"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Any>"
                    ]
                }
            }
        ],
        "name": "getAllByPrototypeKeys",
        "longname": "Webpack.getAllByPrototypeKeys",
        "kind": "function",
        "memberof": "Webpack",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11138,
                11186
            ],
            "filename": "webpack.js",
            "lineno": 214,
            "columnno": 14,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004950",
                "name": "options",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "options",
        "longname": "Webpack.getAllByPrototypeKeys~options",
        "kind": "constant",
        "memberof": "Webpack.getAllByPrototypeKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11172,
                11184
            ],
            "filename": "webpack.js",
            "lineno": 214,
            "columnno": 48,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004956",
                "name": "first",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "first",
        "longname": "first",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n     * Finds a single module using its own properties.\n     * @param {...string} props Properties to use to filter modules\n     * @return {Any}\n     */",
        "meta": {
            "range": [
                11448,
                11592
            ],
            "filename": "webpack.js",
            "lineno": 224,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004969",
                "name": "getByKeys",
                "type": "FunctionExpression"
            },
            "vars": {
                "options": "Webpack.getByKeys~options"
            }
        },
        "description": "Finds a single module using its own properties.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "variable": true,
                "description": "Properties to use to filter modules",
                "name": "props"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Any"
                    ]
                }
            }
        ],
        "name": "getByKeys",
        "longname": "Webpack.getByKeys",
        "kind": "function",
        "memberof": "Webpack",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11484,
                11511
            ],
            "filename": "webpack.js",
            "lineno": 225,
            "columnno": 14,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004975",
                "name": "options",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "options",
        "longname": "Webpack.getByKeys~options",
        "kind": "constant",
        "memberof": "Webpack.getByKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n     * Finds all modules with a set of properties.\n     * @param {...string} props Properties to use to filter modules\n     * @return {Any[]}\n     */",
        "meta": {
            "range": [
                11757,
                11920
            ],
            "filename": "webpack.js",
            "lineno": 235,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004991",
                "name": "getAllByKeys",
                "type": "FunctionExpression"
            },
            "vars": {
                "options": "Webpack.getAllByKeys~options"
            }
        },
        "description": "Finds all modules with a set of properties.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "variable": true,
                "description": "Properties to use to filter modules",
                "name": "props"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Any>"
                    ]
                }
            }
        ],
        "name": "getAllByKeys",
        "longname": "Webpack.getAllByKeys",
        "kind": "function",
        "memberof": "Webpack",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11796,
                11839
            ],
            "filename": "webpack.js",
            "lineno": 236,
            "columnno": 14,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100004997",
                "name": "options",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "options",
        "longname": "Webpack.getAllByKeys~options",
        "kind": "constant",
        "memberof": "Webpack.getAllByKeys",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                11825,
                11837
            ],
            "filename": "webpack.js",
            "lineno": 236,
            "columnno": 43,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100005003",
                "name": "first",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "first",
        "longname": "first",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n     * Finds a single module using a set of strings.\n     * @param {...String} props Strings to use to filter modules\n     * @return {Any}\n     */",
        "meta": {
            "range": [
                12082,
                12241
            ],
            "filename": "webpack.js",
            "lineno": 246,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100005016",
                "name": "getByStrings",
                "type": "FunctionExpression"
            },
            "vars": {
                "options": "Webpack.getByStrings~options"
            }
        },
        "description": "Finds a single module using a set of strings.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "variable": true,
                "description": "Strings to use to filter modules",
                "name": "props"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Any"
                    ]
                }
            }
        ],
        "name": "getByStrings",
        "longname": "Webpack.getByStrings",
        "kind": "function",
        "memberof": "Webpack",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12123,
                12152
            ],
            "filename": "webpack.js",
            "lineno": 247,
            "columnno": 14,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100005022",
                "name": "options",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "options",
        "longname": "Webpack.getByStrings~options",
        "kind": "constant",
        "memberof": "Webpack.getByStrings",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\n     * Finds all modules with a set of strings.\n     * @param {...String} strings Strings to use to filter modules\n     * @return {Any[]}\n     */",
        "meta": {
            "range": [
                12402,
                12580
            ],
            "filename": "webpack.js",
            "lineno": 257,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100005039",
                "name": "getAllByStrings",
                "type": "FunctionExpression"
            },
            "vars": {
                "options": "Webpack.getAllByStrings~options"
            }
        },
        "description": "Finds all modules with a set of strings.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "variable": true,
                "description": "Strings to use to filter modules",
                "name": "strings"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Any>"
                    ]
                }
            }
        ],
        "name": "getAllByStrings",
        "longname": "Webpack.getAllByStrings",
        "kind": "function",
        "memberof": "Webpack",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12446,
                12491
            ],
            "filename": "webpack.js",
            "lineno": 258,
            "columnno": 14,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100005045",
                "name": "options",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "options",
        "longname": "Webpack.getAllByStrings~options",
        "kind": "constant",
        "memberof": "Webpack.getAllByStrings",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12477,
                12489
            ],
            "filename": "webpack.js",
            "lineno": 258,
            "columnno": 45,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100005051",
                "name": "first",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "first",
        "longname": "first",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\n     * Finds an internal Store module using the name.\n     * @param {String} name Name of the store to find (usually includes \"Store\")\n     * @return {Any}\n     */",
        "meta": {
            "range": [
                12759,
                12835
            ],
            "filename": "webpack.js",
            "lineno": 268,
            "columnno": 4,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100005065",
                "name": "getStore",
                "type": "FunctionExpression"
            }
        },
        "description": "Finds an internal Store module using the name.",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "description": "Name of the store to find (usually includes \"Store\")",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Any"
                    ]
                }
            }
        ],
        "name": "getStore",
        "longname": "Webpack.getStore",
        "kind": "function",
        "memberof": "Webpack",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                12898,
                12921
            ],
            "filename": "webpack.js",
            "lineno": 274,
            "columnno": 0,
            "path": "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api",
            "code": {
                "id": "astnode100005093",
                "name": "module.exports",
                "type": "Identifier"
            }
        },
        "undocumented": true,
        "name": "exports",
        "longname": "module.exports",
        "kind": "member",
        "memberof": "module",
        "scope": "static"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api\\addonapi.js",
            "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api\\contextmenu.js",
            "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api\\data.js",
            "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api\\dom.js",
            "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api\\fetch.js",
            "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api\\index.js",
            "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api\\legacy.js",
            "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api\\logger.js",
            "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api\\patcher.js",
            "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api\\reactutils.js",
            "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api\\ui.js",
            "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api\\utils.js",
            "D:\\BetterDiscord\\BetterDiscord\\renderer\\src\\modules\\api\\webpack.js"
        ]
    }
]
