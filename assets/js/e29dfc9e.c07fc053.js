"use strict";(self.webpackChunk_betterdiscord_docs=self.webpackChunk_betterdiscord_docs||[]).push([[2510],{5162:(e,n,t)=>{t.d(n,{Z:()=>l});var a=t(7294),i=t(6010);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:t,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(o.tabItem,l),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>v});var a=t(7462),i=t(7294),o=t(6010),l=t(2466),r=t(6775),s=t(1980),u=t(7392),p=t(12);function c(e){return function(e){var n;return(null==(n=i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:n.filter(Boolean))??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}function d(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??c(t);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const a=(0,r.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(o),(0,i.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function h(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=d(e),[l,r]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[s,u]=g({queryString:t,groupId:a}),[c,h]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,p.Nk)(t);return[a,(0,i.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),b=(()=>{const e=s??c;return m({value:e,tabValues:o})?e:null})();(0,i.useLayoutEffect)((()=>{b&&r(b)}),[b]);return{selectedValue:l,selectValue:(0,i.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);r(e),u(e),h(e)}),[u,h,o]),tabValues:o}}var b=t(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){let{className:n,block:t,selectedValue:r,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),d=e=>{const n=e.currentTarget,t=p.indexOf(n),a=u[t].value;a!==r&&(c(n),s(a))},m=e=>{var n;let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}null==(n=t)||n.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:l}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,key:n,ref:e=>p.push(e),onKeyDown:m,onClick:d},l,{className:(0,o.Z)("tabs__item",f.tabItem,null==l?void 0:l.className,{"tabs__item--active":r===n})}),t??n)})))}function w(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function y(e){const n=h(e);return i.createElement("div",{className:(0,o.Z)("tabs-container",f.tabList)},i.createElement(k,(0,a.Z)({},e,n)),i.createElement(w,(0,a.Z)({},e,n)))}function v(e){const n=(0,b.Z)();return i.createElement(y,(0,a.Z)({key:String(n)},e))}},2470:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>r,metadata:()=>u,toc:()=>c});var a=t(7462),i=(t(7294),t(3905)),o=t(4866),l=t(5162);t(614);const r={sidebar_position:2,description:"Learning to bundle a plugin."},s="Bundling",u={unversionedId:"plugins/intermediate/bundling",id:"plugins/intermediate/bundling",title:"Bundling",description:"Learning to bundle a plugin.",source:"@site/docs/plugins/intermediate/bundling.mdx",sourceDirName:"plugins/intermediate",slug:"/plugins/intermediate/bundling",permalink:"/plugins/intermediate/bundling",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Learning to bundle a plugin."},sidebar:"pluginsSidebar",previous:{title:"React",permalink:"/plugins/intermediate/react"},next:{title:"Advanced",permalink:"/plugins/advanced"}},p={},c=[{value:"Background",id:"background",level:2},{value:"What is it?",id:"what-is-it",level:3},{value:"Why do I want it?",id:"why-do-i-want-it",level:3},{value:"Which one do I want?",id:"which-one-do-i-want",level:3},{value:"Usage",id:"usage",level:2},{value:"Installation",id:"installation",level:3},{value:"Plugin Structure",id:"plugin-structure",level:3},{value:"Making The Plugin",id:"making-the-plugin",level:3},{value:"Configuring Webpack",id:"configuring-webpack",level:3},{value:"Building The meta",id:"building-the-meta",level:4},{value:"Going Further",id:"going-further",level:2},{value:"Copy Plugin",id:"copy-plugin",level:3},{value:"CSS",id:"css",level:3},{value:"Installation",id:"installation-1",level:4},{value:"Configuration",id:"configuration",level:4},{value:"Usage",id:"usage-1",level:4},{value:"JSX",id:"jsx",level:3},{value:"Installation",id:"installation-2",level:4},{value:"Configuration",id:"configuration-1",level:4},{value:"Usage",id:"usage-2",level:4},{value:"TypeScript",id:"typescript",level:3}],d={toc:c},m="wrapper";function g(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"bundling"},"Bundling"),(0,i.kt)("h2",{id:"background"},"Background"),(0,i.kt)("h3",{id:"what-is-it"},"What is it?"),(0,i.kt)("p",null,"In the JavaScript ecosystem, bundling is the technique of taking many files, and packing them into one large file while maintaining imports and exports as if all the files were separate. It is also a form of transpilation."),(0,i.kt)("h3",{id:"why-do-i-want-it"},"Why do I want it?"),(0,i.kt)("p",null,"They allow you to structure your plugin like you would any other JavaScript project, but still deliver it as a single file as needed by BetterDiscord. Bundling also opens the door to other types of transpilation such as transpiling ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"TypeScript")," or JSX."),(0,i.kt)("h3",{id:"which-one-do-i-want"},"Which one do I want?"),(0,i.kt)("p",null,"No clue. They all have their pros and cons, and Snipcart breaks it down really well in their ",(0,i.kt)("a",{parentName:"p",href:"https://snipcart.com/blog/javascript-module-bundler"},"In-Depth Guide"),". Take a look through there, and try a few different bundlers out and see which one is right for you and your project. One notable bundler missing from the Snipcart list is ",(0,i.kt)("a",{parentName:"p",href:"https://esbuild.github.io/"},"esbuild")," which touts the fastest build speeds."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This section will be going over how to setup Webpack for use with BetterDiscord. Check the documentation for your own bundler to find configuration options similar to what's shown here.")),(0,i.kt)("p",null,"Make sure you set up your ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," before continuing."),(0,i.kt)("h3",{id:"installation"},"Installation"),(0,i.kt)("p",null,"To get started with Webpack for BetterDiscord, install Webpack!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev webpack webpack-cli\n")),(0,i.kt)("h3",{id:"plugin-structure"},"Plugin Structure"),(0,i.kt)("p",null,"The basic plugin structure consists of a source folder, ",(0,i.kt)("inlineCode",{parentName:"p"},"src"),", an entry point ",(0,i.kt)("inlineCode",{parentName:"p"},"src/index.js"),", a plugin config ",(0,i.kt)("inlineCode",{parentName:"p"},"src/config.json"),", the webpack config ",(0,i.kt)("inlineCode",{parentName:"p"},"webpack.config.js")," and of course the ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),". For a more detailed visual, see below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},".\n\u251c\u2500\u2500dist                    // Contains all the outputs from webpack, don't commit this to git.\n\u2502   \u2514\u2500\u2500MyPlugin.plugin.js  // BetterDiscord-compatible output.\n\u251c\u2500\u2500src                     // Your source code.\n\u2502   \u251c\u2500\u2500config.json         // Plugin configuration file, replaces meta comment.\n\u2502   \u251c\u2500\u2500component.js        // Any other file you may need to include.\n\u2502   \u2514\u2500\u2500index.js            // The webpack entrypoint and main logic of plugin.\n\u251c\u2500\u2500package.json            // Your module's package info.\n\u2514\u2500\u2500webpack.config.js       // Webpack build configuration file.\n")),(0,i.kt)("h3",{id:"making-the-plugin"},"Making The Plugin"),(0,i.kt)("p",null,"To keep things simple, let's take the plugin from the ",(0,i.kt)("a",{parentName:"p",href:"/plugins/intermediate/react"},"previous section")," and try to separate it out and build it with Webpack. If we identify the parts of that plugin, we end up with the meta comment, the react component, and the main plugin class. So that corresponds to three different files shown below."),(0,i.kt)(o.Z,{className:"code-tabs files",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"src/config.json",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"showLineNumbers",showLineNumbers:!0},'{\n  "name": "My Component Demo",\n  "description": "Showing off a settings panel with a custom react component.",\n  "author": "BetterDiscord"\n}\n'))),(0,i.kt)(l.Z,{value:"src/component.js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"showLineNumbers",showLineNumbers:!0},'export default function MyComponent({disabled = false}) {\n  const [isDisabled, setDisabled] = BdApi.React.useState(disabled);\n  return BdApi.React.createElement("button", {className: "my-component", disabled: isDisabled}, "Hello World!");\n}\n'))),(0,i.kt)(l.Z,{value:"src/index.js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"showLineNumbers",showLineNumbers:!0},'import MyComponent from "./component";\n  \nexport default class test { \n  start() {}\n  stop() {}\n\n  getSettingsPanel() {\n    return MyComponent;\n  }\n}\n')))),(0,i.kt)("p",null,"Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/config.json")," ",(0,i.kt)("strong",{parentName:"p"},"does not include")," a version number. This is because there is already a version number in ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),", so no need to do double maintenance. We'll show you how to make use of it later on."),(0,i.kt)("h3",{id:"configuring-webpack"},"Configuring Webpack"),(0,i.kt)("p",null,"Before we even configure Webpack proper, let's just quickly adjust our ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," to add our build script."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="package.json"',title:'"package.json"'},'{\n  "scripts": {\n+   "build": "webpack --progress --color"\n  }\n}\n')),(0,i.kt)("p",null,"Now with that out of the way, let's take a look at a general commonjs output Webpack configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="webpack.config.js" showLineNumbers',title:'"webpack.config.js"',showLineNumbers:!0},'const path = require("path");\n\nmodule.exports = {\n  mode: "development",\n  target: "node",\n  devtool: false,\n  entry: "./src/index.js",\n  output: {\n    filename: "MyPlugin.plugin.js",\n    path: path.join(__dirname, "dist"),\n    libraryTarget: "commonjs2",\n    libraryExport: "default",\n    compareBeforeEmit: false\n  },\n  resolve: {\n    extensions: [".js"],\n  },\n};\n')),(0,i.kt)("p",null,"And if you were to build the plugin (",(0,i.kt)("inlineCode",{parentName:"p"},"npm run build"),") with this, it would look pretty good, you would even see that the default export of ",(0,i.kt)("inlineCode",{parentName:"p"},"src/index.js")," is assigned to ",(0,i.kt)("inlineCode",{parentName:"p"},"module.exports"),". But it wouldn't load in BetterDiscord. That's because the meta comment at the top wouldn't be generated."),(0,i.kt)("h4",{id:"building-the-meta"},"Building The meta"),(0,i.kt)("p",null,"So how do we add the meta to the output? We make use of a webpack banner plugin! First, let's build the meta comment as a string."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"showLineNumbers",showLineNumbers:!0},'const pkg = require("./package.json");\nconst pluginConfig = require("./src/config.json");\npluginConfig.version = pkg.version;\n\nconst meta = (() => {\n  const lines = ["/**"];\n  for (const key in pluginConfig) {\n    lines.push(` * @${key} ${pluginConfig[key]}`);\n  }\n  lines.push(" */");\n  return lines.join("\\n");\n})();\n')),(0,i.kt)("p",null,"If you notice, this gets the version from ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," which answers our question from earlier. Now ",(0,i.kt)("inlineCode",{parentName:"p"},"meta")," contains the comment string, all we have to do is add it to the beginning of the file at the end of the build."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="webpack.config.js" showLineNumbers',title:'"webpack.config.js"',showLineNumbers:!0},'const webpack = require("webpack");\n\nconst meta = "..."; // the meta we built before\n\nmodule.exports = {\n  ..., // Rest of your config\n  plugins: [\n    new webpack.BannerPlugin({raw: true, banner: meta}),\n  ]\n}\n')),(0,i.kt)("p",null,"So if we put it all together we end up with a full config like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="webpack.config.js" showLineNumbers',title:'"webpack.config.js"',showLineNumbers:!0},'const path = require("path");\nconst webpack = require("webpack");\nconst pkg = require("./package.json");\nconst pluginConfig = require("./src/config.json");\npluginConfig.version = pkg.version;\n\nconst meta = (() => {\n  const lines = ["/**"];\n  for (const key in pluginConfig) {\n    lines.push(` * @${key} ${pluginConfig[key]}`);\n  }\n  lines.push(" */");\n  return lines.join("\\n");\n})();\n\nmodule.exports = {\n  mode: "development",\n  target: "node",\n  devtool: false,\n  entry: "./src/index.js",\n  output: {\n    filename: "test.plugin.js",\n    path: path.join(__dirname, "dist"),\n    libraryTarget: "commonjs2",\n    libraryExport: "default",\n    compareBeforeEmit: false\n  },\n  resolve: {\n    extensions: [".js"],\n  },\n  plugins: [\n    new webpack.BannerPlugin({raw: true, banner: meta}),\n  ]\n};\n')),(0,i.kt)("p",null,"Now if you build it (",(0,i.kt)("inlineCode",{parentName:"p"},"npm run build"),") and copy it over to your ",(0,i.kt)("inlineCode",{parentName:"p"},"plugins")," folder, you should see a little toast letting you know that it loaded successfully. "),(0,i.kt)("p",null,"If you saw the toast, then congratulations! You successfully configured Webpack to build your plugin! But... Can we do better?"),(0,i.kt)("h2",{id:"going-further"},"Going Further"),(0,i.kt)("p",null,"So you've got your plugin able to build using Webpack, that's great! But what if we wanted more? What if we wanted Webpack to copy the built plugin to the ",(0,i.kt)("inlineCode",{parentName:"p"},"plugin")," folder so we don't have to? Or what if we wanted to use TypeScript? Or even JSX for React? Is including CSS possible?"),(0,i.kt)("p",null,"If you asked any of those questions, keep reading."),(0,i.kt)("h3",{id:"copy-plugin"},"Copy Plugin"),(0,i.kt)("p",null,"This is one of the most common needs when working with Webpack and BetterDiscord. It's also incredibly easy to do! Open up your Webpack config file and add two new imports at the top."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},'+const fs = require("fs");\n+const path = require("path");\n')),(0,i.kt)("p",null,"We'll be using those in our new plugin that we will write ourselves. Making a plugin for Webpack is very easy, the simplest structure (the one we'll be using) for running after the plugin is built looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{\n  apply: (compiler) => {\n    compiler.hooks.assetEmitted.tap("YourPluginName", (filename, info) => {\n      // Your code here!\n    });\n  }\n}\n')),(0,i.kt)("p",null,"But you can call ",(0,i.kt)("inlineCode",{parentName:"p"},"YourPluginName")," anything, it's just used to differeniate between taps. Now we have to write some code that can actually copy the file. The way we'll be showing here is platform agnostic but verbose, so feel free to change it up to work only for your own system."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"showLineNumbers",showLineNumbers:!0},'const userConfig = (() => {\n  if (process.platform === "win32") return process.env.APPDATA;\n  if (process.platform === "darwin") return path.join(process.env.HOME, "Library", "Application Support");\n  if (process.env.XDG_CONFIG_HOME) return process.env.XDG_CONFIG_HOME;\n  return path.join(process.env.HOME, "Library", ".config");\n})();\nconst bdFolder = path.join(userConfig, "BetterDiscord");\nfs.copyFileSync(info.targetPath, path.join(bdFolder, "plugins", filename));\nconsole.log(`\\n\\n\u2705 Copied to BD folder\\n`);\n')),(0,i.kt)("p",null,"Place this code inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"assetEmitted")," tap from before, and then paste that whole section of code into the ",(0,i.kt)("inlineCode",{parentName:"p"},"plugins")," part of the Webpack config. Next time you build, your plugin will be automatically copied over to your ",(0,i.kt)("inlineCode",{parentName:"p"},"plugin")," folder!"),(0,i.kt)("h3",{id:"css"},"CSS"),(0,i.kt)("p",null,"The way CSS normally works with Webpack is using the ",(0,i.kt)("inlineCode",{parentName:"p"},"style-loader")," which would build a companion CSS bundle that is automatically loaded with your JS bundle. This isn't really an option for BetterDiscord plugins since we have to remain single file and only activate CSS when enabled."),(0,i.kt)("p",null,"What we tend to use is the ",(0,i.kt)("inlineCode",{parentName:"p"},"raw-loader"),". So that's what we'll be showing below. This loader loads any external files it's configured to as strings which are included in your main bundle. This affords plugins the freedom to add and remove different styles at will using ",(0,i.kt)("inlineCode",{parentName:"p"},"BdApi"),"."),(0,i.kt)("h4",{id:"installation-1"},"Installation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev raw-loader\n")),(0,i.kt)("h4",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"Add a little ",(0,i.kt)("inlineCode",{parentName:"p"},"rules")," section to your Webpack config and also allow ",(0,i.kt)("inlineCode",{parentName:"p"},".css")," files to be resolved."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="webpack.config.js"',title:'"webpack.config.js"'},'module.exports = {\n  ...,\n  resolve: {\n-   extensions: [".js"],\n+   extensions: [".js", ".css"],\n  },\n  ...,\n+ module: {\n+   rules: [{test: /\\.css$/, use: "raw-loader"}]\n+ },\n  ...\n}\n')),(0,i.kt)("p",null,"This configures ",(0,i.kt)("inlineCode",{parentName:"p"},"raw-loader")," to affect CSS files by using the regex ",(0,i.kt)("inlineCode",{parentName:"p"},"/\\.css$/")," which checks for any filenames being included that end with ",(0,i.kt)("inlineCode",{parentName:"p"},".css"),". Perfect for our use-case here. "),(0,i.kt)("h4",{id:"usage-1"},"Usage"),(0,i.kt)("p",null,"Now how do we use it? Create your CSS somewhere in your source directory. Then simply ",(0,i.kt)("inlineCode",{parentName:"p"},"require"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"import")," it and treat it like a string!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/index.js" showLineNumbers',title:'"src/index.js"',showLineNumbers:!0},'import styles from "./styles.css";\n\nexport default class MyPlugin {\n  constructor(meta) {\n    this.meta = meta;\n  }\n\n  start() {\n    BdApi.DOM.addStyle(this.meta.name, styles);\n  }\n\n  stop() {\n    BdApi.DOM.removeStyle(this.meta.name);\n  }\n}\n')),(0,i.kt)("p",null,"Go ahead and give it a try, you'll find it's really that easy!"),(0,i.kt)("h3",{id:"jsx"},"JSX"),(0,i.kt)("p",null,"There are multiple transpilers that can help with using JSX in Webpack. In this brief guide we'll be showing transpilation using ",(0,i.kt)("a",{parentName:"p",href:"https://babeljs.io/"},"Babel"),"."),(0,i.kt)("h4",{id:"installation-2"},"Installation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev @babel/core @babel/preset-env @babel/preset-react babel-loader\n")),(0,i.kt)("h4",{id:"configuration-1"},"Configuration"),(0,i.kt)("p",null,"Create a new ",(0,i.kt)("inlineCode",{parentName:"p"},".babelrc")," file that includes the two presets we just installed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title=".babelrc" showLineNumbers',title:'".babelrc"',showLineNumbers:!0},'{\n  "presets": [\n    [\n      "@babel/env",\n      {\n        "targets": {\n          "node": "16.17.1",\n          "chrome": "108"\n        }\n      }\n    ],\n    "@babel/preset-react"\n  ]\n}\n')),(0,i.kt)("p",null,"Now adjust your Webpack config to resolve ",(0,i.kt)("inlineCode",{parentName:"p"},".jsx")," files and use ",(0,i.kt)("inlineCode",{parentName:"p"},"babel-loader")," for ",(0,i.kt)("inlineCode",{parentName:"p"},".jsx")," files"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="webpack.config.js"',title:'"webpack.config.js"'},'module.exports = {\n  ...,\n  resolve: {\n-   extensions: [".js"],\n+   extensions: [".js", ".jsx"],\n  },\n  ...,\n+ module: {\n+   rules: [{test: /\\.jsx$/, exclude: /node_modules/, use: "babel-loader"}]\n+ },\n  ...\n}\n')),(0,i.kt)("p",null,"You can optionally use ",(0,i.kt)("inlineCode",{parentName:"p"},"babel-loader")," on all ",(0,i.kt)("inlineCode",{parentName:"p"},".js")," files as well if you have other transpilation needs, but here we're just using it as a JSX converter."),(0,i.kt)("h4",{id:"usage-2"},"Usage"),(0,i.kt)("p",null,"If you remember our original Webpack setup from before, let's change our ",(0,i.kt)("inlineCode",{parentName:"p"},"src/component.js")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"src/component.jsx"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/component.jsx" showLineNumbers',title:'"src/component.jsx"',showLineNumbers:!0},'export default function MyComponent({disabled = false}) {\n    const [isDisabled, setDisabled] = BdApi.React.useState(disabled);\n    return <button className="my-component" disabled={isDisabled}>\n            "Hello World!"\n          </button>;\n}\n')),(0,i.kt)("p",null,"Now if you were to build this and open your settings panel, you would get an error saying ",(0,i.kt)("inlineCode",{parentName:"p"},"React is not defined"),". That's because ",(0,i.kt)("inlineCode",{parentName:"p"},"babel-loader")," using ",(0,i.kt)("inlineCode",{parentName:"p"},"React.createElement")," and not ",(0,i.kt)("inlineCode",{parentName:"p"},"BdApi.React.createElement"),". There's two ways to get around this, the easiest is to just put ",(0,i.kt)("inlineCode",{parentName:"p"},"const React = BdApi.React;")," at the top of your component file. That's fine for a single file, but as your plugin expands it becomes very tedious. You can solve this with one small adjustment to the ",(0,i.kt)("inlineCode",{parentName:"p"},".babelrc"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title=".babelrc"',title:'".babelrc"'},'{\n  "presets": [\n    ...,\n-   "@babel/preset-react"\n+   [\n+     "@babel/preset-react",\n+     {\n+       "pragma": "BdApi.React.createElement"\n+     }\n+   ]\n  ]\n}\n')),(0,i.kt)("p",null,"Now try building and opening your settings panel again, you'll see it loads just fine!"),(0,i.kt)("h3",{id:"typescript"},"TypeScript"),(0,i.kt)("p",null,"This has no special requirements for BetterDiscord! Take a look at ",(0,i.kt)("a",{parentName:"p",href:"https://webpack.js.org/guides/typescript/"},"Webpack's official guide")," on using TypeScript with Webpack."))}g.isMDXComponent=!0}}]);